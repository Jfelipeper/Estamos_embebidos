
Projecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  080097ec  080097ec  0000a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e74  08009e74  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e7c  08009e7c  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009e84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002528  20000078  08009efc  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025a0  08009efc  0000b5a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff97  00000000  00000000  0000b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc3  00000000  00000000  0001b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6f  00000000  00000000  0001ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c83  00000000  00000000  0001f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014df0  00000000  00000000  000394e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d28d  00000000  00000000  0004e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db55f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004128  00000000  00000000  000db5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000df6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080097d4 	.word	0x080097d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080097d4 	.word	0x080097d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GetTemperatura>:


UART_HandleTypeDef *uart;
ADC_HandleTypeDef *adc;

void GetTemperatura(char * buffer){
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
int parte_entera;
int parte_decimal;
int adc_value;
int adc_value1;

	HAL_ADC_Start(adc);
 8000164:	4b29      	ldr	r3, [pc, #164]	@ (800020c <GetTemperatura+0xb0>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4618      	mov	r0, r3
 800016a:	f001 fd79 	bl	8001c60 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(adc, 100) == HAL_OK) {
 800016e:	4b27      	ldr	r3, [pc, #156]	@ (800020c <GetTemperatura+0xb0>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	2164      	movs	r1, #100	@ 0x64
 8000174:	4618      	mov	r0, r3
 8000176:	f001 fe4d 	bl	8001e14 <HAL_ADC_PollForConversion>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d106      	bne.n	800018e <GetTemperatura+0x32>
		      adc_value = HAL_ADC_GetValue(adc);
 8000180:	4b22      	ldr	r3, [pc, #136]	@ (800020c <GetTemperatura+0xb0>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	f001 ff4b 	bl	8002020 <HAL_ADC_GetValue>
 800018a:	4603      	mov	r3, r0
 800018c:	617b      	str	r3, [r7, #20]
		}
		HAL_ADC_Stop(adc);
 800018e:	4b1f      	ldr	r3, [pc, #124]	@ (800020c <GetTemperatura+0xb0>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4618      	mov	r0, r3
 8000194:	f001 fe12 	bl	8001dbc <HAL_ADC_Stop>
		adc_value1=(((adc_value*100000)/4096)*330)-5000000;
 8000198:	697b      	ldr	r3, [r7, #20]
 800019a:	4a1d      	ldr	r2, [pc, #116]	@ (8000210 <GetTemperatura+0xb4>)
 800019c:	fb02 f303 	mul.w	r3, r2, r3
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	da01      	bge.n	80001a8 <GetTemperatura+0x4c>
 80001a4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80001a8:	131b      	asrs	r3, r3, #12
 80001aa:	461a      	mov	r2, r3
 80001ac:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80001b0:	fb03 f202 	mul.w	r2, r3, r2
 80001b4:	4b17      	ldr	r3, [pc, #92]	@ (8000214 <GetTemperatura+0xb8>)
 80001b6:	4413      	add	r3, r2
 80001b8:	613b      	str	r3, [r7, #16]
		parte_entera=adc_value1/100000;
 80001ba:	693b      	ldr	r3, [r7, #16]
 80001bc:	4a16      	ldr	r2, [pc, #88]	@ (8000218 <GetTemperatura+0xbc>)
 80001be:	fb82 1203 	smull	r1, r2, r2, r3
 80001c2:	1352      	asrs	r2, r2, #13
 80001c4:	17db      	asrs	r3, r3, #31
 80001c6:	1ad3      	subs	r3, r2, r3
 80001c8:	60fb      	str	r3, [r7, #12]
		parte_decimal=abs(adc_value1%(parte_entera*100000));
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	4a10      	ldr	r2, [pc, #64]	@ (8000210 <GetTemperatura+0xb4>)
 80001ce:	fb03 f202 	mul.w	r2, r3, r2
 80001d2:	693b      	ldr	r3, [r7, #16]
 80001d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80001d8:	fb01 f202 	mul.w	r2, r1, r2
 80001dc:	1a9b      	subs	r3, r3, r2
 80001de:	2b00      	cmp	r3, #0
 80001e0:	bfb8      	it	lt
 80001e2:	425b      	neglt	r3, r3
 80001e4:	60bb      	str	r3, [r7, #8]
		parte_decimal=parte_decimal/1000;
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <GetTemperatura+0xc0>)
 80001ea:	fb82 1203 	smull	r1, r2, r2, r3
 80001ee:	1192      	asrs	r2, r2, #6
 80001f0:	17db      	asrs	r3, r3, #31
 80001f2:	1ad3      	subs	r3, r2, r3
 80001f4:	60bb      	str	r3, [r7, #8]
		sprintf(buffer,"%d,%2.2d Â°C\n\r", parte_entera, parte_decimal);
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	4909      	ldr	r1, [pc, #36]	@ (8000220 <GetTemperatura+0xc4>)
 80001fc:	6878      	ldr	r0, [r7, #4]
 80001fe:	f008 fe31 	bl	8008e64 <siprintf>
}
 8000202:	bf00      	nop
 8000204:	3718      	adds	r7, #24
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000098 	.word	0x20000098
 8000210:	000186a0 	.word	0x000186a0
 8000214:	ffb3b4c0 	.word	0xffb3b4c0
 8000218:	14f8b589 	.word	0x14f8b589
 800021c:	10624dd3 	.word	0x10624dd3
 8000220:	080097ec 	.word	0x080097ec

08000224 <GetTemperatura_init>:

void GetTemperatura_init(ADC_HandleTypeDef *hadc1, UART_HandleTypeDef *huart1){
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
	adc = hadc1;
 800022e:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <GetTemperatura_init+0x20>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	6013      	str	r3, [r2, #0]
	uart = huart1;
 8000234:	4a04      	ldr	r2, [pc, #16]	@ (8000248 <GetTemperatura_init+0x24>)
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	20000098 	.word	0x20000098
 8000248:	20000094 	.word	0x20000094

0800024c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2110      	movs	r1, #16
 8000254:	4803      	ldr	r0, [pc, #12]	@ (8000264 <SELECT+0x18>)
 8000256:	f002 fb02 	bl	800285e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 fc04 	bl	8001a68 <HAL_Delay>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010800 	.word	0x40010800

08000268 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2110      	movs	r1, #16
 8000270:	4803      	ldr	r0, [pc, #12]	@ (8000280 <DESELECT+0x18>)
 8000272:	f002 faf4 	bl	800285e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f001 fbf6 	bl	8001a68 <HAL_Delay>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010800 	.word	0x40010800

08000284 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800028e:	bf00      	nop
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <SPI_TxByte+0x30>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b02      	cmp	r3, #2
 800029c:	d1f8      	bne.n	8000290 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800029e:	1df9      	adds	r1, r7, #7
 80002a0:	2364      	movs	r3, #100	@ 0x64
 80002a2:	2201      	movs	r2, #1
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <SPI_TxByte+0x30>)
 80002a6:	f003 febf 	bl	8004028 <HAL_SPI_Transmit>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	200000e8 	.word	0x200000e8

080002b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002c4:	bf00      	nop
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <SPI_TxBuffer+0x30>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	f003 0302 	and.w	r3, r3, #2
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d1f8      	bne.n	80002c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80002d4:	887a      	ldrh	r2, [r7, #2]
 80002d6:	2364      	movs	r3, #100	@ 0x64
 80002d8:	6879      	ldr	r1, [r7, #4]
 80002da:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <SPI_TxBuffer+0x30>)
 80002dc:	f003 fea4 	bl	8004028 <HAL_SPI_Transmit>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200000e8 	.word	0x200000e8

080002ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80002f2:	23ff      	movs	r3, #255	@ 0xff
 80002f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002f6:	bf00      	nop
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <SPI_RxByte+0x34>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	2b02      	cmp	r3, #2
 8000304:	d1f8      	bne.n	80002f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000306:	1dba      	adds	r2, r7, #6
 8000308:	1df9      	adds	r1, r7, #7
 800030a:	2364      	movs	r3, #100	@ 0x64
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2301      	movs	r3, #1
 8000310:	4803      	ldr	r0, [pc, #12]	@ (8000320 <SPI_RxByte+0x34>)
 8000312:	f003 ffcc 	bl	80042ae <HAL_SPI_TransmitReceive>

	return data;
 8000316:	79bb      	ldrb	r3, [r7, #6]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200000e8 	.word	0x200000e8

08000324 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800032c:	f7ff ffde 	bl	80002ec <SPI_RxByte>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	701a      	strb	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <SD_ReadyWait+0x30>)
 8000348:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800034c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800034e:	f7ff ffcd 	bl	80002ec <SPI_RxByte>
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2bff      	cmp	r3, #255	@ 0xff
 800035a:	d003      	beq.n	8000364 <SD_ReadyWait+0x24>
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <SD_ReadyWait+0x30>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1f4      	bne.n	800034e <SD_ReadyWait+0xe>

	return res;
 8000364:	79fb      	ldrb	r3, [r7, #7]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000009e 	.word	0x2000009e

08000374 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800037a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800037e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000380:	f7ff ff72 	bl	8000268 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	e005      	b.n	8000396 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800038a:	20ff      	movs	r0, #255	@ 0xff
 800038c:	f7ff ff7a 	bl	8000284 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	3301      	adds	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b09      	cmp	r3, #9
 800039a:	ddf6      	ble.n	800038a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800039c:	f7ff ff56 	bl	800024c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80003a0:	2340      	movs	r3, #64	@ 0x40
 80003a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80003b4:	2395      	movs	r3, #149	@ 0x95
 80003b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80003b8:	463b      	mov	r3, r7
 80003ba:	2106      	movs	r1, #6
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff7b 	bl	80002b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80003c2:	e002      	b.n	80003ca <SD_PowerOn+0x56>
	{
		cnt--;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80003ca:	f7ff ff8f 	bl	80002ec <SPI_RxByte>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d002      	beq.n	80003da <SD_PowerOn+0x66>
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1f4      	bne.n	80003c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80003da:	f7ff ff45 	bl	8000268 <DESELECT>
	SPI_TxByte(0XFF);
 80003de:	20ff      	movs	r0, #255	@ 0xff
 80003e0:	f7ff ff50 	bl	8000284 <SPI_TxByte>

	PowerFlag = 1;
 80003e4:	4b03      	ldr	r3, [pc, #12]	@ (80003f4 <SD_PowerOn+0x80>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000a1 	.word	0x200000a1

080003f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <SD_PowerOff+0x14>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	200000a1 	.word	0x200000a1

08000410 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000414:	4b02      	ldr	r3, [pc, #8]	@ (8000420 <SD_CheckPower+0x10>)
 8000416:	781b      	ldrb	r3, [r3, #0]
}
 8000418:	4618      	mov	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	200000a1 	.word	0x200000a1

08000424 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800042e:	4b13      	ldr	r3, [pc, #76]	@ (800047c <SD_RxDataBlock+0x58>)
 8000430:	22c8      	movs	r2, #200	@ 0xc8
 8000432:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000434:	f7ff ff5a 	bl	80002ec <SPI_RxByte>
 8000438:	4603      	mov	r3, r0
 800043a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	2bff      	cmp	r3, #255	@ 0xff
 8000440:	d103      	bne.n	800044a <SD_RxDataBlock+0x26>
 8000442:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <SD_RxDataBlock+0x58>)
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1f4      	bne.n	8000434 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	2bfe      	cmp	r3, #254	@ 0xfe
 800044e:	d001      	beq.n	8000454 <SD_RxDataBlock+0x30>
 8000450:	2300      	movs	r3, #0
 8000452:	e00f      	b.n	8000474 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff62 	bl	8000324 <SPI_RxBytePtr>
	} while(len--);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	603a      	str	r2, [r7, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f4      	bne.n	8000454 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800046a:	f7ff ff3f 	bl	80002ec <SPI_RxByte>
	SPI_RxByte();
 800046e:	f7ff ff3d 	bl	80002ec <SPI_RxByte>

	return TRUE;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000009c 	.word	0x2000009c

08000480 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000490:	f7ff ff56 	bl	8000340 <SD_ReadyWait>
 8000494:	4603      	mov	r3, r0
 8000496:	2bff      	cmp	r3, #255	@ 0xff
 8000498:	d001      	beq.n	800049e <SD_TxDataBlock+0x1e>
 800049a:	2300      	movs	r3, #0
 800049c:	e02f      	b.n	80004fe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800049e:	78fb      	ldrb	r3, [r7, #3]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff feef 	bl	8000284 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2bfd      	cmp	r3, #253	@ 0xfd
 80004aa:	d020      	beq.n	80004ee <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80004ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff ff01 	bl	80002b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80004b6:	f7ff ff19 	bl	80002ec <SPI_RxByte>
		SPI_RxByte();
 80004ba:	f7ff ff17 	bl	80002ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80004be:	e00b      	b.n	80004d8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80004c0:	f7ff ff14 	bl	80002ec <SPI_RxByte>
 80004c4:	4603      	mov	r3, r0
 80004c6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f003 031f 	and.w	r3, r3, #31
 80004ce:	2b05      	cmp	r3, #5
 80004d0:	d006      	beq.n	80004e0 <SD_TxDataBlock+0x60>
			i++;
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	2b40      	cmp	r3, #64	@ 0x40
 80004dc:	d9f0      	bls.n	80004c0 <SD_TxDataBlock+0x40>
 80004de:	e000      	b.n	80004e2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80004e0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80004e2:	bf00      	nop
 80004e4:	f7ff ff02 	bl	80002ec <SPI_RxByte>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0fa      	beq.n	80004e4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f003 031f 	and.w	r3, r3, #31
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	d101      	bne.n	80004fc <SD_TxDataBlock+0x7c>
 80004f8:	2301      	movs	r3, #1
 80004fa:	e000      	b.n	80004fe <SD_TxDataBlock+0x7e>

	return FALSE;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	6039      	str	r1, [r7, #0]
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000512:	f7ff ff15 	bl	8000340 <SD_ReadyWait>
 8000516:	4603      	mov	r3, r0
 8000518:	2bff      	cmp	r3, #255	@ 0xff
 800051a:	d001      	beq.n	8000520 <SD_SendCmd+0x1a>
 800051c:	23ff      	movs	r3, #255	@ 0xff
 800051e:	e042      	b.n	80005a6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff feae 	bl	8000284 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	0e1b      	lsrs	r3, r3, #24
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fea8 	bl	8000284 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	0c1b      	lsrs	r3, r3, #16
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fea2 	bl	8000284 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fe9c 	bl	8000284 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fe97 	bl	8000284 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b40      	cmp	r3, #64	@ 0x40
 800055a:	d102      	bne.n	8000562 <SD_SendCmd+0x5c>
 800055c:	2395      	movs	r3, #149	@ 0x95
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e007      	b.n	8000572 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b48      	cmp	r3, #72	@ 0x48
 8000566:	d102      	bne.n	800056e <SD_SendCmd+0x68>
 8000568:	2387      	movs	r3, #135	@ 0x87
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	e001      	b.n	8000572 <SD_SendCmd+0x6c>
	else crc = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe85 	bl	8000284 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b4c      	cmp	r3, #76	@ 0x4c
 800057e:	d101      	bne.n	8000584 <SD_SendCmd+0x7e>
 8000580:	f7ff feb4 	bl	80002ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000584:	230a      	movs	r3, #10
 8000586:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000588:	f7ff feb0 	bl	80002ec <SPI_RxByte>
 800058c:	4603      	mov	r3, r0
 800058e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000590:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000594:	2b00      	cmp	r3, #0
 8000596:	da05      	bge.n	80005a4 <SD_SendCmd+0x9e>
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	3b01      	subs	r3, #1
 800059c:	73bb      	strb	r3, [r7, #14]
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f1      	bne.n	8000588 <SD_SendCmd+0x82>

	return res;
 80005a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x14>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e0d1      	b.n	8000768 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80005c4:	4b6a      	ldr	r3, [pc, #424]	@ (8000770 <SD_disk_initialize+0x1c0>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d003      	beq.n	80005da <SD_disk_initialize+0x2a>
 80005d2:	4b67      	ldr	r3, [pc, #412]	@ (8000770 <SD_disk_initialize+0x1c0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	e0c6      	b.n	8000768 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80005da:	f7ff fecb 	bl	8000374 <SD_PowerOn>

	/* slave select */
	SELECT();
 80005de:	f7ff fe35 	bl	800024c <SELECT>

	/* check disk type */
	type = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80005e6:	2100      	movs	r1, #0
 80005e8:	2040      	movs	r0, #64	@ 0x40
 80005ea:	f7ff ff8c 	bl	8000506 <SD_SendCmd>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	f040 80a1 	bne.w	8000738 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80005f6:	4b5f      	ldr	r3, [pc, #380]	@ (8000774 <SD_disk_initialize+0x1c4>)
 80005f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005fc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80005fe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000602:	2048      	movs	r0, #72	@ 0x48
 8000604:	f7ff ff7f 	bl	8000506 <SD_SendCmd>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d155      	bne.n	80006ba <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800060e:	2300      	movs	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	e00c      	b.n	800062e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000614:	7bfc      	ldrb	r4, [r7, #15]
 8000616:	f7ff fe69 	bl	80002ec <SPI_RxByte>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	f104 0310 	add.w	r3, r4, #16
 8000622:	443b      	add	r3, r7
 8000624:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	3301      	adds	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d9ef      	bls.n	8000614 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000634:	7abb      	ldrb	r3, [r7, #10]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d17e      	bne.n	8000738 <SD_disk_initialize+0x188>
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	2baa      	cmp	r3, #170	@ 0xaa
 800063e:	d17b      	bne.n	8000738 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000640:	2100      	movs	r1, #0
 8000642:	2077      	movs	r0, #119	@ 0x77
 8000644:	f7ff ff5f 	bl	8000506 <SD_SendCmd>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d807      	bhi.n	800065e <SD_disk_initialize+0xae>
 800064e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000652:	2069      	movs	r0, #105	@ 0x69
 8000654:	f7ff ff57 	bl	8000506 <SD_SendCmd>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d004      	beq.n	8000668 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800065e:	4b45      	ldr	r3, [pc, #276]	@ (8000774 <SD_disk_initialize+0x1c4>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ec      	bne.n	8000640 <SD_disk_initialize+0x90>
 8000666:	e000      	b.n	800066a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000668:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800066a:	4b42      	ldr	r3, [pc, #264]	@ (8000774 <SD_disk_initialize+0x1c4>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d062      	beq.n	8000738 <SD_disk_initialize+0x188>
 8000672:	2100      	movs	r1, #0
 8000674:	207a      	movs	r0, #122	@ 0x7a
 8000676:	f7ff ff46 	bl	8000506 <SD_SendCmd>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d15b      	bne.n	8000738 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e00c      	b.n	80006a0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000686:	7bfc      	ldrb	r4, [r7, #15]
 8000688:	f7ff fe30 	bl	80002ec <SPI_RxByte>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	f104 0310 	add.w	r3, r4, #16
 8000694:	443b      	add	r3, r7
 8000696:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	3301      	adds	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d9ef      	bls.n	8000686 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006a6:	7a3b      	ldrb	r3, [r7, #8]
 80006a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SD_disk_initialize+0x104>
 80006b0:	230c      	movs	r3, #12
 80006b2:	e000      	b.n	80006b6 <SD_disk_initialize+0x106>
 80006b4:	2304      	movs	r3, #4
 80006b6:	73bb      	strb	r3, [r7, #14]
 80006b8:	e03e      	b.n	8000738 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80006ba:	2100      	movs	r1, #0
 80006bc:	2077      	movs	r0, #119	@ 0x77
 80006be:	f7ff ff22 	bl	8000506 <SD_SendCmd>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d808      	bhi.n	80006da <SD_disk_initialize+0x12a>
 80006c8:	2100      	movs	r1, #0
 80006ca:	2069      	movs	r0, #105	@ 0x69
 80006cc:	f7ff ff1b 	bl	8000506 <SD_SendCmd>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d801      	bhi.n	80006da <SD_disk_initialize+0x12a>
 80006d6:	2302      	movs	r3, #2
 80006d8:	e000      	b.n	80006dc <SD_disk_initialize+0x12c>
 80006da:	2301      	movs	r3, #1
 80006dc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d10e      	bne.n	8000702 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80006e4:	2100      	movs	r1, #0
 80006e6:	2077      	movs	r0, #119	@ 0x77
 80006e8:	f7ff ff0d 	bl	8000506 <SD_SendCmd>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d80e      	bhi.n	8000710 <SD_disk_initialize+0x160>
 80006f2:	2100      	movs	r1, #0
 80006f4:	2069      	movs	r0, #105	@ 0x69
 80006f6:	f7ff ff06 	bl	8000506 <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d107      	bne.n	8000710 <SD_disk_initialize+0x160>
 8000700:	e00c      	b.n	800071c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000702:	2100      	movs	r1, #0
 8000704:	2041      	movs	r0, #65	@ 0x41
 8000706:	f7ff fefe 	bl	8000506 <SD_SendCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SD_disk_initialize+0x1c4>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1e2      	bne.n	80006de <SD_disk_initialize+0x12e>
 8000718:	e000      	b.n	800071c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800071a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SD_disk_initialize+0x1c4>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <SD_disk_initialize+0x184>
 8000724:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000728:	2050      	movs	r0, #80	@ 0x50
 800072a:	f7ff feec 	bl	8000506 <SD_SendCmd>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SD_disk_initialize+0x188>
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000738:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <SD_disk_initialize+0x1c8>)
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800073e:	f7ff fd93 	bl	8000268 <DESELECT>
	SPI_RxByte();
 8000742:	f7ff fdd3 	bl	80002ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <SD_disk_initialize+0x1c0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f023 0301 	bic.w	r3, r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <SD_disk_initialize+0x1c0>)
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e001      	b.n	8000762 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800075e:	f7ff fe4b 	bl	80003f8 <SD_PowerOff>
	}

	return Stat;
 8000762:	4b03      	ldr	r3, [pc, #12]	@ (8000770 <SD_disk_initialize+0x1c0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	2000009c 	.word	0x2000009c
 8000778:	200000a0 	.word	0x200000a0

0800077c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SD_disk_status+0x14>
 800078c:	2301      	movs	r3, #1
 800078e:	e002      	b.n	8000796 <SD_disk_status+0x1a>
	return Stat;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <SD_disk_status+0x24>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000000 	.word	0x20000000

080007a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d102      	bne.n	80007c0 <SD_disk_read+0x1c>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d101      	bne.n	80007c4 <SD_disk_read+0x20>
 80007c0:	2304      	movs	r3, #4
 80007c2:	e051      	b.n	8000868 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000870 <SD_disk_read+0xcc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SD_disk_read+0x32>
 80007d2:	2303      	movs	r3, #3
 80007d4:	e048      	b.n	8000868 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <SD_disk_read+0xd0>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d102      	bne.n	80007e8 <SD_disk_read+0x44>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	025b      	lsls	r3, r3, #9
 80007e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80007e8:	f7ff fd30 	bl	800024c <SELECT>

	if (count == 1)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d111      	bne.n	8000816 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	2051      	movs	r0, #81	@ 0x51
 80007f6:	f7ff fe86 	bl	8000506 <SD_SendCmd>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d129      	bne.n	8000854 <SD_disk_read+0xb0>
 8000800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f7ff fe0d 	bl	8000424 <SD_RxDataBlock>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d021      	beq.n	8000854 <SD_disk_read+0xb0>
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	e01e      	b.n	8000854 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2052      	movs	r0, #82	@ 0x52
 800081a:	f7ff fe74 	bl	8000506 <SD_SendCmd>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d117      	bne.n	8000854 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000824:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fdfb 	bl	8000424 <SD_RxDataBlock>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <SD_disk_read+0xa6>
				buff += 512;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800083a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3b01      	subs	r3, #1
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1ed      	bne.n	8000824 <SD_disk_read+0x80>
 8000848:	e000      	b.n	800084c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800084a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800084c:	2100      	movs	r1, #0
 800084e:	204c      	movs	r0, #76	@ 0x4c
 8000850:	f7ff fe59 	bl	8000506 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000854:	f7ff fd08 	bl	8000268 <DESELECT>
	SPI_RxByte();
 8000858:	f7ff fd48 	bl	80002ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf14      	ite	ne
 8000862:	2301      	movne	r3, #1
 8000864:	2300      	moveq	r3, #0
 8000866:	b2db      	uxtb	r3, r3
}
 8000868:	4618      	mov	r0, r3
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	200000a0 	.word	0x200000a0

08000878 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <SD_disk_write+0x1c>
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <SD_disk_write+0x20>
 8000894:	2304      	movs	r3, #4
 8000896:	e06b      	b.n	8000970 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000898:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <SD_disk_write+0x100>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SD_disk_write+0x32>
 80008a6:	2303      	movs	r3, #3
 80008a8:	e062      	b.n	8000970 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80008aa:	4b33      	ldr	r3, [pc, #204]	@ (8000978 <SD_disk_write+0x100>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SD_disk_write+0x44>
 80008b8:	2302      	movs	r3, #2
 80008ba:	e059      	b.n	8000970 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <SD_disk_write+0x104>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <SD_disk_write+0x56>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	025b      	lsls	r3, r3, #9
 80008cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80008ce:	f7ff fcbd 	bl	800024c <SELECT>

	if (count == 1)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d110      	bne.n	80008fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	2058      	movs	r0, #88	@ 0x58
 80008dc:	f7ff fe13 	bl	8000506 <SD_SendCmd>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d13a      	bne.n	800095c <SD_disk_write+0xe4>
 80008e6:	21fe      	movs	r1, #254	@ 0xfe
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f7ff fdc9 	bl	8000480 <SD_TxDataBlock>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d033      	beq.n	800095c <SD_disk_write+0xe4>
			count = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	e030      	b.n	800095c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <SD_disk_write+0x104>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d007      	beq.n	8000916 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000906:	2100      	movs	r1, #0
 8000908:	2077      	movs	r0, #119	@ 0x77
 800090a:	f7ff fdfc 	bl	8000506 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800090e:	6839      	ldr	r1, [r7, #0]
 8000910:	2057      	movs	r0, #87	@ 0x57
 8000912:	f7ff fdf8 	bl	8000506 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2059      	movs	r0, #89	@ 0x59
 800091a:	f7ff fdf4 	bl	8000506 <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d11b      	bne.n	800095c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000924:	21fc      	movs	r1, #252	@ 0xfc
 8000926:	68b8      	ldr	r0, [r7, #8]
 8000928:	f7ff fdaa 	bl	8000480 <SD_TxDataBlock>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00a      	beq.n	8000948 <SD_disk_write+0xd0>
				buff += 512;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000938:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3b01      	subs	r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1ee      	bne.n	8000924 <SD_disk_write+0xac>
 8000946:	e000      	b.n	800094a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000948:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800094a:	21fd      	movs	r1, #253	@ 0xfd
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fd97 	bl	8000480 <SD_TxDataBlock>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <SD_disk_write+0xe4>
			{
				count = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800095c:	f7ff fc84 	bl	8000268 <DESELECT>
	SPI_RxByte();
 8000960:	f7ff fcc4 	bl	80002ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	bf14      	ite	ne
 800096a:	2301      	movne	r3, #1
 800096c:	2300      	moveq	r3, #0
 800096e:	b2db      	uxtb	r3, r3
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	200000a0 	.word	0x200000a0

08000980 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08b      	sub	sp, #44	@ 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	603a      	str	r2, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	460b      	mov	r3, r1
 800098e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SD_disk_ioctl+0x1e>
 800099a:	2304      	movs	r3, #4
 800099c:	e113      	b.n	8000bc6 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b05      	cmp	r3, #5
 80009a8:	d124      	bne.n	80009f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d012      	beq.n	80009d8 <SD_disk_ioctl+0x58>
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	dc1a      	bgt.n	80009ec <SD_disk_ioctl+0x6c>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <SD_disk_ioctl+0x40>
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d006      	beq.n	80009cc <SD_disk_ioctl+0x4c>
 80009be:	e015      	b.n	80009ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80009c0:	f7ff fd1a 	bl	80003f8 <SD_PowerOff>
			res = RES_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80009ca:	e0fa      	b.n	8000bc2 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80009cc:	f7ff fcd2 	bl	8000374 <SD_PowerOn>
			res = RES_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80009d6:	e0f4      	b.n	8000bc2 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	1c5c      	adds	r4, r3, #1
 80009dc:	f7ff fd18 	bl	8000410 <SD_CheckPower>
 80009e0:	4603      	mov	r3, r0
 80009e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80009ea:	e0ea      	b.n	8000bc2 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80009ec:	2304      	movs	r3, #4
 80009ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80009f2:	e0e6      	b.n	8000bc2 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009f4:	4b76      	ldr	r3, [pc, #472]	@ (8000bd0 <SD_disk_ioctl+0x250>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SD_disk_ioctl+0x86>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e0df      	b.n	8000bc6 <SD_disk_ioctl+0x246>

		SELECT();
 8000a06:	f7ff fc21 	bl	800024c <SELECT>

		switch (ctrl)
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	2b0d      	cmp	r3, #13
 8000a0e:	f200 80c9 	bhi.w	8000ba4 <SD_disk_ioctl+0x224>
 8000a12:	a201      	add	r2, pc, #4	@ (adr r2, 8000a18 <SD_disk_ioctl+0x98>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000b0f 	.word	0x08000b0f
 8000a1c:	08000a51 	.word	0x08000a51
 8000a20:	08000aff 	.word	0x08000aff
 8000a24:	08000ba5 	.word	0x08000ba5
 8000a28:	08000ba5 	.word	0x08000ba5
 8000a2c:	08000ba5 	.word	0x08000ba5
 8000a30:	08000ba5 	.word	0x08000ba5
 8000a34:	08000ba5 	.word	0x08000ba5
 8000a38:	08000ba5 	.word	0x08000ba5
 8000a3c:	08000ba5 	.word	0x08000ba5
 8000a40:	08000ba5 	.word	0x08000ba5
 8000a44:	08000b21 	.word	0x08000b21
 8000a48:	08000b45 	.word	0x08000b45
 8000a4c:	08000b69 	.word	0x08000b69
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000a50:	2100      	movs	r1, #0
 8000a52:	2049      	movs	r0, #73	@ 0x49
 8000a54:	f7ff fd57 	bl	8000506 <SD_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 80a6 	bne.w	8000bac <SD_disk_ioctl+0x22c>
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2110      	movs	r1, #16
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcdc 	bl	8000424 <SD_RxDataBlock>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 809c 	beq.w	8000bac <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000a74:	7b3b      	ldrb	r3, [r7, #12]
 8000a76:	099b      	lsrs	r3, r3, #6
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10d      	bne.n	8000a9a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000a7e:	7d7b      	ldrb	r3, [r7, #21]
 8000a80:	461a      	mov	r2, r3
 8000a82:	7d3b      	ldrb	r3, [r7, #20]
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4413      	add	r3, r2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000a90:	8bfb      	ldrh	r3, [r7, #30]
 8000a92:	029a      	lsls	r2, r3, #10
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e02d      	b.n	8000af6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000a9a:	7c7b      	ldrb	r3, [r7, #17]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	7dbb      	ldrb	r3, [r7, #22]
 8000aa4:	09db      	lsrs	r3, r3, #7
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	7d7b      	ldrb	r3, [r7, #21]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0306 	and.w	r3, r3, #6
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	3302      	adds	r3, #2
 8000abe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ac2:	7d3b      	ldrb	r3, [r7, #20]
 8000ac4:	099b      	lsrs	r3, r3, #6
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	7cfb      	ldrb	r3, [r7, #19]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	7cbb      	ldrb	r3, [r7, #18]
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ae8:	8bfa      	ldrh	r2, [r7, #30]
 8000aea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000aee:	3b09      	subs	r3, #9
 8000af0:	409a      	lsls	r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000afc:	e056      	b.n	8000bac <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b04:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000b0c:	e055      	b.n	8000bba <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000b0e:	f7ff fc17 	bl	8000340 <SD_ReadyWait>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2bff      	cmp	r3, #255	@ 0xff
 8000b16:	d14b      	bne.n	8000bb0 <SD_disk_ioctl+0x230>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000b1e:	e047      	b.n	8000bb0 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b20:	2100      	movs	r1, #0
 8000b22:	2049      	movs	r0, #73	@ 0x49
 8000b24:	f7ff fcef 	bl	8000506 <SD_SendCmd>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d142      	bne.n	8000bb4 <SD_disk_ioctl+0x234>
 8000b2e:	2110      	movs	r1, #16
 8000b30:	6a38      	ldr	r0, [r7, #32]
 8000b32:	f7ff fc77 	bl	8000424 <SD_RxDataBlock>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d03b      	beq.n	8000bb4 <SD_disk_ioctl+0x234>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000b42:	e037      	b.n	8000bb4 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b44:	2100      	movs	r1, #0
 8000b46:	204a      	movs	r0, #74	@ 0x4a
 8000b48:	f7ff fcdd 	bl	8000506 <SD_SendCmd>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d132      	bne.n	8000bb8 <SD_disk_ioctl+0x238>
 8000b52:	2110      	movs	r1, #16
 8000b54:	6a38      	ldr	r0, [r7, #32]
 8000b56:	f7ff fc65 	bl	8000424 <SD_RxDataBlock>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d02b      	beq.n	8000bb8 <SD_disk_ioctl+0x238>
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000b66:	e027      	b.n	8000bb8 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	207a      	movs	r0, #122	@ 0x7a
 8000b6c:	f7ff fccb 	bl	8000506 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d116      	bne.n	8000ba4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000b7c:	e00b      	b.n	8000b96 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000b7e:	6a3c      	ldr	r4, [r7, #32]
 8000b80:	1c63      	adds	r3, r4, #1
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	f7ff fbb2 	bl	80002ec <SPI_RxByte>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b90:	3301      	adds	r3, #1
 8000b92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000b96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d9ef      	bls.n	8000b7e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000baa:	e006      	b.n	8000bba <SD_disk_ioctl+0x23a>
			break;
 8000bac:	bf00      	nop
 8000bae:	e004      	b.n	8000bba <SD_disk_ioctl+0x23a>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e002      	b.n	8000bba <SD_disk_ioctl+0x23a>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e000      	b.n	8000bba <SD_disk_ioctl+0x23a>
			break;
 8000bb8:	bf00      	nop
		}

		DESELECT();
 8000bba:	f7ff fb55 	bl	8000268 <DESELECT>
		SPI_RxByte();
 8000bbe:	f7ff fb95 	bl	80002ec <SPI_RxByte>
	}

	return res;
 8000bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	372c      	adds	r7, #44	@ 0x2c
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <RTC_GetTimeStr>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void RTC_GetTimeStr(char *buffer) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;

  // Obtiene la fecha y hora actual del RTC
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <RTC_GetTimeStr+0x44>)
 8000be6:	f002 fea5 	bl	8003934 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <RTC_GetTimeStr+0x44>)
 8000bf4:	f002 fd10 	bl	8003618 <HAL_RTC_GetTime>

  // Formatea la hora como una cadena de caracteres y la guarda en el buffer
  sprintf(buffer, "%02d:%02d:%02d ", sTime.Hours, sTime.Minutes,
 8000bf8:	7a3b      	ldrb	r3, [r7, #8]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	7a7b      	ldrb	r3, [r7, #9]
 8000bfe:	4619      	mov	r1, r3
          sTime.Seconds);
 8000c00:	7abb      	ldrb	r3, [r7, #10]
  sprintf(buffer, "%02d:%02d:%02d ", sTime.Hours, sTime.Minutes,
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	460b      	mov	r3, r1
 8000c06:	4905      	ldr	r1, [pc, #20]	@ (8000c1c <RTC_GetTimeStr+0x48>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f008 f92b 	bl	8008e64 <siprintf>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000d4 	.word	0x200000d4
 8000c1c:	080097fc 	.word	0x080097fc

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0b5      	sub	sp, #212	@ 0xd4
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t botones = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
  state_t estado = espera;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
  event_t evento = null;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 feb4 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f8ca 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 fa06 	bl	8001050 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c44:	f000 f9a4 	bl	8000f90 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000c48:	f003 ff58 	bl	8004afc <MX_FATFS_Init>
  MX_RTC_Init();
 8000c4c:	f000 f956 	bl	8000efc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000c50:	f000 f9d4 	bl	8000ffc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c54:	f000 f914 	bl	8000e80 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4853      	ldr	r0, [pc, #332]	@ (8000da8 <main+0x188>)
 8000c5c:	f001 fe17 	bl	800288e <HAL_GPIO_TogglePin>
  f_mount(&filesystem, "", 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	4952      	ldr	r1, [pc, #328]	@ (8000dac <main+0x18c>)
 8000c64:	4852      	ldr	r0, [pc, #328]	@ (8000db0 <main+0x190>)
 8000c66:	f006 fc1d 	bl	80074a4 <f_mount>
  if ( FR_NO_FILE == f_open(&file, "tabla.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ)){
 8000c6a:	2213      	movs	r2, #19
 8000c6c:	4951      	ldr	r1, [pc, #324]	@ (8000db4 <main+0x194>)
 8000c6e:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <main+0x198>)
 8000c70:	f006 fc62 	bl	8007538 <f_open>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d10c      	bne.n	8000c94 <main+0x74>
	  f_lseek(&file, file.fsize);
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8000db8 <main+0x198>)
 8000c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4619      	mov	r1, r3
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <main+0x198>)
 8000c86:	f007 fc85 	bl	8008594 <f_lseek>
	  f_puts("|Hora|Temperatura|\n\r|-----|-----|\n\r", &file);
 8000c8a:	494b      	ldr	r1, [pc, #300]	@ (8000db8 <main+0x198>)
 8000c8c:	484b      	ldr	r0, [pc, #300]	@ (8000dbc <main+0x19c>)
 8000c8e:	f007 ffed 	bl	8008c6c <f_puts>
 8000c92:	e027      	b.n	8000ce4 <main+0xc4>
  } else {
	  f_lseek(&file,0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4848      	ldr	r0, [pc, #288]	@ (8000db8 <main+0x198>)
 8000c98:	f007 fc7c 	bl	8008594 <f_lseek>
	  while (f_gets(currentLine, sizeof(currentLine), &file) != 0){
 8000c9c:	e006      	b.n	8000cac <main+0x8c>
		  strcpy(last,currentLine);
 8000c9e:	1d3a      	adds	r2, r7, #4
 8000ca0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f008 f930 	bl	8008f0c <strcpy>
	  while (f_gets(currentLine, sizeof(currentLine), &file) != 0){
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4a42      	ldr	r2, [pc, #264]	@ (8000db8 <main+0x198>)
 8000cb0:	2164      	movs	r1, #100	@ 0x64
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 ff5f 	bl	8008b76 <f_gets>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1ef      	bne.n	8000c9e <main+0x7e>
	  }
	  HAL_UART_Transmit(&huart1, (uint8_t *) last, strlen(last), 100);
 8000cbe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fa42 	bl	800014c <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000cd0:	2364      	movs	r3, #100	@ 0x64
 8000cd2:	483b      	ldr	r0, [pc, #236]	@ (8000dc0 <main+0x1a0>)
 8000cd4:	f003 fd92 	bl	80047fc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r", strlen("\r"), 100);
 8000cd8:	2364      	movs	r3, #100	@ 0x64
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4939      	ldr	r1, [pc, #228]	@ (8000dc4 <main+0x1a4>)
 8000cde:	4838      	ldr	r0, [pc, #224]	@ (8000dc0 <main+0x1a0>)
 8000ce0:	f003 fd8c 	bl	80047fc <HAL_UART_Transmit>
  }
  f_close(&file);
 8000ce4:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <main+0x198>)
 8000ce6:	f007 fc2a 	bl	800853e <f_close>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000cea:	2102      	movs	r1, #2
 8000cec:	482e      	ldr	r0, [pc, #184]	@ (8000da8 <main+0x188>)
 8000cee:	f001 fdce 	bl	800288e <HAL_GPIO_TogglePin>



  GetTemperatura_init(&hadc1, &huart1);
 8000cf2:	4933      	ldr	r1, [pc, #204]	@ (8000dc0 <main+0x1a0>)
 8000cf4:	4834      	ldr	r0, [pc, #208]	@ (8000dc8 <main+0x1a8>)
 8000cf6:	f7ff fa95 	bl	8000224 <GetTemperatura_init>
  startTick= HAL_GetTick();
 8000cfa:	f000 feab 	bl	8001a54 <HAL_GetTick>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a32      	ldr	r2, [pc, #200]	@ (8000dcc <main+0x1ac>)
 8000d02:	6013      	str	r3, [r2, #0]
  offset = MINUTE_TICK_OFFSET;
 8000d04:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <main+0x1b0>)
 8000d06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d0a:	601a      	str	r2, [r3, #0]

  while (1) {
	  botones = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) + HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)*2;
 8000d0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d10:	4825      	ldr	r0, [pc, #148]	@ (8000da8 <main+0x188>)
 8000d12:	f001 fd8d 	bl	8002830 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461c      	mov	r4, r3
 8000d1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d1e:	4822      	ldr	r0, [pc, #136]	@ (8000da8 <main+0x188>)
 8000d20:	f001 fd86 	bl	8002830 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4423      	add	r3, r4
 8000d2c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce

	  switch(botones){
 8000d30:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d81b      	bhi.n	8000d70 <main+0x150>
 8000d38:	a201      	add	r2, pc, #4	@ (adr r2, 8000d40 <main+0x120>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d51 	.word	0x08000d51
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000d61 	.word	0x08000d61
 8000d4c:	08000d69 	.word	0x08000d69
	  case 0:
		  evento = null;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		  break;
 8000d56:	e00b      	b.n	8000d70 <main+0x150>
	  case 1:
		  evento = aPush;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		  break;
 8000d5e:	e007      	b.n	8000d70 <main+0x150>
	  case 2:
		  evento = bPush;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		  break;
 8000d66:	e003      	b.n	8000d70 <main+0x150>
	  case 3:
		  evento = abPush;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		  break;
 8000d6e:	bf00      	nop
	  }

	  if(startTick + offset < HAL_GetTick()){
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <main+0x1ac>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <main+0x1b0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	18d4      	adds	r4, r2, r3
 8000d7a:	f000 fe6b 	bl	8001a54 <HAL_GetTick>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d207      	bcs.n	8000d94 <main+0x174>
		  startTick = HAL_GetTick();
 8000d84:	f000 fe66 	bl	8001a54 <HAL_GetTick>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <main+0x1ac>)
 8000d8c:	6013      	str	r3, [r2, #0]
		  evento = timeout;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	  }

	  fsm(&estado, evento);
 8000d94:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
 8000d98:	f107 03cd 	add.w	r3, r7, #205	@ 0xcd
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f9c2 	bl	8001128 <fsm>
	  botones = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) + HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)*2;
 8000da4:	e7b2      	b.n	8000d0c <main+0xec>
 8000da6:	bf00      	nop
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	0800980c 	.word	0x0800980c
 8000db0:	20000188 	.word	0x20000188
 8000db4:	08009810 	.word	0x08009810
 8000db8:	200011b8 	.word	0x200011b8
 8000dbc:	0800981c 	.word	0x0800981c
 8000dc0:	20000140 	.word	0x20000140
 8000dc4:	08009840 	.word	0x08009840
 8000dc8:	200000a4 	.word	0x200000a4
 8000dcc:	200021e4 	.word	0x200021e4
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	@ 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dde:	2228      	movs	r2, #40	@ 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f008 f85e 	bl	8008ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e04:	230a      	movs	r3, #10
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fd5b 	bl	80028d8 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e28:	f000 fbe8 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 ffc8 	bl	8002ddc <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e52:	f000 fbd3 	bl	80015fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000e56:	2303      	movs	r3, #3
 8000e58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 f946 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e72:	f000 fbc3 	bl	80015fc <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	@ 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000e92:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000eaa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000eae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000ebe:	f000 fdf7 	bl	8001ab0 <HAL_ADC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ec8:	f000 fb98 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_ADC1_Init+0x74>)
 8000ede:	f001 f8ab 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ee8:	f000 fb88 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200000a4 	.word	0x200000a4
 8000ef8:	40012400 	.word	0x40012400

08000efc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2100      	movs	r1, #0
 8000f06:	460a      	mov	r2, r1
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_RTC_Init+0x8c>)
 8000f14:	4a1d      	ldr	r2, [pc, #116]	@ (8000f8c <MX_RTC_Init+0x90>)
 8000f16:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_RTC_Init+0x8c>)
 8000f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_RTC_Init+0x8c>)
 8000f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f26:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f28:	4817      	ldr	r0, [pc, #92]	@ (8000f88 <MX_RTC_Init+0x8c>)
 8000f2a:	f002 fa51 	bl	80033d0 <HAL_RTC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000f34:	f000 fb62 	bl	80015fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <MX_RTC_Init+0x8c>)
 8000f4c:	f002 facc 	bl	80034e8 <HAL_RTC_SetTime>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000f56:	f000 fb51 	bl	80015fc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_RTC_Init+0x8c>)
 8000f72:	f002 fc29 	bl	80037c8 <HAL_RTC_SetDate>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000f7c:	f000 fb3e 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000d4 	.word	0x200000d4
 8000f8c:	40002800 	.word	0x40002800

08000f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	@ (8000ff8 <MX_SPI1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fc4:	2230      	movs	r2, #48	@ 0x30
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fdc:	220a      	movs	r2, #10
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_SPI1_Init+0x64>)
 8000fe2:	f002 ff9d 	bl	8003f20 <HAL_SPI_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fec:	f000 fb06 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200000e8 	.word	0x200000e8
 8000ff8:	40013000 	.word	0x40013000

08000ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <MX_USART1_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001034:	f003 fb92 	bl	800475c <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 fadd 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000140 	.word	0x20000140
 800104c:	40013800 	.word	0x40013800

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <MX_GPIO_Init+0xcc>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a2c      	ldr	r2, [pc, #176]	@ (800111c <MX_GPIO_Init+0xcc>)
 800106a:	f043 0320 	orr.w	r3, r3, #32
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <MX_GPIO_Init+0xcc>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <MX_GPIO_Init+0xcc>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a26      	ldr	r2, [pc, #152]	@ (800111c <MX_GPIO_Init+0xcc>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b24      	ldr	r3, [pc, #144]	@ (800111c <MX_GPIO_Init+0xcc>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_GPIO_Init+0xcc>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a20      	ldr	r2, [pc, #128]	@ (800111c <MX_GPIO_Init+0xcc>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_GPIO_Init+0xcc>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	481b      	ldr	r0, [pc, #108]	@ (8001120 <MX_GPIO_Init+0xd0>)
 80010b2:	f001 fbd4 	bl	800285e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2102      	movs	r1, #2
 80010ba:	481a      	ldr	r0, [pc, #104]	@ (8001124 <MX_GPIO_Init+0xd4>)
 80010bc:	f001 fbcf 	bl	800285e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 80010c0:	2310      	movs	r3, #16
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <MX_GPIO_Init+0xd0>)
 80010d8:	f001 fa26 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480c      	ldr	r0, [pc, #48]	@ (8001124 <MX_GPIO_Init+0xd4>)
 80010f4:	f001 fa18 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_GPIO_Init+0xd4>)
 800110e:	f001 fa0b 	bl	8002528 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00

08001128 <fsm>:

/* USER CODE BEGIN 4 */
void fsm(state_t *estado,event_t evento){
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b0a9      	sub	sp, #164	@ 0xa4
 800112c:	af04      	add	r7, sp, #16
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	switch(*estado){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b03      	cmp	r3, #3
 800113a:	f200 824d 	bhi.w	80015d8 <fsm+0x4b0>
 800113e:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <fsm+0x1c>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001155 	.word	0x08001155
 8001148:	080012d9 	.word	0x080012d9
 800114c:	0800138d 	.word	0x0800138d
 8001150:	08001457 	.word	0x08001457
	case espera:
		switch(evento){
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	3b01      	subs	r3, #1
 8001158:	2b03      	cmp	r3, #3
 800115a:	f200 80bb 	bhi.w	80012d4 <fsm+0x1ac>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <fsm+0x3c>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001287 	.word	0x08001287
 8001168:	080012a1 	.word	0x080012a1
 800116c:	080012bb 	.word	0x080012bb
 8001170:	08001175 	.word	0x08001175
			int32_t entero;
			uint32_t decimal;
			char buffer[50];

			/* LEE TEMPERATURA Y LA ESCRIBE EN LA TABLA */
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001174:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	48be      	ldr	r0, [pc, #760]	@ (8001478 <fsm+0x350>)
 800117e:	f002 fbd9 	bl	8003934 <HAL_RTC_GetDate>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001182:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	48bb      	ldr	r0, [pc, #748]	@ (8001478 <fsm+0x350>)
 800118c:	f002 fa44 	bl	8003618 <HAL_RTC_GetTime>
			HAL_ADC_Start(&hadc1);
 8001190:	48ba      	ldr	r0, [pc, #744]	@ (800147c <fsm+0x354>)
 8001192:	f000 fd65 	bl	8001c60 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001196:	2164      	movs	r1, #100	@ 0x64
 8001198:	48b8      	ldr	r0, [pc, #736]	@ (800147c <fsm+0x354>)
 800119a:	f000 fe3b 	bl	8001e14 <HAL_ADC_PollForConversion>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <fsm+0x88>
			  adcValue = HAL_ADC_GetValue(&hadc1);
 80011a4:	48b5      	ldr	r0, [pc, #724]	@ (800147c <fsm+0x354>)
 80011a6:	f000 ff3b 	bl	8002020 <HAL_ADC_GetValue>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			}
			HAL_ADC_Stop(&hadc1);
 80011b0:	48b2      	ldr	r0, [pc, #712]	@ (800147c <fsm+0x354>)
 80011b2:	f000 fe03 	bl	8001dbc <HAL_ADC_Stop>
			adcValue = (((adcValue * TEMP_RESOLUTION) / 4095) * 330) - 50 * TEMP_RESOLUTION;
 80011b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011ba:	4ab1      	ldr	r2, [pc, #708]	@ (8001480 <fsm+0x358>)
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4ab0      	ldr	r2, [pc, #704]	@ (8001484 <fsm+0x35c>)
 80011c2:	fb82 1203 	smull	r1, r2, r2, r3
 80011c6:	441a      	add	r2, r3
 80011c8:	12d2      	asrs	r2, r2, #11
 80011ca:	17db      	asrs	r3, r3, #31
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80011d2:	fb03 f202 	mul.w	r2, r3, r2
 80011d6:	4bac      	ldr	r3, [pc, #688]	@ (8001488 <fsm+0x360>)
 80011d8:	4413      	add	r3, r2
 80011da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			entero = adcValue / TEMP_RESOLUTION;
 80011de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011e2:	4aaa      	ldr	r2, [pc, #680]	@ (800148c <fsm+0x364>)
 80011e4:	fb82 1203 	smull	r1, r2, r2, r3
 80011e8:	1352      	asrs	r2, r2, #13
 80011ea:	17db      	asrs	r3, r3, #31
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			decimal = abs(adcValue % (entero * TEMP_RESOLUTION)) / 1000;
 80011f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011f6:	4aa2      	ldr	r2, [pc, #648]	@ (8001480 <fsm+0x358>)
 80011f8:	fb03 f202 	mul.w	r2, r3, r2
 80011fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001200:	fb93 f1f2 	sdiv	r1, r3, r2
 8001204:	fb01 f202 	mul.w	r2, r1, r2
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	bfb8      	it	lt
 800120e:	425b      	neglt	r3, r3
 8001210:	4a9f      	ldr	r2, [pc, #636]	@ (8001490 <fsm+0x368>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	1192      	asrs	r2, r2, #6
 8001218:	17db      	asrs	r3, r3, #31
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			sprintf(buffer, "| %02d:%02d:%02d | %d,%2.2d Â°C |\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds, entero, decimal);
 8001220:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001224:	4619      	mov	r1, r3
 8001226:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800122a:	461c      	mov	r4, r3
 800122c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001230:	461a      	mov	r2, r3
 8001232:	f107 0008 	add.w	r0, r7, #8
 8001236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	4623      	mov	r3, r4
 8001246:	460a      	mov	r2, r1
 8001248:	4992      	ldr	r1, [pc, #584]	@ (8001494 <fsm+0x36c>)
 800124a:	f007 fe0b 	bl	8008e64 <siprintf>

			f_open(&file, "tabla.txt", FA_OPEN_EXISTING | FA_WRITE | FA_READ);
 800124e:	2203      	movs	r2, #3
 8001250:	4991      	ldr	r1, [pc, #580]	@ (8001498 <fsm+0x370>)
 8001252:	4892      	ldr	r0, [pc, #584]	@ (800149c <fsm+0x374>)
 8001254:	f006 f970 	bl	8007538 <f_open>
			f_lseek(&file, file.fsize);
 8001258:	4b90      	ldr	r3, [pc, #576]	@ (800149c <fsm+0x374>)
 800125a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4619      	mov	r1, r3
 8001262:	488e      	ldr	r0, [pc, #568]	@ (800149c <fsm+0x374>)
 8001264:	f007 f996 	bl	8008594 <f_lseek>
			f_puts(buffer, &file);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	498b      	ldr	r1, [pc, #556]	@ (800149c <fsm+0x374>)
 800126e:	4618      	mov	r0, r3
 8001270:	f007 fcfc 	bl	8008c6c <f_puts>
			f_close(&file);
 8001274:	4889      	ldr	r0, [pc, #548]	@ (800149c <fsm+0x374>)
 8001276:	f007 f962 	bl	800853e <f_close>

			startTick = HAL_GetTick();
 800127a:	f000 fbeb 	bl	8001a54 <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	4a87      	ldr	r2, [pc, #540]	@ (80014a0 <fsm+0x378>)
 8001282:	6013      	str	r3, [r2, #0]
			break;
 8001284:	e027      	b.n	80012d6 <fsm+0x1ae>
		case aPush:
			*estado = waitA;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
			offset = WAIT_2SEC_OFFSET;
 800128c:	4b85      	ldr	r3, [pc, #532]	@ (80014a4 <fsm+0x37c>)
 800128e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001292:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001294:	f000 fbde 	bl	8001a54 <HAL_GetTick>
 8001298:	4603      	mov	r3, r0
 800129a:	4a81      	ldr	r2, [pc, #516]	@ (80014a0 <fsm+0x378>)
 800129c:	6013      	str	r3, [r2, #0]
			break;
 800129e:	e01a      	b.n	80012d6 <fsm+0x1ae>
		case bPush:
			*estado = waitB;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	701a      	strb	r2, [r3, #0]
			offset = WAIT_2SEC_OFFSET;
 80012a6:	4b7f      	ldr	r3, [pc, #508]	@ (80014a4 <fsm+0x37c>)
 80012a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012ac:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 80012ae:	f000 fbd1 	bl	8001a54 <HAL_GetTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a7a      	ldr	r2, [pc, #488]	@ (80014a0 <fsm+0x378>)
 80012b6:	6013      	str	r3, [r2, #0]
			break;
 80012b8:	e00d      	b.n	80012d6 <fsm+0x1ae>
		case abPush:
			*estado = waitAB;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	701a      	strb	r2, [r3, #0]
			offset = WAIT_5SEC_OFFSET;
 80012c0:	4b78      	ldr	r3, [pc, #480]	@ (80014a4 <fsm+0x37c>)
 80012c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c6:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 80012c8:	f000 fbc4 	bl	8001a54 <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a74      	ldr	r2, [pc, #464]	@ (80014a0 <fsm+0x378>)
 80012d0:	6013      	str	r3, [r2, #0]
			break;
 80012d2:	e000      	b.n	80012d6 <fsm+0x1ae>
		default:
			break;
 80012d4:	bf00      	nop
		}
		break;
 80012d6:	e17f      	b.n	80015d8 <fsm+0x4b0>

	case waitA:
		switch(evento){
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	3b01      	subs	r3, #1
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d853      	bhi.n	8001388 <fsm+0x260>
 80012e0:	a201      	add	r2, pc, #4	@ (adr r2, 80012e8 <fsm+0x1c0>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	08001351 	.word	0x08001351
 80012ec:	0800135d 	.word	0x0800135d
 80012f0:	0800136f 	.word	0x0800136f
 80012f4:	080012f9 	.word	0x080012f9
		case timeout:
			char buffer[15];
			RTC_GetTimeStr(timeStr);
 80012f8:	486b      	ldr	r0, [pc, #428]	@ (80014a8 <fsm+0x380>)
 80012fa:	f7ff fc6b 	bl	8000bd4 <RTC_GetTimeStr>
			GetTemperatura(buffer);
 80012fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ff2a 	bl	800015c <GetTemperatura>
			HAL_UART_Transmit(&huart1, (uint8_t *)timeStr, strlen(timeStr), 100);
 8001308:	4867      	ldr	r0, [pc, #412]	@ (80014a8 <fsm+0x380>)
 800130a:	f7fe ff1f 	bl	800014c <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	2364      	movs	r3, #100	@ 0x64
 8001314:	4964      	ldr	r1, [pc, #400]	@ (80014a8 <fsm+0x380>)
 8001316:	4865      	ldr	r0, [pc, #404]	@ (80014ac <fsm+0x384>)
 8001318:	f003 fa70 	bl	80047fc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 800131c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ff13 	bl	800014c <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800132e:	2364      	movs	r3, #100	@ 0x64
 8001330:	485e      	ldr	r0, [pc, #376]	@ (80014ac <fsm+0x384>)
 8001332:	f003 fa63 	bl	80047fc <HAL_UART_Transmit>
			*estado = espera;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
			startTick = HAL_GetTick();
 800133c:	f000 fb8a 	bl	8001a54 <HAL_GetTick>
 8001340:	4603      	mov	r3, r0
 8001342:	4a57      	ldr	r2, [pc, #348]	@ (80014a0 <fsm+0x378>)
 8001344:	6013      	str	r3, [r2, #0]
			offset = MINUTE_TICK_OFFSET;
 8001346:	4b57      	ldr	r3, [pc, #348]	@ (80014a4 <fsm+0x37c>)
 8001348:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800134c:	601a      	str	r2, [r3, #0]
			break;
 800134e:	e01c      	b.n	800138a <fsm+0x262>
		case aPush:
			startTick = HAL_GetTick();
 8001350:	f000 fb80 	bl	8001a54 <HAL_GetTick>
 8001354:	4603      	mov	r3, r0
 8001356:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <fsm+0x378>)
 8001358:	6013      	str	r3, [r2, #0]
			break;
 800135a:	e016      	b.n	800138a <fsm+0x262>
		case bPush:
			*estado = waitB;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001362:	f000 fb77 	bl	8001a54 <HAL_GetTick>
 8001366:	4603      	mov	r3, r0
 8001368:	4a4d      	ldr	r2, [pc, #308]	@ (80014a0 <fsm+0x378>)
 800136a:	6013      	str	r3, [r2, #0]
			break;
 800136c:	e00d      	b.n	800138a <fsm+0x262>
		case abPush:
			*estado = waitAB;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	701a      	strb	r2, [r3, #0]
			offset = WAIT_5SEC_OFFSET;
 8001374:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <fsm+0x37c>)
 8001376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800137a:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 800137c:	f000 fb6a 	bl	8001a54 <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	4a47      	ldr	r2, [pc, #284]	@ (80014a0 <fsm+0x378>)
 8001384:	6013      	str	r3, [r2, #0]
			break;
 8001386:	e000      	b.n	800138a <fsm+0x262>
		default:
			break;
 8001388:	bf00      	nop
		}
		break;
 800138a:	e125      	b.n	80015d8 <fsm+0x4b0>

	case waitB:
		switch(evento){
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	3b01      	subs	r3, #1
 8001390:	2b03      	cmp	r3, #3
 8001392:	d85e      	bhi.n	8001452 <fsm+0x32a>
 8001394:	a201      	add	r2, pc, #4	@ (adr r2, 800139c <fsm+0x274>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	0800141b 	.word	0x0800141b
 80013a0:	0800142d 	.word	0x0800142d
 80013a4:	08001439 	.word	0x08001439
 80013a8:	080013ad 	.word	0x080013ad
		case timeout:
			char line[100];
			f_open(&file, "tabla.txt", FA_READ);
 80013ac:	2201      	movs	r2, #1
 80013ae:	493a      	ldr	r1, [pc, #232]	@ (8001498 <fsm+0x370>)
 80013b0:	483a      	ldr	r0, [pc, #232]	@ (800149c <fsm+0x374>)
 80013b2:	f006 f8c1 	bl	8007538 <f_open>
			f_lseek(&file, 0);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4838      	ldr	r0, [pc, #224]	@ (800149c <fsm+0x374>)
 80013ba:	f007 f8eb 	bl	8008594 <f_lseek>
			while (f_gets(line, sizeof(line), &file) != 0) {
 80013be:	e012      	b.n	80013e6 <fsm+0x2be>
			  HAL_UART_Transmit(&huart1, (uint8_t *) line, strlen(line), 100);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe fec1 	bl	800014c <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f107 0108 	add.w	r1, r7, #8
 80013d2:	2364      	movs	r3, #100	@ 0x64
 80013d4:	4835      	ldr	r0, [pc, #212]	@ (80014ac <fsm+0x384>)
 80013d6:	f003 fa11 	bl	80047fc <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "\r", strlen("\r"), 100);
 80013da:	2364      	movs	r3, #100	@ 0x64
 80013dc:	2201      	movs	r2, #1
 80013de:	4934      	ldr	r1, [pc, #208]	@ (80014b0 <fsm+0x388>)
 80013e0:	4832      	ldr	r0, [pc, #200]	@ (80014ac <fsm+0x384>)
 80013e2:	f003 fa0b 	bl	80047fc <HAL_UART_Transmit>
			while (f_gets(line, sizeof(line), &file) != 0) {
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4a2c      	ldr	r2, [pc, #176]	@ (800149c <fsm+0x374>)
 80013ec:	2164      	movs	r1, #100	@ 0x64
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fbc1 	bl	8008b76 <f_gets>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e2      	bne.n	80013c0 <fsm+0x298>
			}
			f_close(&file);
 80013fa:	4828      	ldr	r0, [pc, #160]	@ (800149c <fsm+0x374>)
 80013fc:	f007 f89f 	bl	800853e <f_close>
			*estado = espera;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001406:	f000 fb25 	bl	8001a54 <HAL_GetTick>
 800140a:	4603      	mov	r3, r0
 800140c:	4a24      	ldr	r2, [pc, #144]	@ (80014a0 <fsm+0x378>)
 800140e:	6013      	str	r3, [r2, #0]
			offset = MINUTE_TICK_OFFSET;
 8001410:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <fsm+0x37c>)
 8001412:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001416:	601a      	str	r2, [r3, #0]
			break;
 8001418:	e01c      	b.n	8001454 <fsm+0x32c>
		case aPush:
			*estado = waitA;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001420:	f000 fb18 	bl	8001a54 <HAL_GetTick>
 8001424:	4603      	mov	r3, r0
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <fsm+0x378>)
 8001428:	6013      	str	r3, [r2, #0]
			break;
 800142a:	e013      	b.n	8001454 <fsm+0x32c>
		case bPush:
			startTick = HAL_GetTick();
 800142c:	f000 fb12 	bl	8001a54 <HAL_GetTick>
 8001430:	4603      	mov	r3, r0
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <fsm+0x378>)
 8001434:	6013      	str	r3, [r2, #0]
			break;
 8001436:	e00d      	b.n	8001454 <fsm+0x32c>
		case abPush:
			*estado = waitAB;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	701a      	strb	r2, [r3, #0]
			offset = WAIT_5SEC_OFFSET;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <fsm+0x37c>)
 8001440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001444:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001446:	f000 fb05 	bl	8001a54 <HAL_GetTick>
 800144a:	4603      	mov	r3, r0
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <fsm+0x378>)
 800144e:	6013      	str	r3, [r2, #0]
			break;
 8001450:	e000      	b.n	8001454 <fsm+0x32c>
		default:
			break;
 8001452:	bf00      	nop
		}
		break;
 8001454:	e0c0      	b.n	80015d8 <fsm+0x4b0>

	case waitAB:
		switch(evento){
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	3b01      	subs	r3, #1
 800145a:	2b03      	cmp	r3, #3
 800145c:	f200 809d 	bhi.w	800159a <fsm+0x472>
 8001460:	a201      	add	r2, pc, #4	@ (adr r2, 8001468 <fsm+0x340>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001503 	.word	0x08001503
 800146c:	08001535 	.word	0x08001535
 8001470:	08001567 	.word	0x08001567
 8001474:	080014b5 	.word	0x080014b5
 8001478:	200000d4 	.word	0x200000d4
 800147c:	200000a4 	.word	0x200000a4
 8001480:	000186a0 	.word	0x000186a0
 8001484:	80080081 	.word	0x80080081
 8001488:	ffb3b4c0 	.word	0xffb3b4c0
 800148c:	14f8b589 	.word	0x14f8b589
 8001490:	10624dd3 	.word	0x10624dd3
 8001494:	08009844 	.word	0x08009844
 8001498:	08009810 	.word	0x08009810
 800149c:	200011b8 	.word	0x200011b8
 80014a0:	200021e4 	.word	0x200021e4
 80014a4:	20000004 	.word	0x20000004
 80014a8:	200021e8 	.word	0x200021e8
 80014ac:	20000140 	.word	0x20000140
 80014b0:	08009840 	.word	0x08009840
		case timeout:
			f_open(&file, "tabla.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80014b4:	220b      	movs	r2, #11
 80014b6:	494a      	ldr	r1, [pc, #296]	@ (80015e0 <fsm+0x4b8>)
 80014b8:	484a      	ldr	r0, [pc, #296]	@ (80015e4 <fsm+0x4bc>)
 80014ba:	f006 f83d 	bl	8007538 <f_open>
			f_puts("|Hora|Temperatura|\n\r|-----|-----|\n\r", &file);
 80014be:	4949      	ldr	r1, [pc, #292]	@ (80015e4 <fsm+0x4bc>)
 80014c0:	4849      	ldr	r0, [pc, #292]	@ (80015e8 <fsm+0x4c0>)
 80014c2:	f007 fbd3 	bl	8008c6c <f_puts>
			f_close(&file);
 80014c6:	4847      	ldr	r0, [pc, #284]	@ (80015e4 <fsm+0x4bc>)
 80014c8:	f007 f839 	bl	800853e <f_close>

			*estado = espera;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	4845      	ldr	r0, [pc, #276]	@ (80015ec <fsm+0x4c4>)
 80014d8:	f001 f9c1 	bl	800285e <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80014dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e0:	f000 fac2 	bl	8001a68 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2102      	movs	r1, #2
 80014e8:	4840      	ldr	r0, [pc, #256]	@ (80015ec <fsm+0x4c4>)
 80014ea:	f001 f9b8 	bl	800285e <HAL_GPIO_WritePin>
			startTick = HAL_GetTick();
 80014ee:	f000 fab1 	bl	8001a54 <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a3e      	ldr	r2, [pc, #248]	@ (80015f0 <fsm+0x4c8>)
 80014f6:	6013      	str	r3, [r2, #0]
			offset = MINUTE_TICK_OFFSET;
 80014f8:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <fsm+0x4cc>)
 80014fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014fe:	601a      	str	r2, [r3, #0]
			break;
 8001500:	e069      	b.n	80015d6 <fsm+0x4ae>

		case aPush:
			*estado = waitA;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
			offset = WAIT_2SEC_OFFSET;
 8001508:	4b3a      	ldr	r3, [pc, #232]	@ (80015f4 <fsm+0x4cc>)
 800150a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800150e:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001510:	f000 faa0 	bl	8001a54 <HAL_GetTick>
 8001514:	4603      	mov	r3, r0
 8001516:	4a36      	ldr	r2, [pc, #216]	@ (80015f0 <fsm+0x4c8>)
 8001518:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1){
 800151a:	2102      	movs	r1, #2
 800151c:	4833      	ldr	r0, [pc, #204]	@ (80015ec <fsm+0x4c4>)
 800151e:	f001 f987 	bl	8002830 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d151      	bne.n	80015cc <fsm+0x4a4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	482f      	ldr	r0, [pc, #188]	@ (80015ec <fsm+0x4c4>)
 800152e:	f001 f996 	bl	800285e <HAL_GPIO_WritePin>
			}
			break;
 8001532:	e04b      	b.n	80015cc <fsm+0x4a4>
		case bPush:
			*estado = waitB;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	701a      	strb	r2, [r3, #0]
			offset = WAIT_2SEC_OFFSET;
 800153a:	4b2e      	ldr	r3, [pc, #184]	@ (80015f4 <fsm+0x4cc>)
 800153c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001540:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 8001542:	f000 fa87 	bl	8001a54 <HAL_GetTick>
 8001546:	4603      	mov	r3, r0
 8001548:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <fsm+0x4c8>)
 800154a:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1){
 800154c:	2102      	movs	r1, #2
 800154e:	4827      	ldr	r0, [pc, #156]	@ (80015ec <fsm+0x4c4>)
 8001550:	f001 f96e 	bl	8002830 <HAL_GPIO_ReadPin>
 8001554:	4603      	mov	r3, r0
 8001556:	2b01      	cmp	r3, #1
 8001558:	d13a      	bne.n	80015d0 <fsm+0x4a8>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2102      	movs	r1, #2
 800155e:	4823      	ldr	r0, [pc, #140]	@ (80015ec <fsm+0x4c4>)
 8001560:	f001 f97d 	bl	800285e <HAL_GPIO_WritePin>
			}
			break;
 8001564:	e034      	b.n	80015d0 <fsm+0x4a8>
		case abPush:
			if((HAL_GetTick() - startTick)%125 < 3){
 8001566:	f000 fa75 	bl	8001a54 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <fsm+0x4c8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1ad1      	subs	r1, r2, r3
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <fsm+0x4d0>)
 8001574:	fba3 2301 	umull	r2, r3, r3, r1
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	4613      	mov	r3, r2
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	1aca      	subs	r2, r1, r3
 8001586:	2a02      	cmp	r2, #2
 8001588:	d824      	bhi.n	80015d4 <fsm+0x4ac>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800158a:	2102      	movs	r1, #2
 800158c:	4817      	ldr	r0, [pc, #92]	@ (80015ec <fsm+0x4c4>)
 800158e:	f001 f97e 	bl	800288e <HAL_GPIO_TogglePin>
				HAL_Delay(4);
 8001592:	2004      	movs	r0, #4
 8001594:	f000 fa68 	bl	8001a68 <HAL_Delay>
			}
			break;
 8001598:	e01c      	b.n	80015d4 <fsm+0x4ac>
		default:
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1){
 800159a:	2102      	movs	r1, #2
 800159c:	4813      	ldr	r0, [pc, #76]	@ (80015ec <fsm+0x4c4>)
 800159e:	f001 f947 	bl	8002830 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d104      	bne.n	80015b2 <fsm+0x48a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2102      	movs	r1, #2
 80015ac:	480f      	ldr	r0, [pc, #60]	@ (80015ec <fsm+0x4c4>)
 80015ae:	f001 f956 	bl	800285e <HAL_GPIO_WritePin>
			}
			*estado = espera;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			offset = MINUTE_TICK_OFFSET;
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <fsm+0x4cc>)
 80015ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015be:	601a      	str	r2, [r3, #0]
			startTick = HAL_GetTick();
 80015c0:	f000 fa48 	bl	8001a54 <HAL_GetTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <fsm+0x4c8>)
 80015c8:	6013      	str	r3, [r2, #0]
			break;
 80015ca:	e004      	b.n	80015d6 <fsm+0x4ae>
			break;
 80015cc:	bf00      	nop
 80015ce:	e002      	b.n	80015d6 <fsm+0x4ae>
			break;
 80015d0:	bf00      	nop
 80015d2:	e000      	b.n	80015d6 <fsm+0x4ae>
			break;
 80015d4:	bf00      	nop
		}
		break;
 80015d6:	bf00      	nop
	}
}
 80015d8:	bf00      	nop
 80015da:	3794      	adds	r7, #148	@ 0x94
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	08009810 	.word	0x08009810
 80015e4:	200011b8 	.word	0x200011b8
 80015e8:	0800981c 	.word	0x0800981c
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	200021e4 	.word	0x200021e4
 80015f4:	20000004 	.word	0x20000004
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <HAL_ADC_MspInit+0x6c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d121      	bne.n	80016d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_ADC_MspInit+0x70>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <HAL_ADC_MspInit+0x70>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_ADC_MspInit+0x70>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_ADC_MspInit+0x70>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <HAL_ADC_MspInit+0x70>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_ADC_MspInit+0x70>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016bc:	2301      	movs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	2303      	movs	r3, #3
 80016c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <HAL_ADC_MspInit+0x74>)
 80016cc:	f000 ff2c 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40012400 	.word	0x40012400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800

080016e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <HAL_RTC_MspInit+0x3c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d110      	bne.n	8001718 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80016f6:	f001 f8e3 	bl	80028c0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_RTC_MspInit+0x40>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a09      	ldr	r2, [pc, #36]	@ (8001724 <HAL_RTC_MspInit+0x40>)
 8001700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_RTC_MspInit+0x40>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_RTC_MspInit+0x44>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40002800 	.word	0x40002800
 8001724:	40021000 	.word	0x40021000
 8001728:	4242043c 	.word	0x4242043c

0800172c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1b      	ldr	r2, [pc, #108]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d12f      	bne.n	80017ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 8001752:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a13      	ldr	r2, [pc, #76]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800177c:	23a0      	movs	r3, #160	@ 0xa0
 800177e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	480b      	ldr	r0, [pc, #44]	@ (80017bc <HAL_SPI_MspInit+0x90>)
 8001790:	f000 feca 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4619      	mov	r1, r3
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <HAL_SPI_MspInit+0x90>)
 80017a8:	f000 febe 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40013000 	.word	0x40013000
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010800 	.word	0x40010800

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1c      	ldr	r2, [pc, #112]	@ (800184c <HAL_UART_MspInit+0x8c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d131      	bne.n	8001844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_UART_MspInit+0x90>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <HAL_UART_MspInit+0x90>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <HAL_UART_MspInit+0x90>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_UART_MspInit+0x90>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <HAL_UART_MspInit+0x90>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_UART_MspInit+0x90>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	480b      	ldr	r0, [pc, #44]	@ (8001854 <HAL_UART_MspInit+0x94>)
 8001826:	f000 fe7f 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800182a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <HAL_UART_MspInit+0x94>)
 8001840:	f000 fe72 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40013800 	.word	0x40013800
 8001850:	40021000 	.word	0x40021000
 8001854:	40010800 	.word	0x40010800

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <NMI_Handler+0x4>

08001860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <MemManage_Handler+0x4>

08001870 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <UsageFault_Handler+0x4>

08001880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <SysTick_Handler+0x34>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <SysTick_Handler+0x18>
		Timer1--;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <SysTick_Handler+0x34>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <SysTick_Handler+0x34>)
 80018ba:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <SysTick_Handler+0x38>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <SysTick_Handler+0x2c>
		Timer2--;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <SysTick_Handler+0x38>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <SysTick_Handler+0x38>)
 80018ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f8ae 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000009c 	.word	0x2000009c
 80018dc:	2000009e 	.word	0x2000009e

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f007 fad0 	bl	8008eb4 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20005000 	.word	0x20005000
 8001940:	00000400 	.word	0x00000400
 8001944:	2000221c 	.word	0x2000221c
 8001948:	200025a0 	.word	0x200025a0

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff fff8 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195e:	490c      	ldr	r1, [pc, #48]	@ (8001990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001974:	4c09      	ldr	r4, [pc, #36]	@ (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f007 fa9d 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff f94b 	bl	8000c20 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001994:	08009e84 	.word	0x08009e84
  ldr r2, =_sbss
 8001998:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800199c:	200025a0 	.word	0x200025a0

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fd83 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fe22 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fd8d 	bl	800250e <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 fd63 	bl	80024d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	20002220 	.word	0x20002220

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	@ (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20002220 	.word	0x20002220

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffe0 	bl	8001a54 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000010 	.word	0x20000010

08001ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0be      	b.n	8001c50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fdbc 	bl	800166c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fbf1 	bl	80022dc <ADC_ConversionStop_Disable>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8099 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8095 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	f043 0202 	orr.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7b1b      	ldrb	r3, [r3, #12]
 8001b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_Init+0xa2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_ADC_Init+0xa8>
 8001b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_Init+0xaa>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7d1b      	ldrb	r3, [r3, #20]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d119      	bne.n	8001b9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	035a      	lsls	r2, r3, #13
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e00b      	b.n	8001b9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_ADC_Init+0x1a8>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_Init+0x126>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d104      	bne.n	8001be0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	051b      	lsls	r3, r3, #20
 8001bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_ADC_Init+0x1ac>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c1a:	e018      	b.n	8001c4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	f023 0312 	bic.w	r3, r3, #18
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c3c:	e007      	b.n	8001c4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	ffe1f7fd 	.word	0xffe1f7fd
 8001c5c:	ff1f0efe 	.word	0xff1f0efe

08001c60 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_Start+0x1a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e098      	b.n	8001dac <HAL_ADC_Start+0x14c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fad0 	bl	8002228 <ADC_Enable>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 8087 	bne.w	8001da2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a41      	ldr	r2, [pc, #260]	@ (8001db4 <HAL_ADC_Start+0x154>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_Start+0x5e>
 8001cb2:	4b41      	ldr	r3, [pc, #260]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d026      	beq.n	8001d26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ce0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce8:	e01d      	b.n	8001d26 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Start+0xaa>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <HAL_ADC_Start+0x154>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_ADC_Start+0xc6>
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	f023 0206 	bic.w	r2, r3, #6
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d3e:	e002      	b.n	8001d46 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0202 	mvn.w	r2, #2
 8001d56:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d62:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d66:	d113      	bne.n	8001d90 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d6c:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <HAL_ADC_Start+0x154>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	e00c      	b.n	8001daa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e003      	b.n	8001daa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40012800 	.word	0x40012800
 8001db8:	40012400 	.word	0x40012400

08001dbc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Stop+0x1a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e01a      	b.n	8001e0c <HAL_ADC_Stop+0x50>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa7c 	bl	80022dc <ADC_ConversionStop_Disable>
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e2a:	f7ff fe13 	bl	8001a54 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	f043 0220 	orr.w	r2, r3, #32
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0d3      	b.n	8001ffe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d131      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d12a      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e72:	e021      	b.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x7e>
 8001e82:	f7ff fde7 	bl	8001a54 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d212      	bcs.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0a2      	b.n	8001ffe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0d6      	beq.n	8001e74 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ec6:	e070      	b.n	8001faa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8002008 <HAL_ADC_PollForConversion+0x1f4>)
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f001 f9c9 	bl	8003264 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	4b4b      	ldr	r3, [pc, #300]	@ (800200c <HAL_ADC_PollForConversion+0x1f8>)
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x104>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68d9      	ldr	r1, [r3, #12]
 8001eec:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <HAL_ADC_PollForConversion+0x1fc>)
 8001eee:	400b      	ands	r3, r1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x104>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6919      	ldr	r1, [r3, #16]
 8001efa:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_ADC_PollForConversion+0x200>)
 8001efc:	400b      	ands	r3, r1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x100>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	4b43      	ldr	r3, [pc, #268]	@ (8002018 <HAL_ADC_PollForConversion+0x204>)
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x100>
 8001f10:	2314      	movs	r3, #20
 8001f12:	e020      	b.n	8001f56 <HAL_ADC_PollForConversion+0x142>
 8001f14:	2329      	movs	r3, #41	@ 0x29
 8001f16:	e01e      	b.n	8001f56 <HAL_ADC_PollForConversion+0x142>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <HAL_ADC_PollForConversion+0x200>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x120>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_ADC_PollForConversion+0x204>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_ADC_PollForConversion+0x13c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_ADC_PollForConversion+0x208>)
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x140>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68d9      	ldr	r1, [r3, #12]
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_ADC_PollForConversion+0x208>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x140>
 8001f50:	2354      	movs	r3, #84	@ 0x54
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_PollForConversion+0x142>
 8001f54:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f5c:	e021      	b.n	8001fa2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d01a      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_ADC_PollForConversion+0x168>
 8001f6c:	f7ff fd72 	bl	8001a54 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d20f      	bcs.n	8001f9c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d90b      	bls.n	8001f9c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f043 0204 	orr.w	r2, r3, #4
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e030      	b.n	8001ffe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8d9      	bhi.n	8001f5e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0212 	mvn.w	r2, #18
 8001fb2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fce:	d115      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008
 800200c:	24924924 	.word	0x24924924
 8002010:	00924924 	.word	0x00924924
 8002014:	12492492 	.word	0x12492492
 8002018:	00492492 	.word	0x00492492
 800201c:	00249249 	.word	0x00249249

08002020 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x20>
 8002054:	2302      	movs	r3, #2
 8002056:	e0dc      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1da>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d81c      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b05      	subs	r3, #5
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b05      	subs	r3, #5
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a0:	e03c      	b.n	800211c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d81c      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b23      	subs	r3, #35	@ 0x23
 80020bc:	221f      	movs	r2, #31
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4019      	ands	r1, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b23      	subs	r3, #35	@ 0x23
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e2:	e01b      	b.n	800211c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b41      	subs	r3, #65	@ 0x41
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4019      	ands	r1, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b41      	subs	r3, #65	@ 0x41
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d91c      	bls.n	800215e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	2207      	movs	r2, #7
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6898      	ldr	r0, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	3b1e      	subs	r3, #30
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	e019      	b.n	8002192 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4019      	ands	r1, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6898      	ldr	r0, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d003      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800219e:	2b11      	cmp	r3, #17
 80021a0:	d132      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_ADC_ConfigChannel+0x1e4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d125      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d126      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d11a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_ADC_ConfigChannel+0x1e8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <HAL_ADC_ConfigChannel+0x1ec>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9a      	lsrs	r2, r3, #18
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1b2>
 80021f6:	e007      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40012400 	.word	0x40012400
 8002220:	20000008 	.word	0x20000008
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d040      	beq.n	80022c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <ADC_Enable+0xac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <ADC_Enable+0xb0>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002264:	e002      	b.n	800226c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002272:	f7ff fbef 	bl	8001a54 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002278:	e01f      	b.n	80022ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227a:	f7ff fbeb 	bl	8001a54 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d918      	bls.n	80022ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d011      	beq.n	80022ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e007      	b.n	80022ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d1d8      	bne.n	800227a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d12e      	bne.n	8002354 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002306:	f7ff fba5 	bl	8001a54 <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800230c:	e01b      	b.n	8002346 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800230e:	f7ff fba1 	bl	8001a54 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d914      	bls.n	8002346 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10d      	bne.n	8002346 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e007      	b.n	8002356 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d0dc      	beq.n	800230e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	@ (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	@ (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	@ 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	210f      	movs	r1, #15
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f7ff ff90 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff49 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e8:	f7ff ff5e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 80024ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f7ff ff90 	bl	8002418 <NVIC_EncodePriority>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff5f 	bl	80023c4 <__NVIC_SetPriority>
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffb0 	bl	800247c <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b08b      	sub	sp, #44	@ 0x2c
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253a:	e169      	b.n	8002810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800253c:	2201      	movs	r2, #1
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 8158 	bne.w	800280a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a9a      	ldr	r2, [pc, #616]	@ (80027c8 <HAL_GPIO_Init+0x2a0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d05e      	beq.n	8002622 <HAL_GPIO_Init+0xfa>
 8002564:	4a98      	ldr	r2, [pc, #608]	@ (80027c8 <HAL_GPIO_Init+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d875      	bhi.n	8002656 <HAL_GPIO_Init+0x12e>
 800256a:	4a98      	ldr	r2, [pc, #608]	@ (80027cc <HAL_GPIO_Init+0x2a4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d058      	beq.n	8002622 <HAL_GPIO_Init+0xfa>
 8002570:	4a96      	ldr	r2, [pc, #600]	@ (80027cc <HAL_GPIO_Init+0x2a4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d86f      	bhi.n	8002656 <HAL_GPIO_Init+0x12e>
 8002576:	4a96      	ldr	r2, [pc, #600]	@ (80027d0 <HAL_GPIO_Init+0x2a8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d052      	beq.n	8002622 <HAL_GPIO_Init+0xfa>
 800257c:	4a94      	ldr	r2, [pc, #592]	@ (80027d0 <HAL_GPIO_Init+0x2a8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d869      	bhi.n	8002656 <HAL_GPIO_Init+0x12e>
 8002582:	4a94      	ldr	r2, [pc, #592]	@ (80027d4 <HAL_GPIO_Init+0x2ac>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d04c      	beq.n	8002622 <HAL_GPIO_Init+0xfa>
 8002588:	4a92      	ldr	r2, [pc, #584]	@ (80027d4 <HAL_GPIO_Init+0x2ac>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d863      	bhi.n	8002656 <HAL_GPIO_Init+0x12e>
 800258e:	4a92      	ldr	r2, [pc, #584]	@ (80027d8 <HAL_GPIO_Init+0x2b0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d046      	beq.n	8002622 <HAL_GPIO_Init+0xfa>
 8002594:	4a90      	ldr	r2, [pc, #576]	@ (80027d8 <HAL_GPIO_Init+0x2b0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d85d      	bhi.n	8002656 <HAL_GPIO_Init+0x12e>
 800259a:	2b12      	cmp	r3, #18
 800259c:	d82a      	bhi.n	80025f4 <HAL_GPIO_Init+0xcc>
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d859      	bhi.n	8002656 <HAL_GPIO_Init+0x12e>
 80025a2:	a201      	add	r2, pc, #4	@ (adr r2, 80025a8 <HAL_GPIO_Init+0x80>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	08002623 	.word	0x08002623
 80025ac:	080025fd 	.word	0x080025fd
 80025b0:	0800260f 	.word	0x0800260f
 80025b4:	08002651 	.word	0x08002651
 80025b8:	08002657 	.word	0x08002657
 80025bc:	08002657 	.word	0x08002657
 80025c0:	08002657 	.word	0x08002657
 80025c4:	08002657 	.word	0x08002657
 80025c8:	08002657 	.word	0x08002657
 80025cc:	08002657 	.word	0x08002657
 80025d0:	08002657 	.word	0x08002657
 80025d4:	08002657 	.word	0x08002657
 80025d8:	08002657 	.word	0x08002657
 80025dc:	08002657 	.word	0x08002657
 80025e0:	08002657 	.word	0x08002657
 80025e4:	08002657 	.word	0x08002657
 80025e8:	08002657 	.word	0x08002657
 80025ec:	08002605 	.word	0x08002605
 80025f0:	08002619 	.word	0x08002619
 80025f4:	4a79      	ldr	r2, [pc, #484]	@ (80027dc <HAL_GPIO_Init+0x2b4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fa:	e02c      	b.n	8002656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	623b      	str	r3, [r7, #32]
          break;
 8002602:	e029      	b.n	8002658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	3304      	adds	r3, #4
 800260a:	623b      	str	r3, [r7, #32]
          break;
 800260c:	e024      	b.n	8002658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	3308      	adds	r3, #8
 8002614:	623b      	str	r3, [r7, #32]
          break;
 8002616:	e01f      	b.n	8002658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	330c      	adds	r3, #12
 800261e:	623b      	str	r3, [r7, #32]
          break;
 8002620:	e01a      	b.n	8002658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800262a:	2304      	movs	r3, #4
 800262c:	623b      	str	r3, [r7, #32]
          break;
 800262e:	e013      	b.n	8002658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002638:	2308      	movs	r3, #8
 800263a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	611a      	str	r2, [r3, #16]
          break;
 8002642:	e009      	b.n	8002658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002644:	2308      	movs	r3, #8
 8002646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	615a      	str	r2, [r3, #20]
          break;
 800264e:	e003      	b.n	8002658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x130>
          break;
 8002656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2bff      	cmp	r3, #255	@ 0xff
 800265c:	d801      	bhi.n	8002662 <HAL_GPIO_Init+0x13a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_Init+0x13e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2bff      	cmp	r3, #255	@ 0xff
 800266c:	d802      	bhi.n	8002674 <HAL_GPIO_Init+0x14c>
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x152>
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	3b08      	subs	r3, #8
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	210f      	movs	r1, #15
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	401a      	ands	r2, r3
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	431a      	orrs	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80b1 	beq.w	800280a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026a8:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <HAL_GPIO_Init+0x2b8>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	@ (80027e0 <HAL_GPIO_Init+0x2b8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b4a      	ldr	r3, [pc, #296]	@ (80027e0 <HAL_GPIO_Init+0x2b8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c0:	4a48      	ldr	r2, [pc, #288]	@ (80027e4 <HAL_GPIO_Init+0x2bc>)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a40      	ldr	r2, [pc, #256]	@ (80027e8 <HAL_GPIO_Init+0x2c0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d013      	beq.n	8002714 <HAL_GPIO_Init+0x1ec>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3f      	ldr	r2, [pc, #252]	@ (80027ec <HAL_GPIO_Init+0x2c4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00d      	beq.n	8002710 <HAL_GPIO_Init+0x1e8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3e      	ldr	r2, [pc, #248]	@ (80027f0 <HAL_GPIO_Init+0x2c8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <HAL_GPIO_Init+0x1e4>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3d      	ldr	r2, [pc, #244]	@ (80027f4 <HAL_GPIO_Init+0x2cc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_GPIO_Init+0x1e0>
 8002704:	2303      	movs	r3, #3
 8002706:	e006      	b.n	8002716 <HAL_GPIO_Init+0x1ee>
 8002708:	2304      	movs	r3, #4
 800270a:	e004      	b.n	8002716 <HAL_GPIO_Init+0x1ee>
 800270c:	2302      	movs	r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x1ee>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_GPIO_Init+0x1ee>
 8002714:	2300      	movs	r3, #0
 8002716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002718:	f002 0203 	and.w	r2, r2, #3
 800271c:	0092      	lsls	r2, r2, #2
 800271e:	4093      	lsls	r3, r2
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002726:	492f      	ldr	r1, [pc, #188]	@ (80027e4 <HAL_GPIO_Init+0x2bc>)
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	492c      	ldr	r1, [pc, #176]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4928      	ldr	r1, [pc, #160]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002758:	4013      	ands	r3, r2
 800275a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002768:	4b23      	ldr	r3, [pc, #140]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4922      	ldr	r1, [pc, #136]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	43db      	mvns	r3, r3
 800277e:	491e      	ldr	r1, [pc, #120]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002780:	4013      	ands	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4918      	ldr	r1, [pc, #96]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	4914      	ldr	r1, [pc, #80]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d021      	beq.n	80027fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	490e      	ldr	r1, [pc, #56]	@ (80027f8 <HAL_GPIO_Init+0x2d0>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
 80027c4:	e021      	b.n	800280a <HAL_GPIO_Init+0x2e2>
 80027c6:	bf00      	nop
 80027c8:	10320000 	.word	0x10320000
 80027cc:	10310000 	.word	0x10310000
 80027d0:	10220000 	.word	0x10220000
 80027d4:	10210000 	.word	0x10210000
 80027d8:	10120000 	.word	0x10120000
 80027dc:	10110000 	.word	0x10110000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40010800 	.word	0x40010800
 80027ec:	40010c00 	.word	0x40010c00
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40011400 	.word	0x40011400
 80027f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_GPIO_Init+0x304>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	43db      	mvns	r3, r3
 8002804:	4909      	ldr	r1, [pc, #36]	@ (800282c <HAL_GPIO_Init+0x304>)
 8002806:	4013      	ands	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	3301      	adds	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f47f ae8e 	bne.w	800253c <HAL_GPIO_Init+0x14>
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	372c      	adds	r7, #44	@ 0x2c
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	807b      	strh	r3, [r7, #2]
 800286a:	4613      	mov	r3, r2
 800286c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800286e:	787b      	ldrb	r3, [r7, #1]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002874:	887a      	ldrh	r2, [r7, #2]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800287a:	e003      	b.n	8002884 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	041a      	lsls	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a0:	887a      	ldrh	r2, [r7, #2]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4013      	ands	r3, r2
 80028a6:	041a      	lsls	r2, r3, #16
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	400b      	ands	r3, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	420e0020 	.word	0x420e0020

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e272      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b92      	ldr	r3, [pc, #584]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002904:	4b8f      	ldr	r3, [pc, #572]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d112      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e>
 8002910:	4b8c      	ldr	r3, [pc, #560]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b89      	ldr	r3, [pc, #548]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x12c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e24c      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x76>
 8002940:	4b80      	ldr	r3, [pc, #512]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7f      	ldr	r2, [pc, #508]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b7b      	ldr	r3, [pc, #492]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7a      	ldr	r2, [pc, #488]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b78      	ldr	r3, [pc, #480]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a77      	ldr	r2, [pc, #476]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xbc>
 800297a:	4b72      	ldr	r3, [pc, #456]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a71      	ldr	r2, [pc, #452]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b6f      	ldr	r3, [pc, #444]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002994:	4b6b      	ldr	r3, [pc, #428]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6a      	ldr	r2, [pc, #424]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b68      	ldr	r3, [pc, #416]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a67      	ldr	r2, [pc, #412]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f84e 	bl	8001a54 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff f84a 	bl	8001a54 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e200      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xe4>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff f83a 	bl	8001a54 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff f836 	bl	8001a54 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	@ 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1ec      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x10c>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d063      	beq.n	8002ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a12:	4b4c      	ldr	r3, [pc, #304]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a1e:	4b49      	ldr	r3, [pc, #292]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x18c>
 8002a2a:	4b46      	ldr	r3, [pc, #280]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b43      	ldr	r3, [pc, #268]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x176>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1c0      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4939      	ldr	r1, [pc, #228]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e03a      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe ffef 	bl	8001a54 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7fe ffeb 	bl	8001a54 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1a1      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4927      	ldr	r1, [pc, #156]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b26      	ldr	r3, [pc, #152]	@ (8002b48 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe ffce 	bl	8001a54 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7fe ffca 	bl	8001a54 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e180      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d03a      	beq.n	8002b5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d019      	beq.n	8002b22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7fe ffae 	bl	8001a54 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afc:	f7fe ffaa 	bl	8001a54 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e160      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f000 face 	bl	80030bc <RCC_Delay>
 8002b20:	e01c      	b.n	8002b5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_RCC_OscConfig+0x274>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b28:	f7fe ff94 	bl	8001a54 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fe ff90 	bl	8001a54 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d908      	bls.n	8002b50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e146      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	42420000 	.word	0x42420000
 8002b4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	4b92      	ldr	r3, [pc, #584]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e9      	bne.n	8002b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a6 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b88      	ldr	r3, [pc, #544]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4a87      	ldr	r2, [pc, #540]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	61d3      	str	r3, [r2, #28]
 8002b86:	4b85      	ldr	r3, [pc, #532]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b82      	ldr	r3, [pc, #520]	@ (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fe ff51 	bl	8001a54 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe ff4d 	bl	8001a54 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	@ 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e103      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b75      	ldr	r3, [pc, #468]	@ (8002da0 <HAL_RCC_OscConfig+0x4c8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x312>
 8002bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e02d      	b.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x334>
 8002bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a69      	ldr	r2, [pc, #420]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	4b67      	ldr	r3, [pc, #412]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a66      	ldr	r2, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6213      	str	r3, [r2, #32]
 8002c0a:	e01c      	b.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x356>
 8002c14:	4b61      	ldr	r3, [pc, #388]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a60      	ldr	r2, [pc, #384]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	4b5e      	ldr	r3, [pc, #376]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a5d      	ldr	r2, [pc, #372]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a5a      	ldr	r2, [pc, #360]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	4b58      	ldr	r3, [pc, #352]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a57      	ldr	r2, [pc, #348]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff01 	bl	8001a54 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe fefd 	bl	8001a54 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0b1      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ee      	beq.n	8002c56 <HAL_RCC_OscConfig+0x37e>
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe feeb 	bl	8001a54 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fee7 	bl	8001a54 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e09b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b3c      	ldr	r3, [pc, #240]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a3b      	ldr	r2, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc0:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d061      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d146      	bne.n	8002d62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b33      	ldr	r3, [pc, #204]	@ (8002da4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe febb 	bl	8001a54 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe feb7 	bl	8001a54 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e06d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf4:	4b29      	ldr	r3, [pc, #164]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d08:	d108      	bne.n	8002d1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d0a:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4921      	ldr	r1, [pc, #132]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a19      	ldr	r1, [r3, #32]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	491b      	ldr	r1, [pc, #108]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d34:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fe8b 	bl	8001a54 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fe87 	bl	8001a54 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e03d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x46a>
 8002d60:	e035      	b.n	8002dce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fe74 	bl	8001a54 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fe70 	bl	8001a54 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e026      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x498>
 8002d8e:	e01e      	b.n	8002dce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e019      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
 8002da4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_OscConfig+0x500>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0d0      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d910      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b67      	ldr	r3, [pc, #412]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	4965      	ldr	r1, [pc, #404]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a52      	ldr	r2, [pc, #328]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d040      	beq.n	8002efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d115      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e073      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06b      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eba:	4b39      	ldr	r3, [pc, #228]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4936      	ldr	r1, [pc, #216]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fdc2 	bl	8001a54 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed4:	f7fe fdbe 	bl	8001a54 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e053      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1eb      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d210      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	4922      	ldr	r1, [pc, #136]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490a      	ldr	r1, [pc, #40]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_ClockConfig+0x1d0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fd20 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	080098b0 	.word	0x080098b0
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fca:	4b1e      	ldr	r3, [pc, #120]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x36>
 8002fde:	e027      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe2:	613b      	str	r3, [r7, #16]
      break;
 8002fe4:	e027      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0c9b      	lsrs	r3, r3, #18
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	4a17      	ldr	r2, [pc, #92]	@ (800304c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ff0:	5cd3      	ldrb	r3, [r2, r3]
 8002ff2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ffe:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x94>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0c5b      	lsrs	r3, r3, #17
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <HAL_RCC_GetSysClockFreq+0xa0>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x98>)
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e004      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0c      	ldr	r2, [pc, #48]	@ (8003054 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	613b      	str	r3, [r7, #16]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	693b      	ldr	r3, [r7, #16]
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	007a1200 	.word	0x007a1200
 800304c:	080098c8 	.word	0x080098c8
 8003050:	080098d8 	.word	0x080098d8
 8003054:	003d0900 	.word	0x003d0900

08003058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800305c:	4b02      	ldr	r3, [pc, #8]	@ (8003068 <HAL_RCC_GetHCLKFreq+0x10>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	20000008 	.word	0x20000008

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003070:	f7ff fff2 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	@ (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	080098c0 	.word	0x080098c0

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003098:	f7ff ffde 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0adb      	lsrs	r3, r3, #11
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	@ (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	080098c0 	.word	0x080098c0

080030bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <RCC_Delay+0x34>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <RCC_Delay+0x38>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a5b      	lsrs	r3, r3, #9
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030d8:	bf00      	nop
  }
  while (Delay --);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	60fa      	str	r2, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f9      	bne.n	80030d8 <RCC_Delay+0x1c>
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000008 	.word	0x20000008
 80030f4:	10624dd3 	.word	0x10624dd3

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d07d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003118:	4b4f      	ldr	r3, [pc, #316]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b4c      	ldr	r3, [pc, #304]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	4a4b      	ldr	r2, [pc, #300]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312e:	61d3      	str	r3, [r2, #28]
 8003130:	4b49      	ldr	r3, [pc, #292]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b46      	ldr	r3, [pc, #280]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d118      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314c:	4b43      	ldr	r3, [pc, #268]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a42      	ldr	r2, [pc, #264]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003158:	f7fe fc7c 	bl	8001a54 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	e008      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fe fc78 	bl	8001a54 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	@ 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e06d      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b3a      	ldr	r3, [pc, #232]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800317e:	4b36      	ldr	r3, [pc, #216]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003186:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d027      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031b2:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d014      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fc47 	bl	8001a54 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fc43 	bl	8001a54 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e036      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ee      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4917      	ldr	r1, [pc, #92]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4a13      	ldr	r2, [pc, #76]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4904      	ldr	r1, [pc, #16]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
 8003260:	42420440 	.word	0x42420440

08003264 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b10      	cmp	r3, #16
 800328a:	f200 808a 	bhi.w	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d045      	beq.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d075      	beq.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800329a:	e082      	b.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800329c:	4b46      	ldr	r3, [pc, #280]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032a2:	4b45      	ldr	r3, [pc, #276]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d07b      	beq.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0c9b      	lsrs	r3, r3, #18
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	4a41      	ldr	r2, [pc, #260]	@ (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d015      	beq.n	80032f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c6:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0c5b      	lsrs	r3, r3, #17
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	4a3b      	ldr	r2, [pc, #236]	@ (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032e0:	4a38      	ldr	r2, [pc, #224]	@ (80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e004      	b.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4a34      	ldr	r2, [pc, #208]	@ (80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032fc:	4b2e      	ldr	r3, [pc, #184]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003308:	d102      	bne.n	8003310 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	61bb      	str	r3, [r7, #24]
      break;
 800330e:	e04a      	b.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4a2d      	ldr	r2, [pc, #180]	@ (80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	61bb      	str	r3, [r7, #24]
      break;
 800331e:	e042      	b.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003320:	4b25      	ldr	r3, [pc, #148]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003330:	d108      	bne.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800333c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e01f      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800334e:	d109      	bne.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003350:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800335c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e00f      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800336e:	d11c      	bne.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800337c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003380:	61bb      	str	r3, [r7, #24]
      break;
 8003382:	e012      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003384:	e011      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003386:	f7ff fe85 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0b9b      	lsrs	r3, r3, #14
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	61bb      	str	r3, [r7, #24]
      break;
 80033a0:	e004      	b.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80033aa:	bf00      	nop
    }
  }
  return (frequency);
 80033ac:	69bb      	ldr	r3, [r7, #24]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	080098dc 	.word	0x080098dc
 80033c0:	080098ec 	.word	0x080098ec
 80033c4:	007a1200 	.word	0x007a1200
 80033c8:	003d0900 	.word	0x003d0900
 80033cc:	aaaaaaab 	.word	0xaaaaaaab

080033d0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07a      	b.n	80034dc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7c5b      	ldrb	r3, [r3, #17]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe f974 	bl	80016e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 faea 	bl	80039dc <HAL_RTC_WaitForSynchro>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e061      	b.n	80034dc <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fba3 	bl	8003b64 <RTC_EnterInitMode>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e056      	b.n	80034dc <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0207 	bic.w	r2, r2, #7
 800343c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003446:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <HAL_RTC_Init+0x114>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	4a26      	ldr	r2, [pc, #152]	@ (80034e4 <HAL_RTC_Init+0x114>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003452:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <HAL_RTC_Init+0x114>)
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4921      	ldr	r1, [pc, #132]	@ (80034e4 <HAL_RTC_Init+0x114>)
 8003460:	4313      	orrs	r3, r2
 8003462:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d003      	beq.n	8003476 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e00e      	b.n	8003494 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003476:	2001      	movs	r0, #1
 8003478:	f7ff fef4 	bl	8003264 <HAL_RCCEx_GetPeriphCLKFreq>
 800347c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2204      	movs	r2, #4
 8003488:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e026      	b.n	80034dc <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	0c1a      	lsrs	r2, r3, #16
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f002 020f 	and.w	r2, r2, #15
 80034a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	b292      	uxth	r2, r2
 80034aa:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb81 	bl	8003bb4 <RTC_ExitInitMode>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2204      	movs	r2, #4
 80034bc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00c      	b.n	80034dc <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
  }
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40006c00 	.word	0x40006c00

080034e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_RTC_SetTime+0x20>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e080      	b.n	800360e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	7c1b      	ldrb	r3, [r3, #16]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_RTC_SetTime+0x30>
 8003514:	2302      	movs	r3, #2
 8003516:	e07a      	b.n	800360e <HAL_RTC_SetTime+0x126>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2202      	movs	r2, #2
 8003522:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003534:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	4619      	mov	r1, r3
 800353e:	460b      	mov	r3, r1
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a5b      	subs	r3, r3, r1
 8003544:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003546:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800354c:	4413      	add	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e01e      	b.n	8003590 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fb71 	bl	8003c3e <RTC_Bcd2ToByte>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003564:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fb66 	bl	8003c3e <RTC_Bcd2ToByte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800357e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	789b      	ldrb	r3, [r3, #2]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fb5a 	bl	8003c3e <RTC_Bcd2ToByte>
 800358a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800358c:	4423      	add	r3, r4
 800358e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa7f 	bl	8003a96 <RTC_WriteTimeCounter>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2204      	movs	r2, #4
 80035a2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02f      	b.n	800360e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0205 	bic.w	r2, r2, #5
 80035bc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa90 	bl	8003ae4 <RTC_ReadAlarmCounter>
 80035c4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d018      	beq.n	8003600 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d214      	bcs.n	8003600 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80035dc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80035e0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035e2:	6939      	ldr	r1, [r7, #16]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa96 	bl	8003b16 <RTC_WriteAlarmCounter>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2204      	movs	r2, #4
 80035f4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e006      	b.n	800360e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
	...

08003618 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_RTC_GetTime+0x28>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b5      	b.n	80037b0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0ac      	b.n	80037b0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f9ed 	bl	8003a36 <RTC_ReadTimeCounter>
 800365c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4a55      	ldr	r2, [pc, #340]	@ (80037b8 <HAL_RTC_GetTime+0x1a0>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0adb      	lsrs	r3, r3, #11
 8003668:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4b52      	ldr	r3, [pc, #328]	@ (80037b8 <HAL_RTC_GetTime+0x1a0>)
 800366e:	fba3 1302 	umull	r1, r3, r3, r2
 8003672:	0adb      	lsrs	r3, r3, #11
 8003674:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	4a4f      	ldr	r2, [pc, #316]	@ (80037bc <HAL_RTC_GetTime+0x1a4>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	4a4a      	ldr	r2, [pc, #296]	@ (80037b8 <HAL_RTC_GetTime+0x1a0>)
 8003690:	fba2 1203 	umull	r1, r2, r2, r3
 8003694:	0ad2      	lsrs	r2, r2, #11
 8003696:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800369a:	fb01 f202 	mul.w	r2, r1, r2
 800369e:	1a9a      	subs	r2, r3, r2
 80036a0:	4b46      	ldr	r3, [pc, #280]	@ (80037bc <HAL_RTC_GetTime+0x1a4>)
 80036a2:	fba3 1302 	umull	r1, r3, r3, r2
 80036a6:	0959      	lsrs	r1, r3, #5
 80036a8:	460b      	mov	r3, r1
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a5b      	subs	r3, r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	1ad1      	subs	r1, r2, r3
 80036b2:	b2ca      	uxtb	r2, r1
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b17      	cmp	r3, #23
 80036bc:	d955      	bls.n	800376a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4a3f      	ldr	r2, [pc, #252]	@ (80037c0 <HAL_RTC_GetTime+0x1a8>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80036ca:	6939      	ldr	r1, [r7, #16]
 80036cc:	4b3c      	ldr	r3, [pc, #240]	@ (80037c0 <HAL_RTC_GetTime+0x1a8>)
 80036ce:	fba3 2301 	umull	r2, r3, r3, r1
 80036d2:	091a      	lsrs	r2, r3, #4
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1aca      	subs	r2, r1, r3
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f9fd 	bl	8003ae4 <RTC_ReadAlarmCounter>
 80036ea:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d008      	beq.n	8003706 <HAL_RTC_GetTime+0xee>
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d904      	bls.n	8003706 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e002      	b.n	800370c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4a2d      	ldr	r2, [pc, #180]	@ (80037c4 <HAL_RTC_GetTime+0x1ac>)
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f9ba 	bl	8003a96 <RTC_WriteTimeCounter>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e041      	b.n	80037b0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003732:	d00c      	beq.n	800374e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800373c:	69f9      	ldr	r1, [r7, #28]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9e9 	bl	8003b16 <RTC_WriteAlarmCounter>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e030      	b.n	80037b0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800374e:	69f9      	ldr	r1, [r7, #28]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f9e0 	bl	8003b16 <RTC_WriteAlarmCounter>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e027      	b.n	80037b0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fa88 	bl	8003c78 <RTC_DateUpdate>
 8003768:	e003      	b.n	8003772 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01a      	beq.n	80037ae <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fa41 	bl	8003c04 <RTC_ByteToBcd2>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fa38 	bl	8003c04 <RTC_ByteToBcd2>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	789b      	ldrb	r3, [r3, #2]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fa2f 	bl	8003c04 <RTC_ByteToBcd2>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	91a2b3c5 	.word	0x91a2b3c5
 80037bc:	88888889 	.word	0x88888889
 80037c0:	aaaaaaab 	.word	0xaaaaaaab
 80037c4:	00015180 	.word	0x00015180

080037c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_RTC_SetDate+0x24>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e097      	b.n	8003920 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	7c1b      	ldrb	r3, [r3, #16]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_RTC_SetDate+0x34>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e091      	b.n	8003920 <HAL_RTC_SetDate+0x158>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2202      	movs	r2, #2
 8003806:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	78da      	ldrb	r2, [r3, #3]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	785a      	ldrb	r2, [r3, #1]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	789a      	ldrb	r2, [r3, #2]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	739a      	strb	r2, [r3, #14]
 8003826:	e01a      	b.n	800385e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	78db      	ldrb	r3, [r3, #3]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fa06 	bl	8003c3e <RTC_Bcd2ToByte>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f9fd 	bl	8003c3e <RTC_Bcd2ToByte>
 8003844:	4603      	mov	r3, r0
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f9f4 	bl	8003c3e <RTC_Bcd2ToByte>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	7bdb      	ldrb	r3, [r3, #15]
 8003862:	4618      	mov	r0, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	7b59      	ldrb	r1, [r3, #13]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	7b9b      	ldrb	r3, [r3, #14]
 800386c:	461a      	mov	r2, r3
 800386e:	f000 fadf 	bl	8003e30 <RTC_WeekDayNum>
 8003872:	4603      	mov	r3, r0
 8003874:	461a      	mov	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	7b1a      	ldrb	r2, [r3, #12]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8d7 	bl	8003a36 <RTC_ReadTimeCounter>
 8003888:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4a26      	ldr	r2, [pc, #152]	@ (8003928 <HAL_RTC_SetDate+0x160>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0adb      	lsrs	r3, r3, #11
 8003894:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b18      	cmp	r3, #24
 800389a:	d93a      	bls.n	8003912 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4a23      	ldr	r2, [pc, #140]	@ (800392c <HAL_RTC_SetDate+0x164>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	4a22      	ldr	r2, [pc, #136]	@ (8003930 <HAL_RTC_SetDate+0x168>)
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80038b2:	69f9      	ldr	r1, [r7, #28]
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f8ee 	bl	8003a96 <RTC_WriteTimeCounter>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2204      	movs	r2, #4
 80038c4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e027      	b.n	8003920 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f907 	bl	8003ae4 <RTC_ReadAlarmCounter>
 80038d6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d018      	beq.n	8003912 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d214      	bcs.n	8003912 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80038ee:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80038f2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f90d 	bl	8003b16 <RTC_WriteAlarmCounter>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2204      	movs	r2, #4
 8003906:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e006      	b.n	8003920 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	91a2b3c5 	.word	0x91a2b3c5
 800392c:	aaaaaaab 	.word	0xaaaaaaab
 8003930:	00015180 	.word	0x00015180

08003934 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	2100      	movs	r1, #0
 8003946:	460a      	mov	r2, r1
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	460a      	mov	r2, r1
 800394c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_RTC_GetDate+0x26>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e03a      	b.n	80039d4 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	2200      	movs	r2, #0
 8003964:	4619      	mov	r1, r3
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fe56 	bl	8003618 <HAL_RTC_GetTime>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e02e      	b.n	80039d4 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	7b1a      	ldrb	r2, [r3, #12]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	7bda      	ldrb	r2, [r3, #15]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	7b5a      	ldrb	r2, [r3, #13]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	7b9a      	ldrb	r2, [r3, #14]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01a      	beq.n	80039d2 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	78db      	ldrb	r3, [r3, #3]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f92f 	bl	8003c04 <RTC_ByteToBcd2>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f926 	bl	8003c04 <RTC_ByteToBcd2>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	789b      	ldrb	r3, [r3, #2]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f91d 	bl	8003c04 <RTC_ByteToBcd2>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01d      	b.n	8003a2e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0208 	bic.w	r2, r2, #8
 8003a00:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a02:	f7fe f827 	bl	8001a54 <HAL_GetTick>
 8003a06:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a08:	e009      	b.n	8003a1e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a0a:	f7fe f823 	bl	8001a54 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a18:	d901      	bls.n	8003a1e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e007      	b.n	8003a2e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ee      	beq.n	8003a0a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b087      	sub	sp, #28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	827b      	strh	r3, [r7, #18]
 8003a42:	2300      	movs	r3, #0
 8003a44:	823b      	strh	r3, [r7, #16]
 8003a46:	2300      	movs	r3, #0
 8003a48:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003a66:	8a7a      	ldrh	r2, [r7, #18]
 8003a68:	8a3b      	ldrh	r3, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d008      	beq.n	8003a80 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003a6e:	8a3b      	ldrh	r3, [r7, #16]
 8003a70:	041a      	lsls	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e004      	b.n	8003a8a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003a80:	8a7b      	ldrh	r3, [r7, #18]
 8003a82:	041a      	lsls	r2, r3, #16
 8003a84:	89fb      	ldrh	r3, [r7, #14]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003a8a:	697b      	ldr	r3, [r7, #20]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f85d 	bl	8003b64 <RTC_EnterInitMode>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e011      	b.n	8003ada <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	0c12      	lsrs	r2, r2, #16
 8003abe:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f872 	bl	8003bb4 <RTC_ExitInitMode>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	81fb      	strh	r3, [r7, #14]
 8003af0:	2300      	movs	r3, #0
 8003af2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003b04:	89fb      	ldrh	r3, [r7, #14]
 8003b06:	041a      	lsls	r2, r3, #16
 8003b08:	89bb      	ldrh	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f81d 	bl	8003b64 <RTC_EnterInitMode>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e011      	b.n	8003b5a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	0c12      	lsrs	r2, r2, #16
 8003b3e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b292      	uxth	r2, r2
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f832 	bl	8003bb4 <RTC_ExitInitMode>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003b70:	f7fd ff70 	bl	8001a54 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b76:	e009      	b.n	8003b8c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b78:	f7fd ff6c 	bl	8001a54 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b86:	d901      	bls.n	8003b8c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e00f      	b.n	8003bac <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0210 	orr.w	r2, r2, #16
 8003ba8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0210 	bic.w	r2, r2, #16
 8003bce:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003bd0:	f7fd ff40 	bl	8001a54 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bd6:	e009      	b.n	8003bec <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bd8:	f7fd ff3c 	bl	8001a54 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003be6:	d901      	bls.n	8003bec <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e007      	b.n	8003bfc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003c12:	e005      	b.n	8003c20 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	3b0a      	subs	r3, #10
 8003c1e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	2b09      	cmp	r3, #9
 8003c24:	d8f6      	bhi.n	8003c14 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b2db      	uxtb	r3, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	b2db      	uxtb	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7bdb      	ldrb	r3, [r3, #15]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7b5b      	ldrb	r3, [r3, #13]
 8003c9c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7b9b      	ldrb	r3, [r3, #14]
 8003ca2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	e06f      	b.n	8003d8a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d011      	beq.n	8003cd4 <RTC_DateUpdate+0x5c>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d00e      	beq.n	8003cd4 <RTC_DateUpdate+0x5c>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	d00b      	beq.n	8003cd4 <RTC_DateUpdate+0x5c>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b07      	cmp	r3, #7
 8003cc0:	d008      	beq.n	8003cd4 <RTC_DateUpdate+0x5c>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d005      	beq.n	8003cd4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0a      	cmp	r3, #10
 8003ccc:	d002      	beq.n	8003cd4 <RTC_DateUpdate+0x5c>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d117      	bne.n	8003d04 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b1e      	cmp	r3, #30
 8003cd8:	d803      	bhi.n	8003ce2 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003ce0:	e050      	b.n	8003d84 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d005      	beq.n	8003cf4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	3301      	adds	r3, #1
 8003cec:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003cf2:	e047      	b.n	8003d84 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
          year++;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003d02:	e03f      	b.n	8003d84 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d008      	beq.n	8003d1c <RTC_DateUpdate+0xa4>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d005      	beq.n	8003d1c <RTC_DateUpdate+0xa4>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d002      	beq.n	8003d1c <RTC_DateUpdate+0xa4>
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b0b      	cmp	r3, #11
 8003d1a:	d10c      	bne.n	8003d36 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b1d      	cmp	r3, #29
 8003d20:	d803      	bhi.n	8003d2a <RTC_DateUpdate+0xb2>
      {
        day++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d28:	e02c      	b.n	8003d84 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d30:	2301      	movs	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d34:	e026      	b.n	8003d84 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d123      	bne.n	8003d84 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b1b      	cmp	r3, #27
 8003d40:	d803      	bhi.n	8003d4a <RTC_DateUpdate+0xd2>
      {
        day++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e01c      	b.n	8003d84 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b1c      	cmp	r3, #28
 8003d4e:	d111      	bne.n	8003d74 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f839 	bl	8003dcc <RTC_IsLeapYear>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e00d      	b.n	8003d84 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e007      	b.n	8003d84 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b1d      	cmp	r3, #29
 8003d78:	d104      	bne.n	8003d84 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d80:	2301      	movs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d38b      	bcc.n	8003caa <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	6978      	ldr	r0, [r7, #20]
 8003db6:	f000 f83b 	bl	8003e30 <RTC_WeekDayNum>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	731a      	strb	r2, [r3, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e01d      	b.n	8003e22 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	4a10      	ldr	r2, [pc, #64]	@ (8003e2c <RTC_IsLeapYear+0x60>)
 8003dea:	fba2 1203 	umull	r1, r2, r2, r3
 8003dee:	0952      	lsrs	r2, r2, #5
 8003df0:	2164      	movs	r1, #100	@ 0x64
 8003df2:	fb01 f202 	mul.w	r2, r1, r2
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <RTC_IsLeapYear+0x60>)
 8003e06:	fba2 1203 	umull	r1, r2, r2, r3
 8003e0a:	09d2      	lsrs	r2, r2, #7
 8003e0c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003e10:	fb01 f202 	mul.w	r2, r1, r2
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003e20:	2300      	movs	r3, #0
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	51eb851f 	.word	0x51eb851f

08003e30 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003e4e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d82d      	bhi.n	8003eb2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	4a2c      	ldr	r2, [pc, #176]	@ (8003f14 <RTC_WeekDayNum+0xe4>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	085a      	lsrs	r2, r3, #1
 8003e6a:	78bb      	ldrb	r3, [r7, #2]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	441a      	add	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	4926      	ldr	r1, [pc, #152]	@ (8003f18 <RTC_WeekDayNum+0xe8>)
 8003e80:	fba1 1303 	umull	r1, r3, r1, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4922      	ldr	r1, [pc, #136]	@ (8003f18 <RTC_WeekDayNum+0xe8>)
 8003e8e:	fba1 1303 	umull	r1, r3, r1, r3
 8003e92:	09db      	lsrs	r3, r3, #7
 8003e94:	4413      	add	r3, r2
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <RTC_WeekDayNum+0xec>)
 8003e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9e:	1ad1      	subs	r1, r2, r3
 8003ea0:	0849      	lsrs	r1, r1, #1
 8003ea2:	440b      	add	r3, r1
 8003ea4:	0899      	lsrs	r1, r3, #2
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	1a5b      	subs	r3, r3, r1
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e029      	b.n	8003f06 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <RTC_WeekDayNum+0xe4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	085a      	lsrs	r2, r3, #1
 8003ec6:	78bb      	ldrb	r3, [r7, #2]
 8003ec8:	441a      	add	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	441a      	add	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4910      	ldr	r1, [pc, #64]	@ (8003f18 <RTC_WeekDayNum+0xe8>)
 8003ed8:	fba1 1303 	umull	r1, r3, r1, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	490d      	ldr	r1, [pc, #52]	@ (8003f18 <RTC_WeekDayNum+0xe8>)
 8003ee4:	fba1 1303 	umull	r1, r3, r1, r3
 8003ee8:	09db      	lsrs	r3, r3, #7
 8003eea:	4413      	add	r3, r2
 8003eec:	1c9a      	adds	r2, r3, #2
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <RTC_WeekDayNum+0xec>)
 8003ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef4:	1ad1      	subs	r1, r2, r3
 8003ef6:	0849      	lsrs	r1, r1, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	0899      	lsrs	r1, r3, #2
 8003efc:	460b      	mov	r3, r1
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a5b      	subs	r3, r3, r1
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	b2db      	uxtb	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	38e38e39 	.word	0x38e38e39
 8003f18:	51eb851f 	.word	0x51eb851f
 8003f1c:	24924925 	.word	0x24924925

08003f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e076      	b.n	8004020 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f42:	d009      	beq.n	8003f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	61da      	str	r2, [r3, #28]
 8003f4a:	e005      	b.n	8003f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fbda 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fdc:	ea42 0103 	orr.w	r1, r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	0c1a      	lsrs	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f002 0204 	and.w	r2, r2, #4
 8003ffe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800400e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_SPI_Transmit+0x22>
 8004046:	2302      	movs	r3, #2
 8004048:	e12d      	b.n	80042a6 <HAL_SPI_Transmit+0x27e>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004052:	f7fd fcff 	bl	8001a54 <HAL_GetTick>
 8004056:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d002      	beq.n	800406e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004068:	2302      	movs	r3, #2
 800406a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800406c:	e116      	b.n	800429c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_Transmit+0x52>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800407e:	e10d      	b.n	800429c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2203      	movs	r2, #3
 8004084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c6:	d10f      	bne.n	80040e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	d007      	beq.n	8004106 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800410e:	d14f      	bne.n	80041b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_SPI_Transmit+0xf6>
 8004118:	8afb      	ldrh	r3, [r7, #22]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d142      	bne.n	80041a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004142:	e02f      	b.n	80041a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d112      	bne.n	8004178 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004176:	e015      	b.n	80041a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004178:	f7fd fc6c 	bl	8001a54 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d803      	bhi.n	8004190 <HAL_SPI_Transmit+0x168>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d102      	bne.n	8004196 <HAL_SPI_Transmit+0x16e>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041a2:	e07b      	b.n	800429c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ca      	bne.n	8004144 <HAL_SPI_Transmit+0x11c>
 80041ae:	e050      	b.n	8004252 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_SPI_Transmit+0x196>
 80041b8:	8afb      	ldrh	r3, [r7, #22]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d144      	bne.n	8004248 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	7812      	ldrb	r2, [r2, #0]
 80041ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041e4:	e030      	b.n	8004248 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d113      	bne.n	800421c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	86da      	strh	r2, [r3, #54]	@ 0x36
 800421a:	e015      	b.n	8004248 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421c:	f7fd fc1a 	bl	8001a54 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d803      	bhi.n	8004234 <HAL_SPI_Transmit+0x20c>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d102      	bne.n	800423a <HAL_SPI_Transmit+0x212>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004246:	e029      	b.n	800429c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1c9      	bne.n	80041e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fa62 	bl	8004720 <SPI_EndRxTxTransaction>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e003      	b.n	800429c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80042a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b08c      	sub	sp, #48	@ 0x30
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042bc:	2301      	movs	r3, #1
 80042be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x26>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e198      	b.n	8004606 <HAL_SPI_TransmitReceive+0x358>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042dc:	f7fd fbba 	bl	8001a54 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d00f      	beq.n	800431e <HAL_SPI_TransmitReceive+0x70>
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004304:	d107      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x68>
 800430e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004316:	2302      	movs	r3, #2
 8004318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800431c:	e16d      	b.n	80045fa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x82>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x82>
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004336:	e160      	b.n	80045fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b04      	cmp	r3, #4
 8004342:	d003      	beq.n	800434c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2205      	movs	r2, #5
 8004348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	887a      	ldrh	r2, [r7, #2]
 8004362:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	887a      	ldrh	r2, [r7, #2]
 800436e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d007      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a8:	d17c      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x10a>
 80043b2:	8b7b      	ldrh	r3, [r7, #26]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d16a      	bne.n	800448e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043dc:	e057      	b.n	800448e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d11b      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x176>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_SPI_TransmitReceive+0x176>
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d113      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d119      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x1b8>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d014      	beq.n	8004466 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004446:	b292      	uxth	r2, r2
 8004448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004462:	2301      	movs	r3, #1
 8004464:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004466:	f7fd faf5 	bl	8001a54 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004472:	429a      	cmp	r2, r3
 8004474:	d80b      	bhi.n	800448e <HAL_SPI_TransmitReceive+0x1e0>
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d007      	beq.n	800448e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800448c:	e0b5      	b.n	80045fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1a2      	bne.n	80043de <HAL_SPI_TransmitReceive+0x130>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d19d      	bne.n	80043de <HAL_SPI_TransmitReceive+0x130>
 80044a2:	e080      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x204>
 80044ac:	8b7b      	ldrh	r3, [r7, #26]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d16f      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d8:	e05b      	b.n	8004592 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d11c      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x274>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d017      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x274>
 80044f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d114      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d119      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x2b6>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004560:	2301      	movs	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004564:	f7fd fa76 	bl	8001a54 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004570:	429a      	cmp	r2, r3
 8004572:	d803      	bhi.n	800457c <HAL_SPI_TransmitReceive+0x2ce>
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d102      	bne.n	8004582 <HAL_SPI_TransmitReceive+0x2d4>
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004590:	e033      	b.n	80045fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d19e      	bne.n	80044da <HAL_SPI_TransmitReceive+0x22c>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d199      	bne.n	80044da <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8b8 	bl	8004720 <SPI_EndRxTxTransaction>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80045c2:	e01a      	b.n	80045fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f0:	e003      	b.n	80045fa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004602:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004606:	4618      	mov	r0, r3
 8004608:	3730      	adds	r7, #48	@ 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004620:	f7fd fa18 	bl	8001a54 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004630:	f7fd fa10 	bl	8001a54 <HAL_GetTick>
 8004634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004636:	4b39      	ldr	r3, [pc, #228]	@ (800471c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	015b      	lsls	r3, r3, #5
 800463c:	0d1b      	lsrs	r3, r3, #20
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004646:	e054      	b.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d050      	beq.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004650:	f7fd fa00 	bl	8001a54 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	429a      	cmp	r2, r3
 800465e:	d902      	bls.n	8004666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d13d      	bne.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800467e:	d111      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004688:	d004      	beq.n	8004694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004692:	d107      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ac:	d10f      	bne.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e017      	b.n	8004712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	429a      	cmp	r2, r3
 800470e:	d19b      	bne.n	8004648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000008 	.word	0x20000008

08004720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	2180      	movs	r1, #128	@ 0x80
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff ff6a 	bl	8004610 <SPI_WaitFlagStateUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e000      	b.n	8004754 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e042      	b.n	80047f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd f81c 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	@ 0x24
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800479e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f91d 	bl	80049e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	@ 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	d16d      	bne.n	80048f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_UART_Transmit+0x2c>
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e066      	b.n	80048fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2221      	movs	r2, #33	@ 0x21
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483a:	f7fd f90b 	bl	8001a54 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d108      	bne.n	8004868 <HAL_UART_Transmit+0x6c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e003      	b.n	8004870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004870:	e02a      	b.n	80048c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	@ 0x80
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f840 	bl	8004902 <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e036      	b.n	80048fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	3302      	adds	r3, #2
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e007      	b.n	80048ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1cf      	bne.n	8004872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	2140      	movs	r1, #64	@ 0x40
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f810 	bl	8004902 <UART_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e006      	b.n	80048fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b090      	sub	sp, #64	@ 0x40
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	e050      	b.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d04c      	beq.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800491c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0x30>
 8004922:	f7fd f897 	bl	8001a54 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492e:	429a      	cmp	r2, r3
 8004930:	d241      	bcs.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004952:	637a      	str	r2, [r7, #52]	@ 0x34
 8004954:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	613b      	str	r3, [r7, #16]
   return(result);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004986:	623a      	str	r2, [r7, #32]
 8004988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	69f9      	ldr	r1, [r7, #28]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	61bb      	str	r3, [r7, #24]
   return(result);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e5      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e00f      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4013      	ands	r3, r2
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d09f      	beq.n	8004914 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3740      	adds	r7, #64	@ 0x40
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a1a:	f023 030c 	bic.w	r3, r3, #12
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	430b      	orrs	r3, r1
 8004a26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2c      	ldr	r2, [pc, #176]	@ (8004af4 <UART_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7fe fb24 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	e002      	b.n	8004a56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe fb0c 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004a54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009a      	lsls	r2, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	4a22      	ldr	r2, [pc, #136]	@ (8004af8 <UART_SetConfig+0x118>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	0119      	lsls	r1, r3, #4
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009a      	lsls	r2, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <UART_SetConfig+0x118>)
 8004a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2064      	movs	r0, #100	@ 0x64
 8004a96:	fb00 f303 	mul.w	r3, r0, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	3332      	adds	r3, #50	@ 0x32
 8004aa0:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <UART_SetConfig+0x118>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aac:	4419      	add	r1, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <UART_SetConfig+0x118>)
 8004ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2064      	movs	r0, #100	@ 0x64
 8004ace:	fb00 f303 	mul.w	r3, r0, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	3332      	adds	r3, #50	@ 0x32
 8004ad8:	4a07      	ldr	r2, [pc, #28]	@ (8004af8 <UART_SetConfig+0x118>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	440a      	add	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40013800 	.word	0x40013800
 8004af8:	51eb851f 	.word	0x51eb851f

08004afc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b00:	4904      	ldr	r1, [pc, #16]	@ (8004b14 <MX_FATFS_Init+0x18>)
 8004b02:	4805      	ldr	r0, [pc, #20]	@ (8004b18 <MX_FATFS_Init+0x1c>)
 8004b04:	f004 f936 	bl	8008d74 <FATFS_LinkDriver>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <MX_FATFS_Init+0x20>)
 8004b0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20002228 	.word	0x20002228
 8004b18:	20000014 	.word	0x20000014
 8004b1c:	20002224 	.word	0x20002224

08004b20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	4603      	mov	r3, r0
 8004b36:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    /*Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_initialize(pdrv);
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fd38 	bl	80005b0 <SD_disk_initialize>
 8004b40:	4603      	mov	r3, r0
 8004b42:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_status(pdrv);
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fb fe0f 	bl	800077c <SD_disk_status>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    /*return RES_OK;*/
	return SD_disk_read(pdrv, buff, sector, count);
 8004b7a:	7bf8      	ldrb	r0, [r7, #15]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	f7fb fe0f 	bl	80007a4 <SD_disk_read>
 8004b86:	4603      	mov	r3, r0
 8004b88:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    /*return RES_OK;*/
	return SD_disk_write(pdrv, buff, sector, count);
 8004ba2:	7bf8      	ldrb	r0, [r7, #15]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	f7fb fe65 	bl	8000878 <SD_disk_write>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	603a      	str	r2, [r7, #0]
 8004bc4:	71fb      	strb	r3, [r7, #7]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    /*DRESULT res = RES_ERROR;
    return res;*/
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	79b9      	ldrb	r1, [r7, #6]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fb fed5 	bl	8000980 <SD_disk_ioctl>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <disk_status+0x30>)
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	79fa      	ldrb	r2, [r7, #7]
 8004bfc:	4905      	ldr	r1, [pc, #20]	@ (8004c14 <disk_status+0x30>)
 8004bfe:	440a      	add	r2, r1
 8004c00:	7a12      	ldrb	r2, [r2, #8]
 8004c02:	4610      	mov	r0, r2
 8004c04:	4798      	blx	r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	2000244c 	.word	0x2000244c

08004c18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <disk_initialize+0x48>)
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d111      	bne.n	8004c54 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	4a0b      	ldr	r2, [pc, #44]	@ (8004c60 <disk_initialize+0x48>)
 8004c34:	2101      	movs	r1, #1
 8004c36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	4a09      	ldr	r2, [pc, #36]	@ (8004c60 <disk_initialize+0x48>)
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	79fa      	ldrb	r2, [r7, #7]
 8004c46:	4906      	ldr	r1, [pc, #24]	@ (8004c60 <disk_initialize+0x48>)
 8004c48:	440a      	add	r2, r1
 8004c4a:	7a12      	ldrb	r2, [r2, #8]
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2000244c 	.word	0x2000244c

08004c64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca0 <disk_read+0x3c>)
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	689c      	ldr	r4, [r3, #8]
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	4a07      	ldr	r2, [pc, #28]	@ (8004ca0 <disk_read+0x3c>)
 8004c84:	4413      	add	r3, r2
 8004c86:	7a18      	ldrb	r0, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	47a0      	blx	r4
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000244c 	.word	0x2000244c

08004ca4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <disk_write+0x3c>)
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68dc      	ldr	r4, [r3, #12]
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4a07      	ldr	r2, [pc, #28]	@ (8004ce0 <disk_write+0x3c>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	7a18      	ldrb	r0, [r3, #8]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	47a0      	blx	r4
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000244c 	.word	0x2000244c

08004ce4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	603a      	str	r2, [r7, #0]
 8004cee:	71fb      	strb	r3, [r7, #7]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <disk_ioctl+0x38>)
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	79fa      	ldrb	r2, [r7, #7]
 8004d02:	4906      	ldr	r1, [pc, #24]	@ (8004d1c <disk_ioctl+0x38>)
 8004d04:	440a      	add	r2, r1
 8004d06:	7a10      	ldrb	r0, [r2, #8]
 8004d08:	79b9      	ldrb	r1, [r7, #6]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	4798      	blx	r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	2000244c 	.word	0x2000244c

08004d20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004d34:	e007      	b.n	8004d46 <mem_cpy+0x26>
		*d++ = *s++;
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	1c53      	adds	r3, r2, #1
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	6179      	str	r1, [r7, #20]
 8004d42:	7812      	ldrb	r2, [r2, #0]
 8004d44:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	1e5a      	subs	r2, r3, #1
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f2      	bne.n	8004d36 <mem_cpy+0x16>
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004d6c:	e005      	b.n	8004d7a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	617a      	str	r2, [r7, #20]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1e5a      	subs	r2, r3, #1
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f4      	bne.n	8004d6e <mem_set+0x12>
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	@ 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004da8:	bf00      	nop
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	1e5a      	subs	r2, r3, #1
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <mem_cmp+0x40>
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	61ba      	str	r2, [r7, #24]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	1acb      	subs	r3, r1, r3
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ec      	beq.n	8004daa <mem_cmp+0x1a>
	return r;
 8004dd0:	697b      	ldr	r3, [r7, #20]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3724      	adds	r7, #36	@ 0x24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004de6:	e002      	b.n	8004dee <chk_chr+0x12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <chk_chr+0x26>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d1f2      	bne.n	8004de8 <chk_chr+0xc>
	return *str;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	781b      	ldrb	r3, [r3, #0]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e03b      	b.n	8004e9c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004e24:	4931      	ldr	r1, [pc, #196]	@ (8004eec <chk_lock+0xdc>)
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02c      	beq.n	8004e92 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e38:	492c      	ldr	r1, [pc, #176]	@ (8004eec <chk_lock+0xdc>)
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d120      	bne.n	8004e96 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004e54:	4925      	ldr	r1, [pc, #148]	@ (8004eec <chk_lock+0xdc>)
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	3304      	adds	r3, #4
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d111      	bne.n	8004e96 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004e72:	491e      	ldr	r1, [pc, #120]	@ (8004eec <chk_lock+0xdc>)
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3308      	adds	r3, #8
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d102      	bne.n	8004e96 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004e90:	e007      	b.n	8004ea2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d9c0      	bls.n	8004e24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d109      	bne.n	8004ebc <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <chk_lock+0xa4>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d101      	bne.n	8004eb8 <chk_lock+0xa8>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e013      	b.n	8004ee0 <chk_lock+0xd0>
 8004eb8:	2312      	movs	r3, #18
 8004eba:	e011      	b.n	8004ee0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <chk_lock+0xca>
 8004ec2:	490a      	ldr	r1, [pc, #40]	@ (8004eec <chk_lock+0xdc>)
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	330a      	adds	r3, #10
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d101      	bne.n	8004ede <chk_lock+0xce>
 8004eda:	2310      	movs	r3, #16
 8004edc:	e000      	b.n	8004ee0 <chk_lock+0xd0>
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20002234 	.word	0x20002234

08004ef0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e002      	b.n	8004f02 <enq_lock+0x12>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3301      	adds	r3, #1
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d809      	bhi.n	8004f1c <enq_lock+0x2c>
 8004f08:	490a      	ldr	r1, [pc, #40]	@ (8004f34 <enq_lock+0x44>)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ef      	bne.n	8004efc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20002234 	.word	0x20002234

08004f38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e02e      	b.n	8004fa6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004f48:	4958      	ldr	r1, [pc, #352]	@ (80050ac <inc_lock+0x174>)
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d11d      	bne.n	8004fa0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004f64:	4951      	ldr	r1, [pc, #324]	@ (80050ac <inc_lock+0x174>)
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3304      	adds	r3, #4
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10e      	bne.n	8004fa0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004f82:	494a      	ldr	r1, [pc, #296]	@ (80050ac <inc_lock+0x174>)
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3308      	adds	r3, #8
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f9a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d006      	beq.n	8004fae <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d9cd      	bls.n	8004f48 <inc_lock+0x10>
 8004fac:	e000      	b.n	8004fb0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8004fae:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d148      	bne.n	8005048 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e002      	b.n	8004fc2 <inc_lock+0x8a>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d809      	bhi.n	8004fdc <inc_lock+0xa4>
 8004fc8:	4938      	ldr	r1, [pc, #224]	@ (80050ac <inc_lock+0x174>)
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ef      	bne.n	8004fbc <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d101      	bne.n	8004fe6 <inc_lock+0xae>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e05d      	b.n	80050a2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	482f      	ldr	r0, [pc, #188]	@ (80050ac <inc_lock+0x174>)
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4403      	add	r3, r0
 8004ffc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005004:	6899      	ldr	r1, [r3, #8]
 8005006:	4829      	ldr	r0, [pc, #164]	@ (80050ac <inc_lock+0x174>)
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4403      	add	r3, r0
 8005014:	3304      	adds	r3, #4
 8005016:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800501e:	88d8      	ldrh	r0, [r3, #6]
 8005020:	4922      	ldr	r1, [pc, #136]	@ (80050ac <inc_lock+0x174>)
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4613      	mov	r3, r2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	3308      	adds	r3, #8
 8005030:	4602      	mov	r2, r0
 8005032:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005034:	491d      	ldr	r1, [pc, #116]	@ (80050ac <inc_lock+0x174>)
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	330a      	adds	r3, #10
 8005044:	2200      	movs	r2, #0
 8005046:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <inc_lock+0x130>
 800504e:	4917      	ldr	r1, [pc, #92]	@ (80050ac <inc_lock+0x174>)
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4613      	mov	r3, r2
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	330a      	adds	r3, #10
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <inc_lock+0x130>
 8005064:	2300      	movs	r3, #0
 8005066:	e01c      	b.n	80050a2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <inc_lock+0x14e>
 800506e:	490f      	ldr	r1, [pc, #60]	@ (80050ac <inc_lock+0x174>)
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	330a      	adds	r3, #10
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	b299      	uxth	r1, r3
 8005084:	e001      	b.n	800508a <inc_lock+0x152>
 8005086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800508a:	4808      	ldr	r0, [pc, #32]	@ (80050ac <inc_lock+0x174>)
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4403      	add	r3, r0
 8005098:	330a      	adds	r3, #10
 800509a:	460a      	mov	r2, r1
 800509c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3301      	adds	r3, #1
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	20002234 	.word	0x20002234

080050b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d82e      	bhi.n	8005122 <dec_lock+0x72>
		n = Files[i].ctr;
 80050c4:	491b      	ldr	r1, [pc, #108]	@ (8005134 <dec_lock+0x84>)
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	330a      	adds	r3, #10
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050d8:	89fb      	ldrh	r3, [r7, #14]
 80050da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050de:	d101      	bne.n	80050e4 <dec_lock+0x34>
 80050e0:	2300      	movs	r3, #0
 80050e2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <dec_lock+0x40>
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050f0:	4910      	ldr	r1, [pc, #64]	@ (8005134 <dec_lock+0x84>)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	330a      	adds	r3, #10
 8005100:	89fa      	ldrh	r2, [r7, #14]
 8005102:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005104:	89fb      	ldrh	r3, [r7, #14]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <dec_lock+0x6c>
 800510a:	490a      	ldr	r1, [pc, #40]	@ (8005134 <dec_lock+0x84>)
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	737b      	strb	r3, [r7, #13]
 8005120:	e001      	b.n	8005126 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005122:	2302      	movs	r3, #2
 8005124:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005126:	7b7b      	ldrb	r3, [r7, #13]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20002234 	.word	0x20002234

08005138 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e016      	b.n	8005174 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005146:	4910      	ldr	r1, [pc, #64]	@ (8005188 <clear_lock+0x50>)
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d108      	bne.n	800516e <clear_lock+0x36>
 800515c:	490a      	ldr	r1, [pc, #40]	@ (8005188 <clear_lock+0x50>)
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d9e5      	bls.n	8005146 <clear_lock+0xe>
	}
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	20002234 	.word	0x20002234

0800518c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d040      	beq.n	8005226 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b4:	7858      	ldrb	r0, [r3, #1]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	2301      	movs	r3, #1
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	f7ff fd72 	bl	8004ca4 <disk_write>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <sync_window+0x40>
			res = FR_DISK_ERR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
 80051ca:	e02c      	b.n	8005226 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d2:	2200      	movs	r2, #0
 80051d4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	1ad2      	subs	r2, r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d21b      	bcs.n	8005226 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f4:	78db      	ldrb	r3, [r3, #3]
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e012      	b.n	8005220 <sync_window+0x94>
					wsect += fs->fsize;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520e:	7858      	ldrb	r0, [r3, #1]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	2301      	movs	r3, #1
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	f7ff fd45 	bl	8004ca4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3b01      	subs	r3, #1
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d8e9      	bhi.n	80051fa <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d01e      	beq.n	800528a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff9d 	bl	800518c <sync_window>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d116      	bne.n	800528a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005262:	7858      	ldrb	r0, [r3, #1]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	2301      	movs	r3, #1
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	f7ff fcfb 	bl	8004c64 <disk_read>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800527a:	2301      	movs	r3, #1
 800527c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005284:	461a      	mov	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff75 	bl	800518c <sync_window>
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 80ad 	bne.w	8005408 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	f040 8098 	bne.w	80053ec <sync_fs+0x158>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c2:	795b      	ldrb	r3, [r3, #5]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	f040 8091 	bne.w	80053ec <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052d2:	895b      	ldrh	r3, [r3, #10]
 80052d4:	461a      	mov	r2, r3
 80052d6:	2100      	movs	r1, #0
 80052d8:	f7ff fd40 	bl	8004d5c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2255      	movs	r2, #85	@ 0x55
 80052e0:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	22aa      	movs	r2, #170	@ 0xaa
 80052e8:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2252      	movs	r2, #82	@ 0x52
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2252      	movs	r2, #82	@ 0x52
 80052f6:	705a      	strb	r2, [r3, #1]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2261      	movs	r2, #97	@ 0x61
 80052fc:	709a      	strb	r2, [r3, #2]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2241      	movs	r2, #65	@ 0x41
 8005302:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2272      	movs	r2, #114	@ 0x72
 8005308:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2272      	movs	r2, #114	@ 0x72
 8005310:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2241      	movs	r2, #65	@ 0x41
 8005318:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2261      	movs	r2, #97	@ 0x61
 8005320:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	b29b      	uxth	r3, r3
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	b29b      	uxth	r3, r3
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	b2da      	uxtb	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	b29b      	uxth	r3, r3
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	b29b      	uxth	r3, r3
 800538c:	b2da      	uxtb	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	0e1b      	lsrs	r3, r3, #24
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d0:	7858      	ldrb	r0, [r3, #1]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053dc:	2301      	movs	r3, #1
 80053de:	f7ff fc61 	bl	8004ca4 <disk_write>
			fs->fsi_flag = 0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e8:	2200      	movs	r2, #0
 80053ea:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2200      	movs	r2, #0
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fc73 	bl	8004ce4 <disk_ioctl>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	3b02      	subs	r3, #2
 8005420:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	3b02      	subs	r3, #2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d301      	bcc.n	8005436 <clust2sect+0x24>
 8005432:	2300      	movs	r3, #0
 8005434:	e00c      	b.n	8005450 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	461a      	mov	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	fb03 f202 	mul.w	r2, r3, r2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	4413      	add	r3, r2
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d906      	bls.n	8005478 <get_fat+0x1e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <get_fat+0x24>
		val = 1;	/* Internal error */
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e0e3      	b.n	8005646 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b03      	cmp	r3, #3
 800548e:	f000 8097 	beq.w	80055c0 <get_fat+0x166>
 8005492:	2b03      	cmp	r3, #3
 8005494:	f300 80cd 	bgt.w	8005632 <get_fat+0x1d8>
 8005498:	2b01      	cmp	r3, #1
 800549a:	d002      	beq.n	80054a2 <get_fat+0x48>
 800549c:	2b02      	cmp	r3, #2
 800549e:	d05e      	beq.n	800555e <get_fat+0x104>
 80054a0:	e0c7      	b.n	8005632 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054be:	895b      	ldrh	r3, [r3, #10]
 80054c0:	4619      	mov	r1, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80054c8:	4413      	add	r3, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff feaf 	bl	8005230 <move_window>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 80af 	bne.w	8005638 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	60fa      	str	r2, [r7, #12]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054e6:	8952      	ldrh	r2, [r2, #10]
 80054e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054ec:	fb01 f202 	mul.w	r2, r1, r2
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	5cd3      	ldrb	r3, [r2, r3]
 80054f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005506:	895b      	ldrh	r3, [r3, #10]
 8005508:	4619      	mov	r1, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005510:	4413      	add	r3, r2
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fe8b 	bl	8005230 <move_window>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	f040 808d 	bne.w	800563c <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005528:	895b      	ldrh	r3, [r3, #10]
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005532:	fb01 f202 	mul.w	r2, r1, r2
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	5cd3      	ldrb	r3, [r2, r3]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4313      	orrs	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <get_fat+0xfa>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	e002      	b.n	800555a <get_fat+0x100>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555a:	617b      	str	r3, [r7, #20]
			break;
 800555c:	e073      	b.n	8005646 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800556c:	895b      	ldrh	r3, [r3, #10]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	b29b      	uxth	r3, r3
 8005572:	4619      	mov	r1, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	fbb3 f3f1 	udiv	r3, r3, r1
 800557a:	4413      	add	r3, r2
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fe56 	bl	8005230 <move_window>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d15a      	bne.n	8005640 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005594:	8952      	ldrh	r2, [r2, #10]
 8005596:	fbb3 f1f2 	udiv	r1, r3, r2
 800559a:	fb01 f202 	mul.w	r2, r1, r2
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3301      	adds	r3, #1
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	b21a      	sxth	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b21b      	sxth	r3, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	617b      	str	r3, [r7, #20]
			break;
 80055be:	e042      	b.n	8005646 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80055dc:	4413      	add	r3, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fe25 	bl	8005230 <move_window>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d12b      	bne.n	8005644 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055f6:	8952      	ldrh	r2, [r2, #10]
 80055f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055fc:	fb01 f202 	mul.w	r2, r1, r2
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3303      	adds	r3, #3
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	061a      	lsls	r2, r3, #24
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3302      	adds	r3, #2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	431a      	orrs	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	3301      	adds	r3, #1
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	4313      	orrs	r3, r2
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800562e:	617b      	str	r3, [r7, #20]
			break;
 8005630:	e009      	b.n	8005646 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8005632:	2301      	movs	r3, #1
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e006      	b.n	8005646 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005638:	bf00      	nop
 800563a:	e004      	b.n	8005646 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005644:	bf00      	nop
		}
	}

	return val;
 8005646:	697b      	ldr	r3, [r7, #20]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d906      	bls.n	8005670 <put_fat+0x20>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d302      	bcc.n	8005676 <put_fat+0x26>
		res = FR_INT_ERR;
 8005670:	2302      	movs	r3, #2
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e13a      	b.n	80058ec <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b03      	cmp	r3, #3
 8005680:	f000 80d0 	beq.w	8005824 <put_fat+0x1d4>
 8005684:	2b03      	cmp	r3, #3
 8005686:	f300 8127 	bgt.w	80058d8 <put_fat+0x288>
 800568a:	2b01      	cmp	r3, #1
 800568c:	d003      	beq.n	8005696 <put_fat+0x46>
 800568e:	2b02      	cmp	r3, #2
 8005690:	f000 808f 	beq.w	80057b2 <put_fat+0x162>
 8005694:	e120      	b.n	80058d8 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4413      	add	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056b2:	895b      	ldrh	r3, [r3, #10]
 80056b4:	4619      	mov	r1, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80056bc:	4413      	add	r3, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff fdb5 	bl	8005230 <move_window>
 80056c6:	4603      	mov	r3, r0
 80056c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 8106 	bne.w	80058de <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	617a      	str	r2, [r7, #20]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056de:	8952      	ldrh	r2, [r2, #10]
 80056e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e4:	fb01 f202 	mul.w	r2, r1, r2
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <put_fat+0xc6>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b25b      	sxtb	r3, r3
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	b25a      	sxtb	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	b25b      	sxtb	r3, r3
 800570e:	4313      	orrs	r3, r2
 8005710:	b25b      	sxtb	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e001      	b.n	800571a <put_fat+0xca>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005724:	2201      	movs	r2, #1
 8005726:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005736:	895b      	ldrh	r3, [r3, #10]
 8005738:	4619      	mov	r1, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005740:	4413      	add	r3, r2
 8005742:	4619      	mov	r1, r3
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fd73 	bl	8005230 <move_window>
 800574a:	4603      	mov	r3, r0
 800574c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800574e:	7ffb      	ldrb	r3, [r7, #31]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 80c6 	bne.w	80058e2 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800575c:	895b      	ldrh	r3, [r3, #10]
 800575e:	461a      	mov	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	fbb3 f1f2 	udiv	r1, r3, r2
 8005766:	fb01 f202 	mul.w	r2, r1, r2
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <put_fat+0x134>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e00e      	b.n	80057a2 <put_fat+0x152>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	b25b      	sxtb	r3, r3
 800578a:	f023 030f 	bic.w	r3, r3, #15
 800578e:	b25a      	sxtb	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	b25b      	sxtb	r3, r3
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	b25b      	sxtb	r3, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	b25b      	sxtb	r3, r3
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ac:	2201      	movs	r2, #1
 80057ae:	711a      	strb	r2, [r3, #4]
			break;
 80057b0:	e09c      	b.n	80058ec <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057c0:	895b      	ldrh	r3, [r3, #10]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4619      	mov	r1, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ce:	4413      	add	r3, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff fd2c 	bl	8005230 <move_window>
 80057d8:	4603      	mov	r3, r0
 80057da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057dc:	7ffb      	ldrb	r3, [r7, #31]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 8081 	bne.w	80058e6 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057ee:	8952      	ldrh	r2, [r2, #10]
 80057f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80057f4:	fb01 f202 	mul.w	r2, r1, r2
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	b29b      	uxth	r3, r3
 800580c:	0a1b      	lsrs	r3, r3, #8
 800580e:	b29a      	uxth	r2, r3
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	3301      	adds	r3, #1
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800581e:	2201      	movs	r2, #1
 8005820:	711a      	strb	r2, [r3, #4]
			break;
 8005822:	e063      	b.n	80058ec <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005832:	895b      	ldrh	r3, [r3, #10]
 8005834:	089b      	lsrs	r3, r3, #2
 8005836:	b29b      	uxth	r3, r3
 8005838:	4619      	mov	r1, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005840:	4413      	add	r3, r2
 8005842:	4619      	mov	r1, r3
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff fcf3 	bl	8005230 <move_window>
 800584a:	4603      	mov	r3, r0
 800584c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800584e:	7ffb      	ldrb	r3, [r7, #31]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d14a      	bne.n	80058ea <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800585e:	8952      	ldrh	r2, [r2, #10]
 8005860:	fbb3 f1f2 	udiv	r1, r3, r2
 8005864:	fb01 f202 	mul.w	r2, r1, r2
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	3303      	adds	r3, #3
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	061a      	lsls	r2, r3, #24
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3302      	adds	r3, #2
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3301      	adds	r3, #1
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	4313      	orrs	r3, r2
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4313      	orrs	r3, r2
 800589a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3301      	adds	r3, #1
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0c1a      	lsrs	r2, r3, #16
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3302      	adds	r3, #2
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	0e1a      	lsrs	r2, r3, #24
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	3303      	adds	r3, #3
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d2:	2201      	movs	r2, #1
 80058d4:	711a      	strb	r2, [r3, #4]
			break;
 80058d6:	e009      	b.n	80058ec <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80058d8:	2302      	movs	r3, #2
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e006      	b.n	80058ec <put_fat+0x29c>
			if (res != FR_OK) break;
 80058de:	bf00      	nop
 80058e0:	e004      	b.n	80058ec <put_fat+0x29c>
			if (res != FR_OK) break;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <put_fat+0x29c>
			if (res != FR_OK) break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <put_fat+0x29c>
			if (res != FR_OK) break;
 80058ea:	bf00      	nop
		}
	}

	return res;
 80058ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d906      	bls.n	8005914 <remove_chain+0x1e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d302      	bcc.n	800591a <remove_chain+0x24>
		res = FR_INT_ERR;
 8005914:	2302      	movs	r3, #2
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e049      	b.n	80059ae <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800591e:	e03b      	b.n	8005998 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fd99 	bl	800545a <get_fat>
 8005928:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d03b      	beq.n	80059a8 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d102      	bne.n	800593c <remove_chain+0x46>
 8005936:	2302      	movs	r3, #2
 8005938:	73fb      	strb	r3, [r7, #15]
 800593a:	e038      	b.n	80059ae <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d102      	bne.n	800594a <remove_chain+0x54>
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e031      	b.n	80059ae <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800594a:	2200      	movs	r2, #0
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fe7e 	bl	8005650 <put_fat>
 8005954:	4603      	mov	r3, r0
 8005956:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d126      	bne.n	80059ac <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d013      	beq.n	8005994 <remove_chain+0x9e>
				fs->free_clust++;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	3301      	adds	r3, #1
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800597c:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005984:	795b      	ldrb	r3, [r3, #5]
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	b2da      	uxtb	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005992:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d3bc      	bcc.n	8005920 <remove_chain+0x2a>
 80059a6:	e002      	b.n	80059ae <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <remove_chain+0xb8>
			if (res != FR_OK) break;
 80059ac:	bf00      	nop
		}
	}

	return res;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d111      	bne.n	80059ec <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <create_chain+0x2e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d31d      	bcc.n	8005a22 <create_chain+0x6a>
 80059e6:	2301      	movs	r3, #1
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e01a      	b.n	8005a22 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fd33 	bl	800545a <get_fat>
 80059f4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d801      	bhi.n	8005a00 <create_chain+0x48>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e07f      	b.n	8005b00 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d101      	bne.n	8005a0c <create_chain+0x54>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	e079      	b.n	8005b00 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d201      	bcs.n	8005a1e <create_chain+0x66>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	e070      	b.n	8005b00 <create_chain+0x148>
		scl = clst;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d307      	bcc.n	8005a4a <create_chain+0x92>
			ncl = 2;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d901      	bls.n	8005a4a <create_chain+0x92>
 8005a46:	2300      	movs	r3, #0
 8005a48:	e05a      	b.n	8005b00 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005a4a:	6979      	ldr	r1, [r7, #20]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fd04 	bl	800545a <get_fat>
 8005a52:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d002      	beq.n	8005a68 <create_chain+0xb0>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <create_chain+0xb4>
			return cs;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	e049      	b.n	8005b00 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d1d8      	bne.n	8005a26 <create_chain+0x6e>
 8005a74:	2300      	movs	r3, #0
 8005a76:	e043      	b.n	8005b00 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005a78:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005a7a:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fde5 	bl	8005650 <put_fat>
 8005a86:	4603      	mov	r3, r0
 8005a88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <create_chain+0xec>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d006      	beq.n	8005aa4 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fdd8 	bl	8005650 <put_fat>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d121      	bne.n	8005aee <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d01c      	beq.n	8005afe <create_chain+0x146>
			fs->free_clust--;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ad4:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005adc:	795b      	ldrb	r3, [r3, #5]
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aea:	715a      	strb	r2, [r3, #5]
 8005aec:	e007      	b.n	8005afe <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d102      	bne.n	8005afa <create_chain+0x142>
 8005af4:	f04f 33ff 	mov.w	r3, #4294967295
 8005af8:	e000      	b.n	8005afc <create_chain+0x144>
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005afe:	697b      	ldr	r3, [r7, #20]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2a:	895b      	ldrh	r3, [r3, #10]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b40:	7892      	ldrb	r2, [r2, #2]
 8005b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	613a      	str	r2, [r7, #16]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <clmt_clust+0x54>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e010      	b.n	8005b7e <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d307      	bcc.n	8005b74 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b72:	e7e9      	b.n	8005b48 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005b74:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9c:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d009      	beq.n	8005bc2 <dir_sdi+0x3a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d301      	bcc.n	8005bc6 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0aa      	b.n	8005d1c <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d110      	bne.n	8005bee <dir_sdi+0x66>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d107      	bne.n	8005bee <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c00:	891b      	ldrh	r3, [r3, #8]
 8005c02:	461a      	mov	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d301      	bcc.n	8005c0e <dir_sdi+0x86>
			return FR_INT_ERR;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e086      	b.n	8005d1c <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	e043      	b.n	8005ca8 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c2c:	895b      	ldrh	r3, [r3, #10]
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c40:	789b      	ldrb	r3, [r3, #2]
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005c48:	e021      	b.n	8005c8e <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fc00 	bl	800545a <get_fat>
 8005c5a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d101      	bne.n	8005c68 <dir_sdi+0xe0>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e059      	b.n	8005d1c <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d909      	bls.n	8005c82 <dir_sdi+0xfa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d301      	bcc.n	8005c86 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005c82:	2302      	movs	r3, #2
 8005c84:	e04a      	b.n	8005d1c <dir_sdi+0x194>
			idx -= ic;
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d2d9      	bcs.n	8005c4a <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fbb6 	bl	8005412 <clust2sect>
 8005ca6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cae:	461a      	mov	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <dir_sdi+0x136>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e02e      	b.n	8005d1c <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cca:	895b      	ldrh	r3, [r3, #10]
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4413      	add	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ce2:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cfa:	895b      	ldrh	r3, [r3, #10]
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d08:	fb01 f202 	mul.w	r2, r1, r2
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	015b      	lsls	r3, r3, #5
 8005d10:	4403      	add	r3, r0
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d18:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d34:	88db      	ldrh	r3, [r3, #6]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <dir_next+0x2a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <dir_next+0x2e>
		return FR_NO_FILE;
 8005d4e:	2304      	movs	r3, #4
 8005d50:	e12e      	b.n	8005fb0 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d5e:	895b      	ldrh	r3, [r3, #10]
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d6c:	fb01 f202 	mul.w	r2, r1, r2
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 80fa 	bne.w	8005f6c <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d88:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da2:	891b      	ldrh	r3, [r3, #8]
 8005da4:	461a      	mov	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f0c0 80df 	bcc.w	8005f6c <dir_next+0x248>
				return FR_NO_FILE;
 8005dae:	2304      	movs	r3, #4
 8005db0:	e0fe      	b.n	8005fb0 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dbe:	895b      	ldrh	r3, [r3, #10]
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005dd8:	7892      	ldrb	r2, [r2, #2]
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 80c4 	bne.w	8005f6c <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7ff fb2f 	bl	800545a <get_fat>
 8005dfc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d801      	bhi.n	8005e08 <dir_next+0xe4>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e0d3      	b.n	8005fb0 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d101      	bne.n	8005e14 <dir_next+0xf0>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0cd      	b.n	8005fb0 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	f0c0 808e 	bcc.w	8005f46 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <dir_next+0x110>
 8005e30:	2304      	movs	r3, #4
 8005e32:	e0bd      	b.n	8005fb0 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7ff fdb6 	bl	80059b8 <create_chain>
 8005e4c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <dir_next+0x134>
 8005e54:	2307      	movs	r3, #7
 8005e56:	e0ab      	b.n	8005fb0 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <dir_next+0x13e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e0a6      	b.n	8005fb0 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d101      	bne.n	8005e6e <dir_next+0x14a>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0a0      	b.n	8005fb0 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff f988 	bl	800518c <sync_window>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <dir_next+0x162>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e094      	b.n	8005fb0 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9c:	895b      	ldrh	r3, [r3, #10]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	f7fe ff5b 	bl	8004d5c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb4:	681c      	ldr	r4, [r3, #0]
 8005eb6:	6979      	ldr	r1, [r7, #20]
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f7ff faaa 	bl	8005412 <clust2sect>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8005ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e021      	b.n	8005f10 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed8:	2201      	movs	r2, #1
 8005eda:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff f951 	bl	800518c <sync_window>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <dir_next+0x1d0>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e05d      	b.n	8005fb0 <dir_next+0x28c>
						dp->fs->winsect++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8005f00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f02:	3201      	adds	r2, #1
 8005f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f08:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f1c:	789b      	ldrb	r3, [r3, #2]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d3d2      	bcc.n	8005ecc <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1acb      	subs	r3, r1, r3
 8005f40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6979      	ldr	r1, [r7, #20]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fa58 	bl	8005412 <clust2sect>
 8005f62:	4602      	mov	r2, r0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f6a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f76:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f8e:	895b      	ldrh	r3, [r3, #10]
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f9c:	fb01 f202 	mul.w	r2, r1, r2
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	015b      	lsls	r3, r3, #5
 8005fa4:	4403      	add	r3, r0
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fac:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd90      	pop	{r4, r7, pc}

08005fb8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff fddf 	bl	8005b88 <dir_sdi>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d135      	bne.n	8006040 <dir_alloc+0x88>
		n = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7ff f920 	bl	8005230 <move_window>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d121      	bne.n	800603e <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2be5      	cmp	r3, #229	@ 0xe5
 8006006:	d006      	beq.n	8006016 <dir_alloc+0x5e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3301      	adds	r3, #1
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d102      	bne.n	800602a <dir_alloc+0x72>
 8006024:	e00c      	b.n	8006040 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800602a:	2101      	movs	r1, #1
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff fe79 	bl	8005d24 <dir_next>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0cd      	beq.n	8005fd8 <dir_alloc+0x20>
 800603c:	e000      	b.n	8006040 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800603e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b04      	cmp	r3, #4
 8006044:	d101      	bne.n	800604a <dir_alloc+0x92>
 8006046:	2307      	movs	r3, #7
 8006048:	73fb      	strb	r3, [r7, #15]
	return res;
 800604a:	7bfb      	ldrb	r3, [r7, #15]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	331b      	adds	r3, #27
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	b21a      	sxth	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	331a      	adds	r3, #26
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b21b      	sxth	r3, r3
 8006070:	4313      	orrs	r3, r2
 8006072:	b21b      	sxth	r3, r3
 8006074:	b29b      	uxth	r3, r3
 8006076:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d10f      	bne.n	80060a4 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	3315      	adds	r3, #21
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	b21a      	sxth	r2, r3
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	3314      	adds	r3, #20
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b21b      	sxth	r3, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	b21b      	sxth	r3, r3
 800609a:	b29b      	uxth	r3, r3
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

	return cl;
 80060a4:	68fb      	ldr	r3, [r7, #12]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	331a      	adds	r3, #26
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	331b      	adds	r3, #27
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	0c1a      	lsrs	r2, r3, #16
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3314      	adds	r3, #20
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3315      	adds	r3, #21
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	2301      	movs	r3, #1
 8006122:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006124:	4a2b      	ldr	r2, [pc, #172]	@ (80061d4 <cmp_lfn+0xd8>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4413      	add	r3, r2
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	b21a      	sxth	r2, r3
 8006138:	4926      	ldr	r1, [pc, #152]	@ (80061d4 <cmp_lfn+0xd8>)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	440b      	add	r3, r1
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	440b      	add	r3, r1
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b21b      	sxth	r3, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	b21b      	sxth	r3, r3
 800614e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006150:	89fb      	ldrh	r3, [r7, #14]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d019      	beq.n	800618a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006156:	89bb      	ldrh	r3, [r7, #12]
 8006158:	4618      	mov	r0, r3
 800615a:	f002 fe55 	bl	8008e08 <ff_wtoupper>
 800615e:	4603      	mov	r3, r0
 8006160:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2bfe      	cmp	r3, #254	@ 0xfe
 8006166:	d80e      	bhi.n	8006186 <cmp_lfn+0x8a>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	617a      	str	r2, [r7, #20]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f002 fe46 	bl	8008e08 <ff_wtoupper>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	89fb      	ldrh	r3, [r7, #14]
 8006182:	4293      	cmp	r3, r2
 8006184:	d008      	beq.n	8006198 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006186:	2300      	movs	r3, #0
 8006188:	e01f      	b.n	80061ca <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800618a:	89bb      	ldrh	r3, [r7, #12]
 800618c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006190:	4293      	cmp	r3, r2
 8006192:	d001      	beq.n	8006198 <cmp_lfn+0x9c>
 8006194:	2300      	movs	r3, #0
 8006196:	e018      	b.n	80061ca <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b0c      	cmp	r3, #12
 80061a2:	d9bf      	bls.n	8006124 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <cmp_lfn+0xcc>
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <cmp_lfn+0xcc>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <cmp_lfn+0xcc>
		return 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80061c8:	2301      	movs	r3, #1
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	08009970 	.word	0x08009970

080061d8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	@ 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	460b      	mov	r3, r1
 80061e8:	71fb      	strb	r3, [r7, #7]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	330d      	adds	r3, #13
 80061f2:	79ba      	ldrb	r2, [r7, #6]
 80061f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	330b      	adds	r3, #11
 80061fa:	220f      	movs	r2, #15
 80061fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	330c      	adds	r3, #12
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	331a      	adds	r3, #26
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	331b      	adds	r3, #27
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	4613      	mov	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	82fb      	strh	r3, [r7, #22]
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800622e:	8afb      	ldrh	r3, [r7, #22]
 8006230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <fit_lfn+0x70>
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	61fa      	str	r2, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006248:	4a1c      	ldr	r2, [pc, #112]	@ (80062bc <fit_lfn+0xe4>)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	4413      	add	r3, r2
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	8afa      	ldrh	r2, [r7, #22]
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	8afb      	ldrh	r3, [r7, #22]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	b299      	uxth	r1, r3
 8006262:	4a16      	ldr	r2, [pc, #88]	@ (80062bc <fit_lfn+0xe4>)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	4413      	add	r3, r2
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	4413      	add	r3, r2
 8006270:	b2ca      	uxtb	r2, r1
 8006272:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006274:	8afb      	ldrh	r3, [r7, #22]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <fit_lfn+0xa8>
 800627a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800627e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	3301      	adds	r3, #1
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d9d0      	bls.n	800622e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800628c:	8afb      	ldrh	r3, [r7, #22]
 800628e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006292:	4293      	cmp	r3, r2
 8006294:	d006      	beq.n	80062a4 <fit_lfn+0xcc>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d103      	bne.n	80062ac <fit_lfn+0xd4>
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	79fa      	ldrb	r2, [r7, #7]
 80062b0:	701a      	strb	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3724      	adds	r7, #36	@ 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	08009970 	.word	0x08009970

080062c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08c      	sub	sp, #48	@ 0x30
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80062ce:	220b      	movs	r2, #11
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7fe fd24 	bl	8004d20 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d92b      	bls.n	8006336 <gen_numname+0x76>
		sr = seq;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80062e2:	e022      	b.n	800632a <gen_numname+0x6a>
			wc = *lfn++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80062ee:	2300      	movs	r3, #0
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f2:	e017      	b.n	8006324 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	005a      	lsls	r2, r3, #1
 80062f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006302:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <gen_numname+0x5e>
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006318:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800631c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	3301      	adds	r3, #1
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d9e4      	bls.n	80062f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1d8      	bne.n	80062e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006336:	2307      	movs	r3, #7
 8006338:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	b2db      	uxtb	r3, r3
 8006344:	3330      	adds	r3, #48	@ 0x30
 8006346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800634a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800634e:	2b39      	cmp	r3, #57	@ 0x39
 8006350:	d904      	bls.n	800635c <gen_numname+0x9c>
 8006352:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006356:	3307      	adds	r3, #7
 8006358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	1e5a      	subs	r2, r3, #1
 8006360:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006362:	3330      	adds	r3, #48	@ 0x30
 8006364:	443b      	add	r3, r7
 8006366:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800636a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1df      	bne.n	800633a <gen_numname+0x7a>
	ns[i] = '~';
 800637a:	f107 0214 	add.w	r2, r7, #20
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	4413      	add	r3, r2
 8006382:	227e      	movs	r2, #126	@ 0x7e
 8006384:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	e002      	b.n	8006392 <gen_numname+0xd2>
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	3301      	adds	r3, #1
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
 8006392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	429a      	cmp	r2, r3
 8006398:	d205      	bcs.n	80063a6 <gen_numname+0xe6>
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d1f2      	bne.n	800638c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d807      	bhi.n	80063bc <gen_numname+0xfc>
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063b2:	3330      	adds	r3, #48	@ 0x30
 80063b4:	443b      	add	r3, r7
 80063b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80063ba:	e000      	b.n	80063be <gen_numname+0xfe>
 80063bc:	2120      	movs	r1, #32
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	460a      	mov	r2, r1
 80063ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	2b07      	cmp	r3, #7
 80063d0:	d9e9      	bls.n	80063a6 <gen_numname+0xe6>
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	3730      	adds	r7, #48	@ 0x30
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80063e8:	230b      	movs	r3, #11
 80063ea:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	0852      	lsrs	r2, r2, #1
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4313      	orrs	r3, r2
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	6079      	str	r1, [r7, #4]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	4413      	add	r3, r2
 8006402:	73fb      	strb	r3, [r7, #15]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	3b01      	subs	r3, #1
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ed      	bne.n	80063ec <sum_sfn+0x10>
	return sum;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006424:	2100      	movs	r1, #0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fbae 	bl	8005b88 <dir_sdi>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <dir_find+0x1e>
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	e0b8      	b.n	80065ac <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800643a:	23ff      	movs	r3, #255	@ 0xff
 800643c:	753b      	strb	r3, [r7, #20]
 800643e:	7d3b      	ldrb	r3, [r7, #20]
 8006440:	757b      	strb	r3, [r7, #21]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006448:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800644c:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7fe fee5 	bl	8005230 <move_window>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8097 	bne.w	80065a0 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006482:	7dbb      	ldrb	r3, [r7, #22]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <dir_find+0x72>
 8006488:	2304      	movs	r3, #4
 800648a:	75fb      	strb	r3, [r7, #23]
 800648c:	e08d      	b.n	80065aa <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	330b      	adds	r3, #11
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006498:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	2be5      	cmp	r3, #229	@ 0xe5
 800649e:	d007      	beq.n	80064b0 <dir_find+0x94>
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <dir_find+0xa6>
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d008      	beq.n	80064c2 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80064b0:	23ff      	movs	r3, #255	@ 0xff
 80064b2:	757b      	strb	r3, [r7, #21]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064be:	849a      	strh	r2, [r3, #36]	@ 0x24
 80064c0:	e063      	b.n	800658a <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b0f      	cmp	r3, #15
 80064c6:	d137      	bne.n	8006538 <dir_find+0x11c>
				if (dp->lfn) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d05a      	beq.n	800658a <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80064d4:	7dbb      	ldrb	r3, [r7, #22]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	7b5b      	ldrb	r3, [r3, #13]
 80064e2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80064e4:	7dbb      	ldrb	r3, [r7, #22]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ea:	75bb      	strb	r3, [r7, #22]
 80064ec:	7dbb      	ldrb	r3, [r7, #22]
 80064ee:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f6:	88da      	ldrh	r2, [r3, #6]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064fe:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006500:	7dba      	ldrb	r2, [r7, #22]
 8006502:	7d7b      	ldrb	r3, [r7, #21]
 8006504:	429a      	cmp	r2, r3
 8006506:	d114      	bne.n	8006532 <dir_find+0x116>
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	330d      	adds	r3, #13
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	7d3a      	ldrb	r2, [r7, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	d10e      	bne.n	8006532 <dir_find+0x116>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fdec 	bl	80060fc <cmp_lfn>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <dir_find+0x116>
 800652a:	7d7b      	ldrb	r3, [r7, #21]
 800652c:	3b01      	subs	r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	e000      	b.n	8006534 <dir_find+0x118>
 8006532:	23ff      	movs	r3, #255	@ 0xff
 8006534:	757b      	strb	r3, [r7, #21]
 8006536:	e028      	b.n	800658a <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006538:	7d7b      	ldrb	r3, [r7, #21]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d107      	bne.n	800654e <dir_find+0x132>
 800653e:	6938      	ldr	r0, [r7, #16]
 8006540:	f7ff ff4c 	bl	80063dc <sum_sfn>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	7d3b      	ldrb	r3, [r7, #20]
 800654a:	4293      	cmp	r3, r2
 800654c:	d02a      	beq.n	80065a4 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	330b      	adds	r3, #11
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <dir_find+0x15e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	220b      	movs	r2, #11
 800656c:	4619      	mov	r1, r3
 800656e:	6938      	ldr	r0, [r7, #16]
 8006570:	f7fe fc0e 	bl	8004d90 <mem_cmp>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800657a:	23ff      	movs	r3, #255	@ 0xff
 800657c:	757b      	strb	r3, [r7, #21]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006588:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800658a:	2100      	movs	r1, #0
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fbc9 	bl	8005d24 <dir_next>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f43f af58 	beq.w	800644e <dir_find+0x32>
 800659e:	e004      	b.n	80065aa <dir_find+0x18e>
		if (res != FR_OK) break;
 80065a0:	bf00      	nop
 80065a2:	e002      	b.n	80065aa <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80065a8:	bf00      	nop

	return res;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	@ 0x30
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	623b      	str	r3, [r7, #32]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	220c      	movs	r2, #12
 80065d6:	6a39      	ldr	r1, [r7, #32]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fba1 	bl	8004d20 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d03b      	beq.n	8006660 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	330b      	adds	r3, #11
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80065fc:	2301      	movs	r3, #1
 80065fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006600:	e013      	b.n	800662a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006602:	f107 010c 	add.w	r1, r7, #12
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	6a38      	ldr	r0, [r7, #32]
 800660c:	f7ff fe58 	bl	80062c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff03 	bl	800641c <dir_find>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800661c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	3301      	adds	r3, #1
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	2b63      	cmp	r3, #99	@ 0x63
 800662e:	d9e8      	bls.n	8006602 <dir_register+0x4e>
 8006630:	e000      	b.n	8006634 <dir_register+0x80>
			if (res != FR_OK) break;
 8006632:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	2b64      	cmp	r3, #100	@ 0x64
 8006638:	d101      	bne.n	800663e <dir_register+0x8a>
 800663a:	2307      	movs	r3, #7
 800663c:	e0d8      	b.n	80067f0 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800663e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006642:	2b04      	cmp	r3, #4
 8006644:	d002      	beq.n	800664c <dir_register+0x98>
 8006646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800664a:	e0d1      	b.n	80067f0 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	330b      	adds	r3, #11
 8006650:	7dfa      	ldrb	r2, [r7, #23]
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665a:	461a      	mov	r2, r3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d014      	beq.n	8006694 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800666a:	2300      	movs	r3, #0
 800666c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800666e:	e002      	b.n	8006676 <dir_register+0xc2>
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	3301      	adds	r3, #1
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f5      	bne.n	8006670 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	3319      	adds	r3, #25
 8006688:	4a5b      	ldr	r2, [pc, #364]	@ (80067f8 <dir_register+0x244>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	627b      	str	r3, [r7, #36]	@ 0x24
 8006692:	e001      	b.n	8006698 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006694:	2301      	movs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fc8c 	bl	8005fb8 <dir_alloc>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80066a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d15b      	bne.n	8006766 <dir_register+0x1b2>
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	3b01      	subs	r3, #1
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d055      	beq.n	8006766 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c0:	88db      	ldrh	r3, [r3, #6]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fa5c 	bl	8005b88 <dir_sdi>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80066d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d143      	bne.n	8006766 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fe78 	bl	80063dc <sum_sfn>
 80066ec:	4603      	mov	r3, r0
 80066ee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f7fe fd94 	bl	8005230 <move_window>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800670e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006712:	2b00      	cmp	r3, #0
 8006714:	d126      	bne.n	8006764 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671c:	6a18      	ldr	r0, [r3, #32]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006724:	6959      	ldr	r1, [r3, #20]
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	b2da      	uxtb	r2, r3
 800672a:	7efb      	ldrb	r3, [r7, #27]
 800672c:	f7ff fd54 	bl	80061d8 <fit_lfn>
				dp->fs->wflag = 1;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673c:	2201      	movs	r2, #1
 800673e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006740:	2100      	movs	r1, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff faee 	bl	8005d24 <dir_next>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800674e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <dir_register+0x1b2>
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	3b01      	subs	r3, #1
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1c6      	bne.n	80066f0 <dir_register+0x13c>
 8006762:	e000      	b.n	8006766 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006764:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006766:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800676a:	2b00      	cmp	r3, #0
 800676c:	d13e      	bne.n	80067ec <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fe fd55 	bl	8005230 <move_window>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800678c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d12b      	bne.n	80067ec <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	2220      	movs	r2, #32
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe fadb 	bl	8004d5c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ac:	6958      	ldr	r0, [r3, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	220b      	movs	r2, #11
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7fe fab1 	bl	8004d20 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	330b      	adds	r3, #11
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	330c      	adds	r3, #12
 80067d4:	f002 0218 	and.w	r2, r2, #24
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e8:	2201      	movs	r2, #1
 80067ea:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80067ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3730      	adds	r7, #48	@ 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	4ec4ec4f 	.word	0x4ec4ec4f

080067fc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	@ 0x28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	e002      	b.n	8006814 <create_name+0x18>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	3301      	adds	r3, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b2f      	cmp	r3, #47	@ 0x2f
 800681a:	d0f8      	beq.n	800680e <create_name+0x12>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b5c      	cmp	r3, #92	@ 0x5c
 8006822:	d0f4      	beq.n	800680e <create_name+0x12>
	lfn = dp->lfn;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	61ba      	str	r2, [r7, #24]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4413      	add	r3, r2
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006846:	2b1f      	cmp	r3, #31
 8006848:	d92f      	bls.n	80068aa <create_name+0xae>
 800684a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800684c:	2b2f      	cmp	r3, #47	@ 0x2f
 800684e:	d02c      	beq.n	80068aa <create_name+0xae>
 8006850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006852:	2b5c      	cmp	r3, #92	@ 0x5c
 8006854:	d029      	beq.n	80068aa <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2bfe      	cmp	r3, #254	@ 0xfe
 800685a:	d901      	bls.n	8006860 <create_name+0x64>
			return FR_INVALID_NAME;
 800685c:	2306      	movs	r3, #6
 800685e:	e186      	b.n	8006b6e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006862:	b2db      	uxtb	r3, r3
 8006864:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f002 fa92 	bl	8008d94 <ff_convert>
 8006870:	4603      	mov	r3, r0
 8006872:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <create_name+0x82>
 800687a:	2306      	movs	r3, #6
 800687c:	e177      	b.n	8006b6e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800687e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006880:	2b7f      	cmp	r3, #127	@ 0x7f
 8006882:	d809      	bhi.n	8006898 <create_name+0x9c>
 8006884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006886:	4619      	mov	r1, r3
 8006888:	488e      	ldr	r0, [pc, #568]	@ (8006ac4 <create_name+0x2c8>)
 800688a:	f7fe faa7 	bl	8004ddc <chk_chr>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006894:	2306      	movs	r3, #6
 8006896:	e16a      	b.n	8006b6e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	617a      	str	r2, [r7, #20]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80068a8:	e7c5      	b.n	8006836 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	441a      	add	r2, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80068b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068b6:	2b1f      	cmp	r3, #31
 80068b8:	d801      	bhi.n	80068be <create_name+0xc2>
 80068ba:	2304      	movs	r3, #4
 80068bc:	e000      	b.n	80068c0 <create_name+0xc4>
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80068c4:	e011      	b.n	80068ea <create_name+0xee>
		w = lfn[di - 1];
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80068cc:	3b01      	subs	r3, #1
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80068d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d002      	beq.n	80068e4 <create_name+0xe8>
 80068de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80068e2:	d106      	bne.n	80068f2 <create_name+0xf6>
		di--;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1ea      	bne.n	80068c6 <create_name+0xca>
 80068f0:	e000      	b.n	80068f4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80068f2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <create_name+0x102>
 80068fa:	2306      	movs	r3, #6
 80068fc:	e137      	b.n	8006b6e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	2200      	movs	r2, #0
 8006908:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	220b      	movs	r2, #11
 8006914:	2120      	movs	r1, #32
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fa20 	bl	8004d5c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e002      	b.n	8006928 <create_name+0x12c>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	3301      	adds	r3, #1
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	2b20      	cmp	r3, #32
 8006934:	d0f5      	beq.n	8006922 <create_name+0x126>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	2b2e      	cmp	r3, #46	@ 0x2e
 8006942:	d0ee      	beq.n	8006922 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <create_name+0x162>
 800694a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800694e:	f043 0303 	orr.w	r3, r3, #3
 8006952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006956:	e002      	b.n	800695e <create_name+0x162>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	3b01      	subs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <create_name+0x17c>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800696a:	3b01      	subs	r3, #1
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	2b2e      	cmp	r3, #46	@ 0x2e
 8006976:	d1ef      	bne.n	8006958 <create_name+0x15c>

	b = i = 0; ni = 8;
 8006978:	2300      	movs	r3, #0
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	2300      	movs	r3, #0
 800697e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006982:	2308      	movs	r3, #8
 8006984:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	61ba      	str	r2, [r7, #24]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006996:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8091 	beq.w	8006ac0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800699e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d006      	beq.n	80069b2 <create_name+0x1b6>
 80069a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80069a8:	d10a      	bne.n	80069c0 <create_name+0x1c4>
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d006      	beq.n	80069c0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80069b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069b6:	f043 0303 	orr.w	r3, r3, #3
 80069ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80069be:	e07e      	b.n	8006abe <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80069c0:	6a3a      	ldr	r2, [r7, #32]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d203      	bcs.n	80069d0 <create_name+0x1d4>
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d123      	bne.n	8006a18 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b0b      	cmp	r3, #11
 80069d4:	d106      	bne.n	80069e4 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80069d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069da:	f043 0303 	orr.w	r3, r3, #3
 80069de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80069e2:	e076      	b.n	8006ad2 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d005      	beq.n	80069f8 <create_name+0x1fc>
 80069ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069f0:	f043 0303 	orr.w	r3, r3, #3
 80069f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d867      	bhi.n	8006ad0 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	2308      	movs	r3, #8
 8006a06:	623b      	str	r3, [r7, #32]
 8006a08:	230b      	movs	r3, #11
 8006a0a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006a16:	e052      	b.n	8006abe <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006a18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a1c:	d914      	bls.n	8006a48 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f002 f9b6 	bl	8008d94 <ff_convert>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <create_name+0x240>
 8006a32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a34:	3b80      	subs	r3, #128	@ 0x80
 8006a36:	4a24      	ldr	r2, [pc, #144]	@ (8006ac8 <create_name+0x2cc>)
 8006a38:	5cd3      	ldrb	r3, [r2, r3]
 8006a3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a40:	f043 0302 	orr.w	r3, r3, #2
 8006a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006a48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <create_name+0x262>
 8006a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a50:	4619      	mov	r1, r3
 8006a52:	481e      	ldr	r0, [pc, #120]	@ (8006acc <create_name+0x2d0>)
 8006a54:	f7fe f9c2 	bl	8004ddc <chk_chr>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d008      	beq.n	8006a70 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a5e:	235f      	movs	r3, #95	@ 0x5f
 8006a60:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a66:	f043 0303 	orr.w	r3, r3, #3
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a6e:	e01b      	b.n	8006aa8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a72:	2b40      	cmp	r3, #64	@ 0x40
 8006a74:	d909      	bls.n	8006a8a <create_name+0x28e>
 8006a76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a78:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a7a:	d806      	bhi.n	8006a8a <create_name+0x28e>
					b |= 2;
 8006a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006a88:	e00e      	b.n	8006aa8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a8c:	2b60      	cmp	r3, #96	@ 0x60
 8006a8e:	d90b      	bls.n	8006aa8 <create_name+0x2ac>
 8006a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a92:	2b7a      	cmp	r3, #122	@ 0x7a
 8006a94:	d808      	bhi.n	8006aa8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006a96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aa4:	3b20      	subs	r3, #32
 8006aa6:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	6239      	str	r1, [r7, #32]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006abe:	e762      	b.n	8006986 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006ac0:	bf00      	nop
 8006ac2:	e006      	b.n	8006ad2 <create_name+0x2d6>
 8006ac4:	08009868 	.word	0x08009868
 8006ac8:	080098f0 	.word	0x080098f0
 8006acc:	08009874 	.word	0x08009874
			if (si > di) break;			/* No extension */
 8006ad0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2be5      	cmp	r3, #229	@ 0xe5
 8006ade:	d105      	bne.n	8006aec <create_name+0x2f0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2205      	movs	r2, #5
 8006aea:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d104      	bne.n	8006afc <create_name+0x300>
 8006af2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006afc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b00:	f003 030c 	and.w	r3, r3, #12
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	d005      	beq.n	8006b14 <create_name+0x318>
 8006b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d105      	bne.n	8006b20 <create_name+0x324>
		cf |= NS_LFN;
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d117      	bne.n	8006b5c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d105      	bne.n	8006b44 <create_name+0x348>
 8006b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b3c:	f043 0310 	orr.w	r3, r3, #16
 8006b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b48:	f003 030c 	and.w	r3, r3, #12
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d105      	bne.n	8006b5c <create_name+0x360>
 8006b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b54:	f043 0308 	orr.w	r3, r3, #8
 8006b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	330b      	adds	r3, #11
 8006b66:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006b6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b6c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3728      	adds	r7, #40	@ 0x28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop

08006b78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b88:	d003      	beq.n	8006b92 <follow_path+0x1a>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b90:	d102      	bne.n	8006b98 <follow_path+0x20>
		path++;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b1f      	cmp	r3, #31
 8006baa:	d80c      	bhi.n	8006bc6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006bac:	2100      	movs	r1, #0
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fe ffea 	bl	8005b88 <dir_sdi>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6153      	str	r3, [r2, #20]
 8006bc4:	e049      	b.n	8006c5a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fe16 	bl	80067fc <create_name>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d13a      	bne.n	8006c50 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fc1e 	bl	800641c <dir_find>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	7adb      	ldrb	r3, [r3, #11]
 8006bee:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d12b      	bne.n	8006c54 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d126      	bne.n	8006c54 <follow_path+0xdc>
 8006c06:	2305      	movs	r3, #5
 8006c08:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006c0a:	e023      	b.n	8006c54 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d120      	bne.n	8006c58 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	330b      	adds	r3, #11
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006c2e:	2305      	movs	r3, #5
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e012      	b.n	8006c5a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fa08 	bl	8006054 <ld_clust>
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c4e:	e7ba      	b.n	8006bc6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <follow_path+0xe2>
				break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c58:	bf00      	nop
		}
	}

	return res;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d031      	beq.n	8006cde <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	e002      	b.n	8006c88 <get_ldnumber+0x24>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	3301      	adds	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b1f      	cmp	r3, #31
 8006c8e:	d903      	bls.n	8006c98 <get_ldnumber+0x34>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c96:	d1f4      	bne.n	8006c82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c9e:	d11c      	bne.n	8006cda <get_ldnumber+0x76>
			tp = *path;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	60fa      	str	r2, [r7, #12]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	3b30      	subs	r3, #48	@ 0x30
 8006cb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b09      	cmp	r3, #9
 8006cb6:	d80e      	bhi.n	8006cd6 <get_ldnumber+0x72>
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d10a      	bne.n	8006cd6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d107      	bne.n	8006cd6 <get_ldnumber+0x72>
					vol = (int)i;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	e002      	b.n	8006ce0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cde:	693b      	ldr	r3, [r7, #16]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr
	...

08006cec <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	711a      	strb	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d06:	461a      	mov	r2, r3
 8006d08:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fe fa8d 	bl	8005230 <move_window>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <check_fs+0x34>
		return 3;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e04a      	b.n	8006db6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d26:	3301      	adds	r3, #1
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	b21a      	sxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006d34:	b21b      	sxth	r3, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b21b      	sxth	r3, r3
 8006d3a:	4a21      	ldr	r2, [pc, #132]	@ (8006dc0 <check_fs+0xd4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d001      	beq.n	8006d44 <check_fs+0x58>
		return 2;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e038      	b.n	8006db6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3336      	adds	r3, #54	@ 0x36
 8006d48:	3303      	adds	r3, #3
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	061a      	lsls	r2, r3, #24
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3336      	adds	r3, #54	@ 0x36
 8006d52:	3302      	adds	r3, #2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3336      	adds	r3, #54	@ 0x36
 8006d5e:	3301      	adds	r3, #1
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	4313      	orrs	r3, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d72:	4a14      	ldr	r2, [pc, #80]	@ (8006dc4 <check_fs+0xd8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d101      	bne.n	8006d7c <check_fs+0x90>
		return 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e01c      	b.n	8006db6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3352      	adds	r3, #82	@ 0x52
 8006d80:	3303      	adds	r3, #3
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	061a      	lsls	r2, r3, #24
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3352      	adds	r3, #82	@ 0x52
 8006d8a:	3302      	adds	r3, #2
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3352      	adds	r3, #82	@ 0x52
 8006d96:	3301      	adds	r3, #1
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006daa:	4a06      	ldr	r2, [pc, #24]	@ (8006dc4 <check_fs+0xd8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d101      	bne.n	8006db4 <check_fs+0xc8>
		return 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <check_fs+0xca>

	return 1;
 8006db4:	2301      	movs	r3, #1
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	ffffaa55 	.word	0xffffaa55
 8006dc4:	00544146 	.word	0x00544146

08006dc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b096      	sub	sp, #88	@ 0x58
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f7ff ff41 	bl	8006c64 <get_ldnumber>
 8006de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da01      	bge.n	8006dee <find_volume+0x26>
 8006dea:	230b      	movs	r3, #11
 8006dec:	e311      	b.n	8007412 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dee:	4a98      	ldr	r2, [pc, #608]	@ (8007050 <find_volume+0x288>)
 8006df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <find_volume+0x3a>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	e307      	b.n	8007412 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e06:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01c      	beq.n	8006e4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fd fee1 	bl	8004be4 <disk_status>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10c      	bne.n	8006e4e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <find_volume+0x82>
 8006e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e46:	230a      	movs	r3, #10
 8006e48:	e2e3      	b.n	8007412 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e2e1      	b.n	8007412 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd fed3 	bl	8004c18 <disk_initialize>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006e78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e84:	2303      	movs	r3, #3
 8006e86:	e2c4      	b.n	8007412 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <find_volume+0xd6>
 8006e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006e9a:	230a      	movs	r3, #10
 8006e9c:	e2b9      	b.n	8007412 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea4:	7858      	ldrb	r0, [r3, #1]
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eac:	330a      	adds	r3, #10
 8006eae:	461a      	mov	r2, r3
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	f7fd ff17 	bl	8004ce4 <disk_ioctl>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec2:	895b      	ldrh	r3, [r3, #10]
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec8:	d306      	bcc.n	8006ed8 <find_volume+0x110>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed0:	895b      	ldrh	r3, [r3, #10]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed6:	d901      	bls.n	8006edc <find_volume+0x114>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e29a      	b.n	8007412 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006ee0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ee2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ee4:	f7ff ff02 	bl	8006cec <check_fs>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006eee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d153      	bne.n	8006f9e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006efa:	e028      	b.n	8006f4e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006f06:	4413      	add	r3, r2
 8006f08:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <find_volume+0x172>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	330b      	adds	r3, #11
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	061a      	lsls	r2, r3, #24
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	330a      	adds	r3, #10
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	431a      	orrs	r2, r3
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	3309      	adds	r3, #9
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f32:	3208      	adds	r2, #8
 8006f34:	7812      	ldrb	r2, [r2, #0]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	e000      	b.n	8006f3c <find_volume+0x174>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	3358      	adds	r3, #88	@ 0x58
 8006f42:	443b      	add	r3, r7
 8006f44:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d9d3      	bls.n	8006efc <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006f54:	2300      	movs	r3, #0
 8006f56:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <find_volume+0x19c>
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f60:	3b01      	subs	r3, #1
 8006f62:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	3358      	adds	r3, #88	@ 0x58
 8006f6a:	443b      	add	r3, r7
 8006f6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f70:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <find_volume+0x1bc>
 8006f78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f7c:	f7ff feb6 	bl	8006cec <check_fs>
 8006f80:	4603      	mov	r3, r0
 8006f82:	e000      	b.n	8006f86 <find_volume+0x1be>
 8006f84:	2302      	movs	r3, #2
 8006f86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <find_volume+0x1d6>
 8006f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f94:	3301      	adds	r3, #1
 8006f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d9e2      	bls.n	8006f64 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d101      	bne.n	8006faa <find_volume+0x1e2>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e233      	b.n	8007412 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006faa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <find_volume+0x1ee>
 8006fb2:	230d      	movs	r3, #13
 8006fb4:	e22d      	b.n	8007412 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	7b1b      	ldrb	r3, [r3, #12]
 8006fba:	021b      	lsls	r3, r3, #8
 8006fbc:	b21a      	sxth	r2, r3
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	7adb      	ldrb	r3, [r3, #11]
 8006fc2:	b21b      	sxth	r3, r3
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b21a      	sxth	r2, r3
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fce:	895b      	ldrh	r3, [r3, #10]
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d001      	beq.n	8006fda <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006fd6:	230d      	movs	r3, #13
 8006fd8:	e21b      	b.n	8007412 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	7ddb      	ldrb	r3, [r3, #23]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	b21a      	sxth	r2, r3
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	7d9b      	ldrb	r3, [r3, #22]
 8006fe6:	b21b      	sxth	r3, r3
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d112      	bne.n	800701c <find_volume+0x254>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006ffc:	061a      	lsls	r2, r3, #24
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	431a      	orrs	r2, r3
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	4313      	orrs	r3, r2
 8007012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007014:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007018:	4313      	orrs	r3, r2
 800701a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007022:	461a      	mov	r2, r3
 8007024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007026:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	7c1a      	ldrb	r2, [r3, #16]
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007032:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703a:	78db      	ldrb	r3, [r3, #3]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d009      	beq.n	8007054 <find_volume+0x28c>
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007046:	78db      	ldrb	r3, [r3, #3]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d003      	beq.n	8007054 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800704c:	230d      	movs	r3, #13
 800704e:	e1e0      	b.n	8007412 <find_volume+0x64a>
 8007050:	2000222c 	.word	0x2000222c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705a:	78db      	ldrb	r3, [r3, #3]
 800705c:	461a      	mov	r2, r3
 800705e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007060:	fb02 f303 	mul.w	r3, r2, r3
 8007064:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	7b5a      	ldrb	r2, [r3, #13]
 800706a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007070:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007078:	789b      	ldrb	r3, [r3, #2]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <find_volume+0x2d0>
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007084:	789b      	ldrb	r3, [r3, #2]
 8007086:	461a      	mov	r2, r3
 8007088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800708e:	789b      	ldrb	r3, [r3, #2]
 8007090:	3b01      	subs	r3, #1
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007098:	230d      	movs	r3, #13
 800709a:	e1ba      	b.n	8007412 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	7c9b      	ldrb	r3, [r3, #18]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	b21a      	sxth	r2, r3
 80070a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a6:	7c5b      	ldrb	r3, [r3, #17]
 80070a8:	b21b      	sxth	r3, r3
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b21b      	sxth	r3, r3
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070b6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070be:	891b      	ldrh	r3, [r3, #8]
 80070c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070c6:	8952      	ldrh	r2, [r2, #10]
 80070c8:	0952      	lsrs	r2, r2, #5
 80070ca:	b292      	uxth	r2, r2
 80070cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d0:	fb01 f202 	mul.w	r2, r1, r2
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80070dc:	230d      	movs	r3, #13
 80070de:	e198      	b.n	8007412 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80070e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e2:	7d1b      	ldrb	r3, [r3, #20]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	b21a      	sxth	r2, r3
 80070e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ea:	7cdb      	ldrb	r3, [r3, #19]
 80070ec:	b21b      	sxth	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b21b      	sxth	r3, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80070f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d112      	bne.n	8007122 <find_volume+0x35a>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007102:	061a      	lsls	r2, r3, #24
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	431a      	orrs	r2, r3
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	4313      	orrs	r3, r2
 8007118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800711a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800711e:	4313      	orrs	r3, r2
 8007120:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	7bdb      	ldrb	r3, [r3, #15]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	b21a      	sxth	r2, r3
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	7b9b      	ldrb	r3, [r3, #14]
 800712e:	b21b      	sxth	r3, r3
 8007130:	4313      	orrs	r3, r2
 8007132:	b21b      	sxth	r3, r3
 8007134:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007136:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <find_volume+0x378>
 800713c:	230d      	movs	r3, #13
 800713e:	e168      	b.n	8007412 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007140:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007144:	4413      	add	r3, r2
 8007146:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007148:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800714c:	8911      	ldrh	r1, [r2, #8]
 800714e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007150:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007154:	8952      	ldrh	r2, [r2, #10]
 8007156:	0952      	lsrs	r2, r2, #5
 8007158:	b292      	uxth	r2, r2
 800715a:	fbb1 f2f2 	udiv	r2, r1, r2
 800715e:	b292      	uxth	r2, r2
 8007160:	4413      	add	r3, r2
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	429a      	cmp	r2, r3
 800716a:	d201      	bcs.n	8007170 <find_volume+0x3a8>
 800716c:	230d      	movs	r3, #13
 800716e:	e150      	b.n	8007412 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007178:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800717c:	7892      	ldrb	r2, [r2, #2]
 800717e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <find_volume+0x3c6>
 800718a:	230d      	movs	r3, #13
 800718c:	e141      	b.n	8007412 <find_volume+0x64a>
	fmt = FS_FAT12;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800719a:	4293      	cmp	r3, r2
 800719c:	d902      	bls.n	80071a4 <find_volume+0x3dc>
 800719e:	2302      	movs	r3, #2
 80071a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d902      	bls.n	80071b4 <find_volume+0x3ec>
 80071ae:	2303      	movs	r3, #3
 80071b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	3302      	adds	r3, #2
 80071b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071be:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071c6:	461a      	mov	r2, r3
 80071c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ca:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80071cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80071ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d0:	4413      	add	r3, r2
 80071d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071d8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80071da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	4413      	add	r3, r2
 80071e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071e6:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 80071e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d124      	bne.n	800723a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071f6:	891b      	ldrh	r3, [r3, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <find_volume+0x438>
 80071fc:	230d      	movs	r3, #13
 80071fe:	e108      	b.n	8007412 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007202:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007206:	061a      	lsls	r2, r3, #24
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	431a      	orrs	r2, r3
 8007212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007214:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	4313      	orrs	r3, r2
 800721c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800721e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007222:	4313      	orrs	r3, r2
 8007224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007226:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800722a:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	647b      	str	r3, [r7, #68]	@ 0x44
 8007238:	e02b      	b.n	8007292 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007240:	891b      	ldrh	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <find_volume+0x482>
 8007246:	230d      	movs	r3, #13
 8007248:	e0e3      	b.n	8007412 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007250:	6a1a      	ldr	r2, [r3, #32]
 8007252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007254:	4413      	add	r3, r2
 8007256:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007258:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800725c:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800725e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007262:	2b02      	cmp	r3, #2
 8007264:	d105      	bne.n	8007272 <find_volume+0x4aa>
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	e00e      	b.n	8007290 <find_volume+0x4c8>
 8007272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	4613      	mov	r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	4413      	add	r3, r2
 8007280:	085a      	lsrs	r2, r3, #1
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007290:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a0:	895b      	ldrh	r3, [r3, #10]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072a6:	440b      	add	r3, r1
 80072a8:	3b01      	subs	r3, #1
 80072aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072ac:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80072b0:	8949      	ldrh	r1, [r1, #10]
 80072b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d201      	bcs.n	80072be <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80072ba:	230d      	movs	r3, #13
 80072bc:	e0a9      	b.n	8007412 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80072be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c4:	461a      	mov	r2, r3
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ca:	6113      	str	r3, [r2, #16]
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80072da:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e2:	2280      	movs	r2, #128	@ 0x80
 80072e4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80072e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d17a      	bne.n	80073e4 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	b21a      	sxth	r2, r3
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072fe:	b21b      	sxth	r3, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	b21b      	sxth	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d16d      	bne.n	80073e4 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800730a:	3301      	adds	r3, #1
 800730c:	4619      	mov	r1, r3
 800730e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007310:	f7fd ff8e 	bl	8005230 <move_window>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d164      	bne.n	80073e4 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007320:	2200      	movs	r2, #0
 8007322:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	b21a      	sxth	r2, r3
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007334:	b21b      	sxth	r3, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	b21b      	sxth	r3, r3
 800733a:	4a38      	ldr	r2, [pc, #224]	@ (800741c <find_volume+0x654>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d151      	bne.n	80073e4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	78db      	ldrb	r3, [r3, #3]
 8007344:	061a      	lsls	r2, r3, #24
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	789b      	ldrb	r3, [r3, #2]
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	431a      	orrs	r2, r3
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	4313      	orrs	r3, r2
 8007356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007358:	7812      	ldrb	r2, [r2, #0]
 800735a:	4313      	orrs	r3, r2
 800735c:	4a30      	ldr	r2, [pc, #192]	@ (8007420 <find_volume+0x658>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d140      	bne.n	80073e4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8007368:	061a      	lsls	r2, r3, #24
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	431a      	orrs	r2, r3
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	4313      	orrs	r3, r2
 800737e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007380:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8007384:	4313      	orrs	r3, r2
 8007386:	4a27      	ldr	r2, [pc, #156]	@ (8007424 <find_volume+0x65c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d12b      	bne.n	80073e4 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8007392:	061a      	lsls	r2, r3, #24
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	431a      	orrs	r2, r3
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	4313      	orrs	r3, r2
 80073a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 80073ae:	4313      	orrs	r3, r2
 80073b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80073b6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 80073be:	061a      	lsls	r2, r3, #24
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	431a      	orrs	r2, r3
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	4313      	orrs	r3, r2
 80073d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073d6:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80073da:	4313      	orrs	r3, r2
 80073dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80073e2:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80073e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ea:	461a      	mov	r2, r3
 80073ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073f0:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80073f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <find_volume+0x660>)
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <find_volume+0x660>)
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <find_volume+0x660>)
 8007400:	881a      	ldrh	r2, [r3, #0]
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007408:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800740a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800740c:	f7fd fe94 	bl	8005138 <clear_lock>
#endif

	return FR_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3758      	adds	r7, #88	@ 0x58
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	ffffaa55 	.word	0xffffaa55
 8007420:	41615252 	.word	0x41615252
 8007424:	61417272 	.word	0x61417272
 8007428:	20002230 	.word	0x20002230

0800742c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d02a      	beq.n	8007494 <validate+0x68>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d024      	beq.n	8007494 <validate+0x68>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01b      	beq.n	8007494 <validate+0x68>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007468:	88da      	ldrh	r2, [r3, #6]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007470:	889b      	ldrh	r3, [r3, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d10e      	bne.n	8007494 <validate+0x68>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd fbad 	bl	8004be4 <disk_status>
 800748a:	4603      	mov	r3, r0
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007494:	2309      	movs	r3, #9
 8007496:	e000      	b.n	800749a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80074b6:	f107 0310 	add.w	r3, r7, #16
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fbd2 	bl	8006c64 <get_ldnumber>
 80074c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	da01      	bge.n	80074cc <f_mount+0x28>
 80074c8:	230b      	movs	r3, #11
 80074ca:	e02f      	b.n	800752c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074cc:	4a19      	ldr	r2, [pc, #100]	@ (8007534 <f_mount+0x90>)
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80074dc:	69b8      	ldr	r0, [r7, #24]
 80074de:	f7fd fe2b 	bl	8005138 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	490d      	ldr	r1, [pc, #52]	@ (8007534 <f_mount+0x90>)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <f_mount+0x6e>
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d001      	beq.n	8007516 <f_mount+0x72>
 8007512:	2300      	movs	r3, #0
 8007514:	e00a      	b.n	800752c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007516:	f107 0108 	add.w	r1, r7, #8
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	2200      	movs	r2, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fc51 	bl	8006dc8 <find_volume>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800752a:	7dfb      	ldrb	r3, [r7, #23]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	2000222c 	.word	0x2000222c

08007538 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007546:	f843 0c4c 	str.w	r0, [r3, #-76]
 800754a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800754e:	f843 1c50 	str.w	r1, [r3, #-80]
 8007552:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007556:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800755a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800755e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <f_open+0x32>
 8007566:	2309      	movs	r3, #9
 8007568:	e2f3      	b.n	8007b52 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 800756a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800756e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007576:	461a      	mov	r2, r3
 8007578:	2300      	movs	r3, #0
 800757a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800757c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007580:	461a      	mov	r2, r3
 8007582:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007586:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007592:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007596:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	f107 0118 	add.w	r1, r7, #24
 80075a4:	3910      	subs	r1, #16
 80075a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80075aa:	3b18      	subs	r3, #24
 80075ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fc09 	bl	8006dc8 <find_volume>
 80075b6:	4603      	mov	r3, r0
 80075b8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80075bc:	f102 0217 	add.w	r2, r2, #23
 80075c0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80075c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075c6:	f103 0317 	add.w	r3, r3, #23
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 82bb 	bne.w	8007b48 <f_open+0x610>
		INIT_BUF(dj);
 80075d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80075d6:	461a      	mov	r2, r3
 80075d8:	f107 0318 	add.w	r3, r7, #24
 80075dc:	3b04      	subs	r3, #4
 80075de:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 80075e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80075e6:	461a      	mov	r2, r3
 80075e8:	4bd3      	ldr	r3, [pc, #844]	@ (8007938 <f_open+0x400>)
 80075ea:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80075ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80075f2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80075f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80075fa:	3b18      	subs	r3, #24
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff faba 	bl	8006b78 <follow_path>
 8007604:	4603      	mov	r3, r0
 8007606:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800760a:	f102 0217 	add.w	r2, r2, #23
 800760e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007610:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007614:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8007618:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800761c:	f102 0210 	add.w	r2, r2, #16
 8007620:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007622:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007626:	f103 0317 	add.w	r3, r3, #23
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d124      	bne.n	800767a <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8007630:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007634:	f103 0310 	add.w	r3, r3, #16
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <f_open+0x114>
				res = FR_INVALID_NAME;
 800763e:	2306      	movs	r3, #6
 8007640:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007644:	f102 0217 	add.w	r2, r2, #23
 8007648:	7013      	strb	r3, [r2, #0]
 800764a:	e016      	b.n	800767a <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800764c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007650:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf8c      	ite	hi
 8007658:	2301      	movhi	r3, #1
 800765a:	2300      	movls	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007664:	3b18      	subs	r3, #24
 8007666:	4611      	mov	r1, r2
 8007668:	4618      	mov	r0, r3
 800766a:	f7fd fbd1 	bl	8004e10 <chk_lock>
 800766e:	4603      	mov	r3, r0
 8007670:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007674:	f102 0217 	add.w	r2, r2, #23
 8007678:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800767a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800767e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007682:	f003 031c 	and.w	r3, r3, #28
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 813c 	beq.w	8007904 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 800768c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007690:	f103 0317 	add.w	r3, r3, #23
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d02e      	beq.n	80076f8 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800769a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800769e:	f103 0317 	add.w	r3, r3, #23
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d112      	bne.n	80076ce <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076a8:	f7fd fc22 	bl	8004ef0 <enq_lock>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <f_open+0x18a>
 80076b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80076b6:	3b18      	subs	r3, #24
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe ff7b 	bl	80065b4 <dir_register>
 80076be:	4603      	mov	r3, r0
 80076c0:	e000      	b.n	80076c4 <f_open+0x18c>
 80076c2:	2312      	movs	r3, #18
 80076c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076c8:	f102 0217 	add.w	r2, r2, #23
 80076cc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80076d2:	461a      	mov	r2, r3
 80076d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80076d8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80076e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80076e8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80076ec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076f0:	f102 0210 	add.w	r2, r2, #16
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e01f      	b.n	8007738 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076f8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80076fc:	f103 0310 	add.w	r3, r3, #16
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330b      	adds	r3, #11
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 0311 	and.w	r3, r3, #17
 800770a:	2b00      	cmp	r3, #0
 800770c:	d006      	beq.n	800771c <f_open+0x1e4>
					res = FR_DENIED;
 800770e:	2307      	movs	r3, #7
 8007710:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007714:	f102 0217 	add.w	r2, r2, #23
 8007718:	7013      	strb	r3, [r2, #0]
 800771a:	e00d      	b.n	8007738 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800771c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007720:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <f_open+0x200>
						res = FR_EXIST;
 800772c:	2308      	movs	r3, #8
 800772e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007732:	f102 0217 	add.w	r2, r2, #23
 8007736:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007738:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800773c:	f103 0317 	add.w	r3, r3, #23
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 8113 	bne.w	800796e <f_open+0x436>
 8007748:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800774c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 810a 	beq.w	800796e <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 800775a:	f7fd f9e1 	bl	8004b20 <get_fattime>
 800775e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007762:	f103 030c 	add.w	r3, r3, #12
 8007766:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007768:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800776c:	f103 0310 	add.w	r3, r3, #16
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330e      	adds	r3, #14
 8007774:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007778:	f102 020c 	add.w	r2, r2, #12
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007786:	f103 030c 	add.w	r3, r3, #12
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29a      	uxth	r2, r3
 8007792:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007796:	f103 0310 	add.w	r3, r3, #16
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330f      	adds	r3, #15
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077a6:	f103 030c 	add.w	r3, r3, #12
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	0c1a      	lsrs	r2, r3, #16
 80077ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077b2:	f103 0310 	add.w	r3, r3, #16
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3310      	adds	r3, #16
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077c2:	f103 030c 	add.w	r3, r3, #12
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	0e1a      	lsrs	r2, r3, #24
 80077ca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077ce:	f103 0310 	add.w	r3, r3, #16
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3311      	adds	r3, #17
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80077da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077de:	f103 0310 	add.w	r3, r3, #16
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330b      	adds	r3, #11
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80077ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077ee:	f103 0310 	add.w	r3, r3, #16
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	331c      	adds	r3, #28
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80077fe:	f103 0310 	add.w	r3, r3, #16
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	331d      	adds	r3, #29
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800780e:	f103 0310 	add.w	r3, r3, #16
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	331e      	adds	r3, #30
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800781e:	f103 0310 	add.w	r3, r3, #16
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	331f      	adds	r3, #31
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800782a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800782e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8007832:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007836:	f102 0210 	add.w	r2, r2, #16
 800783a:	6811      	ldr	r1, [r2, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fc09 	bl	8006054 <ld_clust>
 8007842:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007846:	f103 0308 	add.w	r3, r3, #8
 800784a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800784c:	2100      	movs	r1, #0
 800784e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007852:	f103 0310 	add.w	r3, r3, #16
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	f7fe fc2a 	bl	80060b0 <st_clust>
				dj.fs->wflag = 1;
 800785c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007860:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8007864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007868:	2201      	movs	r2, #1
 800786a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800786c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007870:	f103 0308 	add.w	r3, r3, #8
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d079      	beq.n	800796e <f_open+0x436>
					dw = dj.fs->winsect;
 800787a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800787e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8007882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800788c:	f102 020c 	add.w	r2, r2, #12
 8007890:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007892:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007896:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800789a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800789e:	f102 0208 	add.w	r2, r2, #8
 80078a2:	6811      	ldr	r1, [r2, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe f826 	bl	80058f6 <remove_chain>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80078b0:	f102 0217 	add.w	r2, r2, #23
 80078b4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80078b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80078ba:	f103 0317 	add.w	r3, r3, #23
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d154      	bne.n	800796e <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80078c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80078c8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80078cc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80078d0:	f103 0308 	add.w	r3, r3, #8
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078dc:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80078de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80078e2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80078e6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80078ea:	f102 020c 	add.w	r2, r2, #12
 80078ee:	6811      	ldr	r1, [r2, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fd fc9d 	bl	8005230 <move_window>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80078fc:	f102 0217 	add.w	r2, r2, #23
 8007900:	7013      	strb	r3, [r2, #0]
 8007902:	e034      	b.n	800796e <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007904:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007908:	f103 0317 	add.w	r3, r3, #23
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d12d      	bne.n	800796e <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007912:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007916:	f103 0310 	add.w	r3, r3, #16
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	330b      	adds	r3, #11
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <f_open+0x404>
					res = FR_NO_FILE;
 8007928:	2304      	movs	r3, #4
 800792a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800792e:	f102 0217 	add.w	r2, r2, #23
 8007932:	7013      	strb	r3, [r2, #0]
 8007934:	e01b      	b.n	800796e <f_open+0x436>
 8007936:	bf00      	nop
 8007938:	2000224c 	.word	0x2000224c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800793c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007940:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d010      	beq.n	800796e <f_open+0x436>
 800794c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007950:	f103 0310 	add.w	r3, r3, #16
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	330b      	adds	r3, #11
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <f_open+0x436>
						res = FR_DENIED;
 8007962:	2307      	movs	r3, #7
 8007964:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007968:	f102 0217 	add.w	r2, r2, #23
 800796c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800796e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007972:	f103 0317 	add.w	r3, r3, #23
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d155      	bne.n	8007a28 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800797c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007980:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <f_open+0x46a>
				mode |= FA__WRITTEN;
 800798c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007990:	461a      	mov	r2, r3
 8007992:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007996:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800799a:	f043 0320 	orr.w	r3, r3, #32
 800799e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80079a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079a6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80079aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80079b4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80079b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079bc:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80079be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079c2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80079c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ca:	461a      	mov	r2, r3
 80079cc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80079d0:	f103 0310 	add.w	r3, r3, #16
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079d8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079dc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	bf8c      	ite	hi
 80079e4:	2301      	movhi	r3, #1
 80079e6:	2300      	movls	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80079f0:	3b18      	subs	r3, #24
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fa9f 	bl	8004f38 <inc_lock>
 80079fa:	4602      	mov	r2, r0
 80079fc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a00:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a08:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007a0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a0e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d105      	bne.n	8007a28 <f_open+0x4f0>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007a22:	f102 0217 	add.w	r2, r2, #23
 8007a26:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007a28:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007a2c:	f103 0317 	add.w	r3, r3, #23
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 8088 	bne.w	8007b48 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8007a38:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a3c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a44:	461a      	mov	r2, r3
 8007a46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a4a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a4e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007a50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a54:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007a60:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a64:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8007a68:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007a6c:	f102 0210 	add.w	r2, r2, #16
 8007a70:	6811      	ldr	r1, [r2, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe faee 	bl	8006054 <ld_clust>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007a7e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a86:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007a88:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007a8c:	f103 0310 	add.w	r3, r3, #16
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	331f      	adds	r3, #31
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	061a      	lsls	r2, r3, #24
 8007a98:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007a9c:	f103 0310 	add.w	r3, r3, #16
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	331e      	adds	r3, #30
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007aae:	f103 0310 	add.w	r3, r3, #16
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	331d      	adds	r3, #29
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007ac0:	f102 0210 	add.w	r2, r2, #16
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	321c      	adds	r2, #28
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8007ad0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007ad4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ad8:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007ada:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007ade:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007aec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007af0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007afe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007b02:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007b10:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007b14:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8007b18:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8007b1c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007b20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b24:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007b26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007b2a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b38:	88da      	ldrh	r2, [r3, #6]
 8007b3a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007b3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b46:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007b48:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007b4c:	f103 0317 	add.w	r3, r3, #23
 8007b50:	781b      	ldrb	r3, [r3, #0]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop

08007b60 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08c      	sub	sp, #48	@ 0x30
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7ff fc57 	bl	800742c <validate>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007b82:	7ffb      	ldrb	r3, [r7, #31]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <f_read+0x2c>
 8007b88:	7ffb      	ldrb	r3, [r7, #31]
 8007b8a:	e1cd      	b.n	8007f28 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b92:	79db      	ldrb	r3, [r3, #7]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b9e:	79db      	ldrb	r3, [r3, #7]
 8007ba0:	e1c2      	b.n	8007f28 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba8:	799b      	ldrb	r3, [r3, #6]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007bb2:	2307      	movs	r3, #7
 8007bb4:	e1b8      	b.n	8007f28 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	f240 81a5 	bls.w	8007f1e <f_read+0x3be>
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007bd8:	e1a1      	b.n	8007f1e <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bee:	8952      	ldrh	r2, [r2, #10]
 8007bf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bf4:	fb01 f202 	mul.w	r2, r1, r2
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 8140 	bne.w	8007e80 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c14:	8952      	ldrh	r2, [r2, #10]
 8007c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c28:	789b      	ldrb	r3, [r3, #2]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	4013      	ands	r3, r2
 8007c30:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d143      	bne.n	8007cc0 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c4e:	e01c      	b.n	8007c8a <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7fd ff4e 	bl	8005b08 <clmt_clust>
 8007c6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007c6e:	e00c      	b.n	8007c8a <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7fd fbe9 	bl	800545a <get_fat>
 8007c88:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d806      	bhi.n	8007c9e <f_read+0x13e>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c96:	2202      	movs	r2, #2
 8007c98:	71da      	strb	r2, [r3, #7]
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e144      	b.n	8007f28 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d106      	bne.n	8007cb4 <f_read+0x154>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cac:	2201      	movs	r2, #1
 8007cae:	71da      	strb	r2, [r3, #7]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e139      	b.n	8007f28 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f7fd fb9d 	bl	8005412 <clust2sect>
 8007cd8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <f_read+0x18e>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	71da      	strb	r2, [r3, #7]
 8007cea:	2302      	movs	r3, #2
 8007cec:	e11c      	b.n	8007f28 <f_read+0x3c8>
			sect += csect;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d02:	895b      	ldrh	r3, [r3, #10]
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d066      	beq.n	8007de2 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007d14:	7dfa      	ldrb	r2, [r7, #23]
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	4413      	add	r3, r2
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d26:	7892      	ldrb	r2, [r2, #2]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d90a      	bls.n	8007d42 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d38:	789b      	ldrb	r3, [r3, #2]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d4e:	7858      	ldrb	r0, [r3, #1]
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	6a39      	ldr	r1, [r7, #32]
 8007d56:	f7fc ff85 	bl	8004c64 <disk_read>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d66:	2201      	movs	r2, #1
 8007d68:	71da      	strb	r2, [r3, #7]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e0dc      	b.n	8007f28 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d74:	799b      	ldrb	r3, [r3, #6]
 8007d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d024      	beq.n	8007dc8 <f_read+0x268>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d91b      	bls.n	8007dc8 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d96:	699a      	ldr	r2, [r3, #24]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007da2:	6812      	ldr	r2, [r2, #0]
 8007da4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007da8:	8952      	ldrh	r2, [r2, #10]
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	6a3a      	ldr	r2, [r7, #32]
 8007db0:	18d0      	adds	r0, r2, r3
 8007db2:	68f9      	ldr	r1, [r7, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dc0:	895b      	ldrh	r3, [r3, #10]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7fc ffac 	bl	8004d20 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dd4:	895b      	ldrh	r3, [r3, #10]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8007de0:	e085      	b.n	8007eee <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d041      	beq.n	8007e74 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007df6:	799b      	ldrb	r3, [r3, #6]
 8007df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d023      	beq.n	8007e48 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e0c:	7858      	ldrb	r0, [r3, #1]
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f7fc ff43 	bl	8004ca4 <disk_write>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d006      	beq.n	8007e32 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	71da      	strb	r2, [r3, #7]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e07a      	b.n	8007f28 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e38:	799b      	ldrb	r3, [r3, #6]
 8007e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e46:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e54:	7858      	ldrb	r0, [r3, #1]
 8007e56:	68f9      	ldr	r1, [r7, #12]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	f7fc ff02 	bl	8004c64 <disk_read>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d006      	beq.n	8007e74 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	71da      	strb	r2, [r3, #7]
 8007e70:	2301      	movs	r3, #1
 8007e72:	e059      	b.n	8007f28 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8c:	895b      	ldrh	r3, [r3, #10]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ea4:	8952      	ldrh	r2, [r2, #10]
 8007ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eaa:	fb01 f202 	mul.w	r2, r1, r2
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	1ac3      	subs	r3, r0, r3
 8007eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8007eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d901      	bls.n	8007ec0 <f_read+0x360>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ed4:	8952      	ldrh	r2, [r2, #10]
 8007ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eda:	fb01 f202 	mul.w	r2, r1, r2
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6a38      	ldr	r0, [r7, #32]
 8007eea:	f7fc ff19 	bl	8004d20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	4413      	add	r3, r2
 8007ef4:	623b      	str	r3, [r7, #32]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	4413      	add	r3, r2
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f08:	6093      	str	r3, [r2, #8]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f10:	441a      	add	r2, r3
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f ae5a 	bne.w	8007bda <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3730      	adds	r7, #48	@ 0x30
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	@ 0x28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fa6f 	bl	800742c <validate>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <f_write+0x2c>
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	e21e      	b.n	800839a <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f62:	79db      	ldrb	r3, [r3, #7]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f6e:	79db      	ldrb	r3, [r3, #7]
 8007f70:	e213      	b.n	800839a <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f78:	799b      	ldrb	r3, [r3, #6]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007f82:	2307      	movs	r3, #7
 8007f84:	e209      	b.n	800839a <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	f080 81d9 	bcs.w	8008352 <f_write+0x422>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007fa4:	e1d5      	b.n	8008352 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fba:	8952      	ldrh	r2, [r2, #10]
 8007fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc0:	fb01 f202 	mul.w	r2, r1, r2
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f040 8169 	bne.w	800829e <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fe0:	8952      	ldrh	r2, [r2, #10]
 8007fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff4:	789b      	ldrb	r3, [r3, #2]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007ffe:	7dbb      	ldrb	r3, [r7, #22]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d15f      	bne.n	80080c4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d111      	bne.n	8008034 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	d126      	bne.n	800806e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f7fd fcc4 	bl	80059b8 <create_chain>
 8008030:	6278      	str	r0, [r7, #36]	@ 0x24
 8008032:	e01c      	b.n	800806e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800803a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d009      	beq.n	8008054 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	4619      	mov	r1, r3
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7fd fd5c 	bl	8005b08 <clmt_clust>
 8008050:	6278      	str	r0, [r7, #36]	@ 0x24
 8008052:	e00c      	b.n	800806e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	4619      	mov	r1, r3
 8008066:	4610      	mov	r0, r2
 8008068:	f7fd fca6 	bl	80059b8 <create_chain>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8173 	beq.w	800835c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	2b01      	cmp	r3, #1
 800807a:	d106      	bne.n	800808a <f_write+0x15a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008082:	2202      	movs	r2, #2
 8008084:	71da      	strb	r2, [r3, #7]
 8008086:	2302      	movs	r3, #2
 8008088:	e187      	b.n	800839a <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d106      	bne.n	80080a0 <f_write+0x170>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008098:	2201      	movs	r2, #1
 800809a:	71da      	strb	r2, [r3, #7]
 800809c:	2301      	movs	r3, #1
 800809e:	e17c      	b.n	800839a <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080a6:	461a      	mov	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <f_write+0x194>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080be:	461a      	mov	r2, r3
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ca:	799b      	ldrb	r3, [r3, #6]
 80080cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d023      	beq.n	800811c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e0:	7858      	ldrb	r0, [r3, #1]
 80080e2:	68f9      	ldr	r1, [r7, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	2301      	movs	r3, #1
 80080ee:	f7fc fdd9 	bl	8004ca4 <disk_write>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d006      	beq.n	8008106 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080fe:	2201      	movs	r2, #1
 8008100:	71da      	strb	r2, [r3, #7]
 8008102:	2301      	movs	r3, #1
 8008104:	e149      	b.n	800839a <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800810c:	799b      	ldrb	r3, [r3, #6]
 800810e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800811a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fd f96f 	bl	8005412 <clust2sect>
 8008134:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <f_write+0x21a>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008142:	2202      	movs	r2, #2
 8008144:	71da      	strb	r2, [r3, #7]
 8008146:	2302      	movs	r3, #2
 8008148:	e127      	b.n	800839a <f_write+0x46a>
			sect += csect;
 800814a:	7dbb      	ldrb	r3, [r7, #22]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800815e:	895b      	ldrh	r3, [r3, #10]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	fbb3 f3f2 	udiv	r3, r3, r2
 8008168:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d069      	beq.n	8008244 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008170:	7dba      	ldrb	r2, [r7, #22]
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008182:	7892      	ldrb	r2, [r2, #2]
 8008184:	4293      	cmp	r3, r2
 8008186:	d90a      	bls.n	800819e <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008194:	789b      	ldrb	r3, [r3, #2]
 8008196:	461a      	mov	r2, r3
 8008198:	7dbb      	ldrb	r3, [r7, #22]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081aa:	7858      	ldrb	r0, [r3, #1]
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	69b9      	ldr	r1, [r7, #24]
 80081b2:	f7fc fd77 	bl	8004ca4 <disk_write>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081c2:	2201      	movs	r2, #1
 80081c4:	71da      	strb	r2, [r3, #7]
 80081c6:	2301      	movs	r3, #1
 80081c8:	e0e7      	b.n	800839a <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d926      	bls.n	800822a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081f6:	8952      	ldrh	r2, [r2, #10]
 80081f8:	fb02 f303 	mul.w	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	18d1      	adds	r1, r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800820c:	895b      	ldrh	r3, [r3, #10]
 800820e:	461a      	mov	r2, r3
 8008210:	f7fc fd86 	bl	8004d20 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821a:	799b      	ldrb	r3, [r3, #6]
 800821c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008220:	b2da      	uxtb	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008228:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008236:	895b      	ldrh	r3, [r3, #10]
 8008238:	461a      	mov	r2, r3
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	fb02 f303 	mul.w	r3, r2, r3
 8008240:	623b      	str	r3, [r7, #32]
				continue;
 8008242:	e06e      	b.n	8008322 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	429a      	cmp	r2, r3
 8008250:	d01f      	beq.n	8008292 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	429a      	cmp	r2, r3
 8008264:	d215      	bcs.n	8008292 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008272:	7858      	ldrb	r0, [r3, #1]
 8008274:	68f9      	ldr	r1, [r7, #12]
 8008276:	2301      	movs	r3, #1
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	f7fc fcf3 	bl	8004c64 <disk_read>
 800827e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008280:	2b00      	cmp	r3, #0
 8008282:	d006      	beq.n	8008292 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800828a:	2201      	movs	r2, #1
 800828c:	71da      	strb	r2, [r3, #7]
 800828e:	2301      	movs	r3, #1
 8008290:	e083      	b.n	800839a <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008298:	461a      	mov	r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082aa:	895b      	ldrh	r3, [r3, #10]
 80082ac:	4618      	mov	r0, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082c2:	8952      	ldrh	r2, [r2, #10]
 80082c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80082c8:	fb01 f202 	mul.w	r2, r1, r2
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	1ac3      	subs	r3, r0, r3
 80082d0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80082d2:	6a3a      	ldr	r2, [r7, #32]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d901      	bls.n	80082de <f_write+0x3ae>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082f2:	8952      	ldrh	r2, [r2, #10]
 80082f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80082f8:	fb01 f202 	mul.w	r2, r1, r2
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	69b9      	ldr	r1, [r7, #24]
 8008306:	4618      	mov	r0, r3
 8008308:	f7fc fd0a 	bl	8004d20 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008312:	799b      	ldrb	r3, [r3, #6]
 8008314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008318:	b2da      	uxtb	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008320:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	4413      	add	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	4413      	add	r3, r2
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800833c:	6093      	str	r3, [r2, #8]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	441a      	add	r2, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f47f ae26 	bne.w	8007fa6 <f_write+0x76>
 800835a:	e000      	b.n	800835e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800835c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	429a      	cmp	r2, r3
 8008370:	d907      	bls.n	8008382 <f_write+0x452>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008380:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008388:	799b      	ldrb	r3, [r3, #6]
 800838a:	f043 0320 	orr.w	r3, r3, #32
 800838e:	b2da      	uxtb	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008396:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3728      	adds	r7, #40	@ 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff f83e 	bl	800742c <validate>
 80083b0:	4603      	mov	r3, r0
 80083b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 80bc 	bne.w	8008534 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083c2:	799b      	ldrb	r3, [r3, #6]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80b3 	beq.w	8008534 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083d4:	799b      	ldrb	r3, [r3, #6]
 80083d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01e      	beq.n	800841c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ea:	7858      	ldrb	r0, [r3, #1]
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	2301      	movs	r3, #1
 80083f8:	f7fc fc54 	bl	8004ca4 <disk_write>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008402:	2301      	movs	r3, #1
 8008404:	e097      	b.n	8008536 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840c:	799b      	ldrb	r3, [r3, #6]
 800840e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008412:	b2da      	uxtb	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800841a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f7fc fefe 	bl	8005230 <move_window>
 8008434:	4603      	mov	r3, r0
 8008436:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d17a      	bne.n	8008534 <f_sync+0x192>
				dir = fp->dir_ptr;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	330b      	adds	r3, #11
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	330b      	adds	r3, #11
 8008452:	f042 0220 	orr.w	r2, r2, #32
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	331c      	adds	r3, #28
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	b29b      	uxth	r3, r3
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	b29a      	uxth	r2, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	331d      	adds	r3, #29
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	0c1a      	lsrs	r2, r3, #16
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	331e      	adds	r3, #30
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	0e1a      	lsrs	r2, r3, #24
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	331f      	adds	r3, #31
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6938      	ldr	r0, [r7, #16]
 80084b0:	f7fd fdfe 	bl	80060b0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80084b4:	f7fc fb34 	bl	8004b20 <get_fattime>
 80084b8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3316      	adds	r3, #22
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	0a1b      	lsrs	r3, r3, #8
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	3317      	adds	r3, #23
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	0c1a      	lsrs	r2, r3, #16
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3318      	adds	r3, #24
 80084dc:	b2d2      	uxtb	r2, r2
 80084de:	701a      	strb	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	0e1a      	lsrs	r2, r3, #24
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	3319      	adds	r3, #25
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3312      	adds	r3, #18
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3313      	adds	r3, #19
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008502:	799b      	ldrb	r3, [r3, #6]
 8008504:	f023 0320 	bic.w	r3, r3, #32
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008510:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800851e:	2201      	movs	r2, #1
 8008520:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f7fc feb2 	bl	8005294 <sync_fs>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008534:	7dfb      	ldrb	r3, [r7, #23]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff ff2b 	bl	80083a2 <f_sync>
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d119      	bne.n	800858a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fe ff68 	bl	800742c <validate>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d111      	bne.n	800858a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800856c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856e:	4618      	mov	r0, r3
 8008570:	f7fc fd9e 	bl	80050b0 <dec_lock>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008584:	461a      	mov	r2, r3
 8008586:	2300      	movs	r3, #0
 8008588:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b090      	sub	sp, #64	@ 0x40
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe ff44 	bl	800742c <validate>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80085aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <f_lseek+0x24>
 80085b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80085b6:	e2da      	b.n	8008b6e <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085be:	79db      	ldrb	r3, [r3, #7]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ca:	79db      	ldrb	r3, [r3, #7]
 80085cc:	e2cf      	b.n	8008b6e <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8124 	beq.w	8008824 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d16c      	bne.n	80086be <f_lseek+0x12a>
			tbl = fp->cltbl;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	2302      	movs	r3, #2
 80085fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	2b00      	cmp	r3, #0
 800860a:	d046      	beq.n	800869a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	2300      	movs	r3, #0
 8008612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	3302      	adds	r3, #2
 8008618:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008620:	3301      	adds	r3, #1
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800862e:	4618      	mov	r0, r3
 8008630:	f7fc ff13 	bl	800545a <get_fat>
 8008634:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	2b01      	cmp	r3, #1
 800863a:	d806      	bhi.n	800864a <f_lseek+0xb6>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008642:	2202      	movs	r2, #2
 8008644:	71da      	strb	r2, [r3, #7]
 8008646:	2302      	movs	r3, #2
 8008648:	e291      	b.n	8008b6e <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008650:	d106      	bne.n	8008660 <f_lseek+0xcc>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008658:	2201      	movs	r2, #1
 800865a:	71da      	strb	r2, [r3, #7]
 800865c:	2301      	movs	r3, #1
 800865e:	e286      	b.n	8008b6e <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008666:	429a      	cmp	r2, r3
 8008668:	d0d7      	beq.n	800861a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800866a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	429a      	cmp	r2, r3
 8008670:	d809      	bhi.n	8008686 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	627a      	str	r2, [r7, #36]	@ 0x24
 8008678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	1d1a      	adds	r2, r3, #4
 8008680:	627a      	str	r2, [r7, #36]	@ 0x24
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008696:	429a      	cmp	r2, r3
 8008698:	d3b8      	bcc.n	800860c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086a4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80086a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d803      	bhi.n	80086b6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	e259      	b.n	8008b6a <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80086b6:	2311      	movs	r3, #17
 80086b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80086bc:	e255      	b.n	8008b6a <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d904      	bls.n	80086d6 <f_lseek+0x142>
				ofs = fp->fsize;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086dc:	461a      	mov	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8240 	beq.w	8008b6a <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7fd fa09 	bl	8005b08 <clmt_clust>
 80086f6:	4602      	mov	r2, r0
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086fe:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fc fe7d 	bl	8005412 <clust2sect>
 8008718:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d106      	bne.n	800872e <f_lseek+0x19a>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008726:	2202      	movs	r2, #2
 8008728:	71da      	strb	r2, [r3, #7]
 800872a:	2302      	movs	r3, #2
 800872c:	e21f      	b.n	8008b6e <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	3b01      	subs	r3, #1
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800873e:	8952      	ldrh	r2, [r2, #10]
 8008740:	fbb3 f3f2 	udiv	r3, r3, r2
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008750:	7892      	ldrb	r2, [r2, #2]
 8008752:	3a01      	subs	r2, #1
 8008754:	4013      	ands	r3, r2
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	4413      	add	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008770:	8952      	ldrh	r2, [r2, #10]
 8008772:	fbb3 f1f2 	udiv	r1, r3, r2
 8008776:	fb01 f202 	mul.w	r2, r1, r2
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 81f4 	beq.w	8008b6a <f_lseek+0x5d6>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	f000 81ec 	beq.w	8008b6a <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008798:	799b      	ldrb	r3, [r3, #6]
 800879a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d023      	beq.n	80087ea <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087ae:	7858      	ldrb	r0, [r3, #1]
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	2301      	movs	r3, #1
 80087bc:	f7fc fa72 	bl	8004ca4 <disk_write>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087cc:	2201      	movs	r2, #1
 80087ce:	71da      	strb	r2, [r3, #7]
 80087d0:	2301      	movs	r3, #1
 80087d2:	e1cc      	b.n	8008b6e <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087da:	799b      	ldrb	r3, [r3, #6]
 80087dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087e8:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f6:	7858      	ldrb	r0, [r3, #1]
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	2301      	movs	r3, #1
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	f7fc fa31 	bl	8004c64 <disk_read>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d006      	beq.n	8008816 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800880e:	2201      	movs	r2, #1
 8008810:	71da      	strb	r2, [r3, #7]
 8008812:	2301      	movs	r3, #1
 8008814:	e1ab      	b.n	8008b6e <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800881c:	461a      	mov	r2, r3
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	6193      	str	r3, [r2, #24]
 8008822:	e1a2      	b.n	8008b6a <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d90c      	bls.n	800884c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008838:	799b      	ldrb	r3, [r3, #6]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008860:	461a      	mov	r2, r3
 8008862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008864:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8100 	beq.w	8008a6e <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	fb02 f303 	mul.w	r3, r2, r3
 8008890:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d021      	beq.n	80088dc <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	1e5a      	subs	r2, r3, #1
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	fbb2 f2f3 	udiv	r2, r2, r3
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	1e59      	subs	r1, r3, #1
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d315      	bcc.n	80088dc <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	425b      	negs	r3, r3
 80088b8:	4013      	ands	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80088c0:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088da:	e031      	b.n	8008940 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d123      	bne.n	8008934 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fd f85e 	bl	80059b8 <create_chain>
 80088fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80088fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008900:	2b01      	cmp	r3, #1
 8008902:	d106      	bne.n	8008912 <f_lseek+0x37e>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800890a:	2202      	movs	r2, #2
 800890c:	71da      	strb	r2, [r3, #7]
 800890e:	2302      	movs	r3, #2
 8008910:	e12d      	b.n	8008b6e <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008918:	d106      	bne.n	8008928 <f_lseek+0x394>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008920:	2201      	movs	r2, #1
 8008922:	71da      	strb	r2, [r3, #7]
 8008924:	2301      	movs	r3, #1
 8008926:	e122      	b.n	8008b6e <f_lseek+0x5da>
					fp->sclust = clst;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800892e:	461a      	mov	r2, r3
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800893a:	461a      	mov	r2, r3
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8008940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8093 	beq.w	8008a6e <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8008948:	e052      	b.n	80089f0 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008950:	799b      	ldrb	r3, [r3, #6]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008964:	4618      	mov	r0, r3
 8008966:	f7fd f827 	bl	80059b8 <create_chain>
 800896a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800896c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10b      	bne.n	800898a <f_lseek+0x3f6>
							ofs = bcs; break;
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	e03f      	b.n	80089f8 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008982:	4618      	mov	r0, r3
 8008984:	f7fc fd69 	bl	800545a <get_fat>
 8008988:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800898a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008990:	d106      	bne.n	80089a0 <f_lseek+0x40c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008998:	2201      	movs	r2, #1
 800899a:	71da      	strb	r2, [r3, #7]
 800899c:	2301      	movs	r3, #1
 800899e:	e0e6      	b.n	8008b6e <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d909      	bls.n	80089ba <f_lseek+0x426>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d306      	bcc.n	80089c8 <f_lseek+0x434>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089c0:	2202      	movs	r2, #2
 80089c2:	71da      	strb	r2, [r3, #7]
 80089c4:	2302      	movs	r3, #2
 80089c6:	e0d2      	b.n	8008b6e <f_lseek+0x5da>
					fp->clust = clst;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ce:	461a      	mov	r2, r3
 80089d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d2:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80089e6:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d8a8      	bhi.n	800894a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	4413      	add	r3, r2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a0a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a18:	895b      	ldrh	r3, [r3, #10]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a22:	fb01 f202 	mul.w	r2, r1, r2
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d020      	beq.n	8008a6e <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fc fceb 	bl	8005412 <clust2sect>
 8008a3c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <f_lseek+0x4be>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	71da      	strb	r2, [r3, #7]
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e08d      	b.n	8008b6e <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a5e:	895b      	ldrh	r3, [r3, #10]
 8008a60:	461a      	mov	r2, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a6a:	4413      	add	r3, r2
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a82:	8952      	ldrh	r2, [r2, #10]
 8008a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a88:	fb01 f202 	mul.w	r2, r1, r2
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d04e      	beq.n	8008b30 <f_lseek+0x59c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d047      	beq.n	8008b30 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aa6:	799b      	ldrb	r3, [r3, #6]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d023      	beq.n	8008af8 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008abc:	7858      	ldrb	r0, [r3, #1]
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ac6:	699a      	ldr	r2, [r3, #24]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f7fc f8eb 	bl	8004ca4 <disk_write>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ada:	2201      	movs	r2, #1
 8008adc:	71da      	strb	r2, [r3, #7]
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e045      	b.n	8008b6e <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ae8:	799b      	ldrb	r3, [r3, #6]
 8008aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008af6:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b04:	7858      	ldrb	r0, [r3, #1]
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b0c:	f7fc f8aa 	bl	8004c64 <disk_read>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d006      	beq.n	8008b24 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	71da      	strb	r2, [r3, #7]
 8008b20:	2301      	movs	r3, #1
 8008b22:	e024      	b.n	8008b6e <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d912      	bls.n	8008b6a <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008b52:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b5a:	799b      	ldrb	r3, [r3, #6]
 8008b5c:	f043 0320 	orr.w	r3, r3, #32
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b68:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3740      	adds	r7, #64	@ 0x40
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b088      	sub	sp, #32
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008b8a:	e01c      	b.n	8008bc6 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008b8c:	f107 0310 	add.w	r3, r7, #16
 8008b90:	f107 0114 	add.w	r1, r7, #20
 8008b94:	2201      	movs	r2, #1
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fe ffe2 	bl	8007b60 <f_read>
		if (rc != 1) break;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d117      	bne.n	8008bd2 <f_gets+0x5c>
		c = s[0];
 8008ba2:	7d3b      	ldrb	r3, [r7, #20]
 8008ba4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b0d      	cmp	r3, #13
 8008baa:	d00b      	beq.n	8008bc4 <f_gets+0x4e>
		*p++ = c;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	61ba      	str	r2, [r7, #24]
 8008bb2:	7dfa      	ldrb	r2, [r7, #23]
 8008bb4:	701a      	strb	r2, [r3, #0]
		n++;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b0a      	cmp	r3, #10
 8008bc0:	d009      	beq.n	8008bd6 <f_gets+0x60>
 8008bc2:	e000      	b.n	8008bc6 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008bc4:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	dbdd      	blt.n	8008b8c <f_gets+0x16>
 8008bd0:	e002      	b.n	8008bd8 <f_gets+0x62>
		if (rc != 1) break;
 8008bd2:	bf00      	nop
 8008bd4:	e000      	b.n	8008bd8 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008bd6:	bf00      	nop
	}
	*p = 0;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <f_gets+0x72>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	e000      	b.n	8008bea <f_gets+0x74>
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3720      	adds	r7, #32
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	2b0a      	cmp	r3, #10
 8008c02:	d103      	bne.n	8008c0c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008c04:	210d      	movs	r1, #13
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fff3 	bl	8008bf2 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	db25      	blt.n	8008c64 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	60fa      	str	r2, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	78fa      	ldrb	r2, [r7, #3]
 8008c24:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b3c      	cmp	r3, #60	@ 0x3c
 8008c2a:	dd12      	ble.n	8008c52 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f103 010c 	add.w	r1, r3, #12
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	f107 0308 	add.w	r3, r7, #8
 8008c3c:	f7ff f978 	bl	8007f30 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d101      	bne.n	8008c4c <putc_bfd+0x5a>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e001      	b.n	8008c50 <putc_bfd+0x5e>
 8008c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c50:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	609a      	str	r2, [r3, #8]
 8008c62:	e000      	b.n	8008c66 <putc_bfd+0x74>
	if (i < 0) return;
 8008c64:	bf00      	nop
}
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008c6c:	b590      	push	{r4, r7, lr}
 8008c6e:	b097      	sub	sp, #92	@ 0x5c
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	613b      	str	r3, [r7, #16]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8008c82:	e009      	b.n	8008c98 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	781a      	ldrb	r2, [r3, #0]
 8008c8c:	f107 030c 	add.w	r3, r7, #12
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff ffad 	bl	8008bf2 <putc_bfd>
	while (*str)			/* Put the string */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f1      	bne.n	8008c84 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	db15      	blt.n	8008cd2 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	461c      	mov	r4, r3
 8008cac:	f107 0208 	add.w	r2, r7, #8
 8008cb0:	f107 030c 	add.w	r3, r7, #12
 8008cb4:	f103 010c 	add.w	r1, r3, #12
 8008cb8:	4613      	mov	r3, r2
 8008cba:	4622      	mov	r2, r4
 8008cbc:	f7ff f938 	bl	8007f30 <f_write>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d105      	bne.n	8008cd2 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d101      	bne.n	8008cd2 <f_puts+0x66>
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	e001      	b.n	8008cd6 <f_puts+0x6a>
	return EOF;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	375c      	adds	r7, #92	@ 0x5c
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd90      	pop	{r4, r7, pc}
	...

08008ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008cf8:	7a5b      	ldrb	r3, [r3, #9]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d831      	bhi.n	8008d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d00:	4b1b      	ldr	r3, [pc, #108]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d02:	7a5b      	ldrb	r3, [r3, #9]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008d0e:	4b18      	ldr	r3, [pc, #96]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d10:	7a5b      	ldrb	r3, [r3, #9]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	4a16      	ldr	r2, [pc, #88]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008d1e:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d20:	7a5b      	ldrb	r3, [r3, #9]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b12      	ldr	r3, [pc, #72]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	79fa      	ldrb	r2, [r7, #7]
 8008d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d2e:	4b10      	ldr	r3, [pc, #64]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d30:	7a5b      	ldrb	r3, [r3, #9]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	b2d1      	uxtb	r1, r2
 8008d38:	4a0d      	ldr	r2, [pc, #52]	@ (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d3a:	7251      	strb	r1, [r2, #9]
 8008d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d3e:	7dbb      	ldrb	r3, [r7, #22]
 8008d40:	3330      	adds	r3, #48	@ 0x30
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	223a      	movs	r2, #58	@ 0x3a
 8008d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3302      	adds	r3, #2
 8008d54:	222f      	movs	r2, #47	@ 0x2f
 8008d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3303      	adds	r3, #3
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr
 8008d70:	2000244c 	.word	0x2000244c

08008d74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff ffac 	bl	8008ce0 <FATFS_LinkDriverEx>
 8008d88:	4603      	mov	r3, r0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008da4:	d802      	bhi.n	8008dac <ff_convert+0x18>
		c = chr;
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	81fb      	strh	r3, [r7, #14]
 8008daa:	e025      	b.n	8008df8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	2bff      	cmp	r3, #255	@ 0xff
 8008db6:	d805      	bhi.n	8008dc4 <ff_convert+0x30>
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	3b80      	subs	r3, #128	@ 0x80
 8008dbc:	4a11      	ldr	r2, [pc, #68]	@ (8008e04 <ff_convert+0x70>)
 8008dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc2:	e000      	b.n	8008dc6 <ff_convert+0x32>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	81fb      	strh	r3, [r7, #14]
 8008dc8:	e016      	b.n	8008df8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008dca:	2300      	movs	r3, #0
 8008dcc:	81fb      	strh	r3, [r7, #14]
 8008dce:	e009      	b.n	8008de4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008dd0:	89fb      	ldrh	r3, [r7, #14]
 8008dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8008e04 <ff_convert+0x70>)
 8008dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d006      	beq.n	8008dec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008dde:	89fb      	ldrh	r3, [r7, #14]
 8008de0:	3301      	adds	r3, #1
 8008de2:	81fb      	strh	r3, [r7, #14]
 8008de4:	89fb      	ldrh	r3, [r7, #14]
 8008de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008de8:	d9f2      	bls.n	8008dd0 <ff_convert+0x3c>
 8008dea:	e000      	b.n	8008dee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008dec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	3380      	adds	r3, #128	@ 0x80
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008df8:	89fb      	ldrh	r3, [r7, #14]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr
 8008e04:	08009980 	.word	0x08009980

08008e08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	e002      	b.n	8008e1e <ff_wtoupper+0x16>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8008e5c <ff_wtoupper+0x54>)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d006      	beq.n	8008e38 <ff_wtoupper+0x30>
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e5c <ff_wtoupper+0x54>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d1ef      	bne.n	8008e18 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008e38:	4a08      	ldr	r2, [pc, #32]	@ (8008e5c <ff_wtoupper+0x54>)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <ff_wtoupper+0x46>
 8008e44:	4a06      	ldr	r2, [pc, #24]	@ (8008e60 <ff_wtoupper+0x58>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e4c:	e000      	b.n	8008e50 <ff_wtoupper+0x48>
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	08009a80 	.word	0x08009a80
 8008e60:	08009c60 	.word	0x08009c60

08008e64 <siprintf>:
 8008e64:	b40e      	push	{r1, r2, r3}
 8008e66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e6a:	b500      	push	{lr}
 8008e6c:	b09c      	sub	sp, #112	@ 0x70
 8008e6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e70:	9002      	str	r0, [sp, #8]
 8008e72:	9006      	str	r0, [sp, #24]
 8008e74:	9107      	str	r1, [sp, #28]
 8008e76:	9104      	str	r1, [sp, #16]
 8008e78:	4808      	ldr	r0, [pc, #32]	@ (8008e9c <siprintf+0x38>)
 8008e7a:	4909      	ldr	r1, [pc, #36]	@ (8008ea0 <siprintf+0x3c>)
 8008e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e80:	9105      	str	r1, [sp, #20]
 8008e82:	6800      	ldr	r0, [r0, #0]
 8008e84:	a902      	add	r1, sp, #8
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	f000 f99a 	bl	80091c0 <_svfiprintf_r>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	9b02      	ldr	r3, [sp, #8]
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	b01c      	add	sp, #112	@ 0x70
 8008e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e98:	b003      	add	sp, #12
 8008e9a:	4770      	bx	lr
 8008e9c:	20000028 	.word	0x20000028
 8008ea0:	ffff0208 	.word	0xffff0208

08008ea4 <memset>:
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4402      	add	r2, r0
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	@ (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000028 	.word	0x20000028

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	4d0c      	ldr	r5, [pc, #48]	@ (8008ef8 <__libc_init_array+0x38>)
 8008ec6:	4c0d      	ldr	r4, [pc, #52]	@ (8008efc <__libc_init_array+0x3c>)
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	42a6      	cmp	r6, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	f000 fc80 	bl	80097d4 <_init>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	4d0a      	ldr	r5, [pc, #40]	@ (8008f00 <__libc_init_array+0x40>)
 8008ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8008f04 <__libc_init_array+0x44>)
 8008eda:	1b64      	subs	r4, r4, r5
 8008edc:	10a4      	asrs	r4, r4, #2
 8008ede:	42a6      	cmp	r6, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee8:	4798      	blx	r3
 8008eea:	3601      	adds	r6, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef2:	4798      	blx	r3
 8008ef4:	3601      	adds	r6, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	08009e7c 	.word	0x08009e7c
 8008efc:	08009e7c 	.word	0x08009e7c
 8008f00:	08009e7c 	.word	0x08009e7c
 8008f04:	08009e80 	.word	0x08009e80

08008f08 <__retarget_lock_acquire_recursive>:
 8008f08:	4770      	bx	lr

08008f0a <__retarget_lock_release_recursive>:
 8008f0a:	4770      	bx	lr

08008f0c <strcpy>:
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f12:	f803 2b01 	strb.w	r2, [r3], #1
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	d1f9      	bne.n	8008f0e <strcpy+0x2>
 8008f1a:	4770      	bx	lr

08008f1c <_free_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4605      	mov	r5, r0
 8008f20:	2900      	cmp	r1, #0
 8008f22:	d040      	beq.n	8008fa6 <_free_r+0x8a>
 8008f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f28:	1f0c      	subs	r4, r1, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	bfb8      	it	lt
 8008f2e:	18e4      	addlt	r4, r4, r3
 8008f30:	f000 f8de 	bl	80090f0 <__malloc_lock>
 8008f34:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa8 <_free_r+0x8c>)
 8008f36:	6813      	ldr	r3, [r2, #0]
 8008f38:	b933      	cbnz	r3, 8008f48 <_free_r+0x2c>
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	6014      	str	r4, [r2, #0]
 8008f3e:	4628      	mov	r0, r5
 8008f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f44:	f000 b8da 	b.w	80090fc <__malloc_unlock>
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	d908      	bls.n	8008f5e <_free_r+0x42>
 8008f4c:	6820      	ldr	r0, [r4, #0]
 8008f4e:	1821      	adds	r1, r4, r0
 8008f50:	428b      	cmp	r3, r1
 8008f52:	bf01      	itttt	eq
 8008f54:	6819      	ldreq	r1, [r3, #0]
 8008f56:	685b      	ldreq	r3, [r3, #4]
 8008f58:	1809      	addeq	r1, r1, r0
 8008f5a:	6021      	streq	r1, [r4, #0]
 8008f5c:	e7ed      	b.n	8008f3a <_free_r+0x1e>
 8008f5e:	461a      	mov	r2, r3
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b10b      	cbz	r3, 8008f68 <_free_r+0x4c>
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d9fa      	bls.n	8008f5e <_free_r+0x42>
 8008f68:	6811      	ldr	r1, [r2, #0]
 8008f6a:	1850      	adds	r0, r2, r1
 8008f6c:	42a0      	cmp	r0, r4
 8008f6e:	d10b      	bne.n	8008f88 <_free_r+0x6c>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	4401      	add	r1, r0
 8008f74:	1850      	adds	r0, r2, r1
 8008f76:	4283      	cmp	r3, r0
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	d1e0      	bne.n	8008f3e <_free_r+0x22>
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4408      	add	r0, r1
 8008f82:	6010      	str	r0, [r2, #0]
 8008f84:	6053      	str	r3, [r2, #4]
 8008f86:	e7da      	b.n	8008f3e <_free_r+0x22>
 8008f88:	d902      	bls.n	8008f90 <_free_r+0x74>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	e7d6      	b.n	8008f3e <_free_r+0x22>
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	1821      	adds	r1, r4, r0
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf01      	itttt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	1809      	addeq	r1, r1, r0
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6054      	str	r4, [r2, #4]
 8008fa4:	e7cb      	b.n	8008f3e <_free_r+0x22>
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	2000259c 	.word	0x2000259c

08008fac <sbrk_aligned>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	4e0f      	ldr	r6, [pc, #60]	@ (8008fec <sbrk_aligned+0x40>)
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	6831      	ldr	r1, [r6, #0]
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	b911      	cbnz	r1, 8008fbe <sbrk_aligned+0x12>
 8008fb8:	f000 fbaa 	bl	8009710 <_sbrk_r>
 8008fbc:	6030      	str	r0, [r6, #0]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f000 fba5 	bl	8009710 <_sbrk_r>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d103      	bne.n	8008fd2 <sbrk_aligned+0x26>
 8008fca:	f04f 34ff 	mov.w	r4, #4294967295
 8008fce:	4620      	mov	r0, r4
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	1cc4      	adds	r4, r0, #3
 8008fd4:	f024 0403 	bic.w	r4, r4, #3
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d0f8      	beq.n	8008fce <sbrk_aligned+0x22>
 8008fdc:	1a21      	subs	r1, r4, r0
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 fb96 	bl	8009710 <_sbrk_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d1f2      	bne.n	8008fce <sbrk_aligned+0x22>
 8008fe8:	e7ef      	b.n	8008fca <sbrk_aligned+0x1e>
 8008fea:	bf00      	nop
 8008fec:	20002598 	.word	0x20002598

08008ff0 <_malloc_r>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	1ccd      	adds	r5, r1, #3
 8008ff6:	f025 0503 	bic.w	r5, r5, #3
 8008ffa:	3508      	adds	r5, #8
 8008ffc:	2d0c      	cmp	r5, #12
 8008ffe:	bf38      	it	cc
 8009000:	250c      	movcc	r5, #12
 8009002:	2d00      	cmp	r5, #0
 8009004:	4606      	mov	r6, r0
 8009006:	db01      	blt.n	800900c <_malloc_r+0x1c>
 8009008:	42a9      	cmp	r1, r5
 800900a:	d904      	bls.n	8009016 <_malloc_r+0x26>
 800900c:	230c      	movs	r3, #12
 800900e:	6033      	str	r3, [r6, #0]
 8009010:	2000      	movs	r0, #0
 8009012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090ec <_malloc_r+0xfc>
 800901a:	f000 f869 	bl	80090f0 <__malloc_lock>
 800901e:	f8d8 3000 	ldr.w	r3, [r8]
 8009022:	461c      	mov	r4, r3
 8009024:	bb44      	cbnz	r4, 8009078 <_malloc_r+0x88>
 8009026:	4629      	mov	r1, r5
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff ffbf 	bl	8008fac <sbrk_aligned>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	4604      	mov	r4, r0
 8009032:	d158      	bne.n	80090e6 <_malloc_r+0xf6>
 8009034:	f8d8 4000 	ldr.w	r4, [r8]
 8009038:	4627      	mov	r7, r4
 800903a:	2f00      	cmp	r7, #0
 800903c:	d143      	bne.n	80090c6 <_malloc_r+0xd6>
 800903e:	2c00      	cmp	r4, #0
 8009040:	d04b      	beq.n	80090da <_malloc_r+0xea>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	4639      	mov	r1, r7
 8009046:	4630      	mov	r0, r6
 8009048:	eb04 0903 	add.w	r9, r4, r3
 800904c:	f000 fb60 	bl	8009710 <_sbrk_r>
 8009050:	4581      	cmp	r9, r0
 8009052:	d142      	bne.n	80090da <_malloc_r+0xea>
 8009054:	6821      	ldr	r1, [r4, #0]
 8009056:	4630      	mov	r0, r6
 8009058:	1a6d      	subs	r5, r5, r1
 800905a:	4629      	mov	r1, r5
 800905c:	f7ff ffa6 	bl	8008fac <sbrk_aligned>
 8009060:	3001      	adds	r0, #1
 8009062:	d03a      	beq.n	80090da <_malloc_r+0xea>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	442b      	add	r3, r5
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	f8d8 3000 	ldr.w	r3, [r8]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	bb62      	cbnz	r2, 80090cc <_malloc_r+0xdc>
 8009072:	f8c8 7000 	str.w	r7, [r8]
 8009076:	e00f      	b.n	8009098 <_malloc_r+0xa8>
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	1b52      	subs	r2, r2, r5
 800907c:	d420      	bmi.n	80090c0 <_malloc_r+0xd0>
 800907e:	2a0b      	cmp	r2, #11
 8009080:	d917      	bls.n	80090b2 <_malloc_r+0xc2>
 8009082:	1961      	adds	r1, r4, r5
 8009084:	42a3      	cmp	r3, r4
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	bf18      	it	ne
 800908a:	6059      	strne	r1, [r3, #4]
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	bf08      	it	eq
 8009090:	f8c8 1000 	streq.w	r1, [r8]
 8009094:	5162      	str	r2, [r4, r5]
 8009096:	604b      	str	r3, [r1, #4]
 8009098:	4630      	mov	r0, r6
 800909a:	f000 f82f 	bl	80090fc <__malloc_unlock>
 800909e:	f104 000b 	add.w	r0, r4, #11
 80090a2:	1d23      	adds	r3, r4, #4
 80090a4:	f020 0007 	bic.w	r0, r0, #7
 80090a8:	1ac2      	subs	r2, r0, r3
 80090aa:	bf1c      	itt	ne
 80090ac:	1a1b      	subne	r3, r3, r0
 80090ae:	50a3      	strne	r3, [r4, r2]
 80090b0:	e7af      	b.n	8009012 <_malloc_r+0x22>
 80090b2:	6862      	ldr	r2, [r4, #4]
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	bf0c      	ite	eq
 80090b8:	f8c8 2000 	streq.w	r2, [r8]
 80090bc:	605a      	strne	r2, [r3, #4]
 80090be:	e7eb      	b.n	8009098 <_malloc_r+0xa8>
 80090c0:	4623      	mov	r3, r4
 80090c2:	6864      	ldr	r4, [r4, #4]
 80090c4:	e7ae      	b.n	8009024 <_malloc_r+0x34>
 80090c6:	463c      	mov	r4, r7
 80090c8:	687f      	ldr	r7, [r7, #4]
 80090ca:	e7b6      	b.n	800903a <_malloc_r+0x4a>
 80090cc:	461a      	mov	r2, r3
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d1fb      	bne.n	80090cc <_malloc_r+0xdc>
 80090d4:	2300      	movs	r3, #0
 80090d6:	6053      	str	r3, [r2, #4]
 80090d8:	e7de      	b.n	8009098 <_malloc_r+0xa8>
 80090da:	230c      	movs	r3, #12
 80090dc:	4630      	mov	r0, r6
 80090de:	6033      	str	r3, [r6, #0]
 80090e0:	f000 f80c 	bl	80090fc <__malloc_unlock>
 80090e4:	e794      	b.n	8009010 <_malloc_r+0x20>
 80090e6:	6005      	str	r5, [r0, #0]
 80090e8:	e7d6      	b.n	8009098 <_malloc_r+0xa8>
 80090ea:	bf00      	nop
 80090ec:	2000259c 	.word	0x2000259c

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	@ (80090f8 <__malloc_lock+0x8>)
 80090f2:	f7ff bf09 	b.w	8008f08 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20002594 	.word	0x20002594

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	@ (8009104 <__malloc_unlock+0x8>)
 80090fe:	f7ff bf04 	b.w	8008f0a <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20002594 	.word	0x20002594

08009108 <__ssputs_r>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	461f      	mov	r7, r3
 800910e:	688e      	ldr	r6, [r1, #8]
 8009110:	4682      	mov	sl, r0
 8009112:	42be      	cmp	r6, r7
 8009114:	460c      	mov	r4, r1
 8009116:	4690      	mov	r8, r2
 8009118:	680b      	ldr	r3, [r1, #0]
 800911a:	d82d      	bhi.n	8009178 <__ssputs_r+0x70>
 800911c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009120:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009124:	d026      	beq.n	8009174 <__ssputs_r+0x6c>
 8009126:	6965      	ldr	r5, [r4, #20]
 8009128:	6909      	ldr	r1, [r1, #16]
 800912a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800912e:	eba3 0901 	sub.w	r9, r3, r1
 8009132:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009136:	1c7b      	adds	r3, r7, #1
 8009138:	444b      	add	r3, r9
 800913a:	106d      	asrs	r5, r5, #1
 800913c:	429d      	cmp	r5, r3
 800913e:	bf38      	it	cc
 8009140:	461d      	movcc	r5, r3
 8009142:	0553      	lsls	r3, r2, #21
 8009144:	d527      	bpl.n	8009196 <__ssputs_r+0x8e>
 8009146:	4629      	mov	r1, r5
 8009148:	f7ff ff52 	bl	8008ff0 <_malloc_r>
 800914c:	4606      	mov	r6, r0
 800914e:	b360      	cbz	r0, 80091aa <__ssputs_r+0xa2>
 8009150:	464a      	mov	r2, r9
 8009152:	6921      	ldr	r1, [r4, #16]
 8009154:	f000 fafa 	bl	800974c <memcpy>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800915e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	6126      	str	r6, [r4, #16]
 8009166:	444e      	add	r6, r9
 8009168:	6026      	str	r6, [r4, #0]
 800916a:	463e      	mov	r6, r7
 800916c:	6165      	str	r5, [r4, #20]
 800916e:	eba5 0509 	sub.w	r5, r5, r9
 8009172:	60a5      	str	r5, [r4, #8]
 8009174:	42be      	cmp	r6, r7
 8009176:	d900      	bls.n	800917a <__ssputs_r+0x72>
 8009178:	463e      	mov	r6, r7
 800917a:	4632      	mov	r2, r6
 800917c:	4641      	mov	r1, r8
 800917e:	6820      	ldr	r0, [r4, #0]
 8009180:	f000 faac 	bl	80096dc <memmove>
 8009184:	2000      	movs	r0, #0
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	1b9b      	subs	r3, r3, r6
 800918a:	60a3      	str	r3, [r4, #8]
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	4433      	add	r3, r6
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009196:	462a      	mov	r2, r5
 8009198:	f000 fae6 	bl	8009768 <_realloc_r>
 800919c:	4606      	mov	r6, r0
 800919e:	2800      	cmp	r0, #0
 80091a0:	d1e0      	bne.n	8009164 <__ssputs_r+0x5c>
 80091a2:	4650      	mov	r0, sl
 80091a4:	6921      	ldr	r1, [r4, #16]
 80091a6:	f7ff feb9 	bl	8008f1c <_free_r>
 80091aa:	230c      	movs	r3, #12
 80091ac:	f8ca 3000 	str.w	r3, [sl]
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f04f 30ff 	mov.w	r0, #4294967295
 80091b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	e7e9      	b.n	8009192 <__ssputs_r+0x8a>
	...

080091c0 <_svfiprintf_r>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	4698      	mov	r8, r3
 80091c6:	898b      	ldrh	r3, [r1, #12]
 80091c8:	4607      	mov	r7, r0
 80091ca:	061b      	lsls	r3, r3, #24
 80091cc:	460d      	mov	r5, r1
 80091ce:	4614      	mov	r4, r2
 80091d0:	b09d      	sub	sp, #116	@ 0x74
 80091d2:	d510      	bpl.n	80091f6 <_svfiprintf_r+0x36>
 80091d4:	690b      	ldr	r3, [r1, #16]
 80091d6:	b973      	cbnz	r3, 80091f6 <_svfiprintf_r+0x36>
 80091d8:	2140      	movs	r1, #64	@ 0x40
 80091da:	f7ff ff09 	bl	8008ff0 <_malloc_r>
 80091de:	6028      	str	r0, [r5, #0]
 80091e0:	6128      	str	r0, [r5, #16]
 80091e2:	b930      	cbnz	r0, 80091f2 <_svfiprintf_r+0x32>
 80091e4:	230c      	movs	r3, #12
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	b01d      	add	sp, #116	@ 0x74
 80091ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f2:	2340      	movs	r3, #64	@ 0x40
 80091f4:	616b      	str	r3, [r5, #20]
 80091f6:	2300      	movs	r3, #0
 80091f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fa:	2320      	movs	r3, #32
 80091fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009200:	2330      	movs	r3, #48	@ 0x30
 8009202:	f04f 0901 	mov.w	r9, #1
 8009206:	f8cd 800c 	str.w	r8, [sp, #12]
 800920a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80093a4 <_svfiprintf_r+0x1e4>
 800920e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009212:	4623      	mov	r3, r4
 8009214:	469a      	mov	sl, r3
 8009216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800921a:	b10a      	cbz	r2, 8009220 <_svfiprintf_r+0x60>
 800921c:	2a25      	cmp	r2, #37	@ 0x25
 800921e:	d1f9      	bne.n	8009214 <_svfiprintf_r+0x54>
 8009220:	ebba 0b04 	subs.w	fp, sl, r4
 8009224:	d00b      	beq.n	800923e <_svfiprintf_r+0x7e>
 8009226:	465b      	mov	r3, fp
 8009228:	4622      	mov	r2, r4
 800922a:	4629      	mov	r1, r5
 800922c:	4638      	mov	r0, r7
 800922e:	f7ff ff6b 	bl	8009108 <__ssputs_r>
 8009232:	3001      	adds	r0, #1
 8009234:	f000 80a7 	beq.w	8009386 <_svfiprintf_r+0x1c6>
 8009238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800923a:	445a      	add	r2, fp
 800923c:	9209      	str	r2, [sp, #36]	@ 0x24
 800923e:	f89a 3000 	ldrb.w	r3, [sl]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 809f 	beq.w	8009386 <_svfiprintf_r+0x1c6>
 8009248:	2300      	movs	r3, #0
 800924a:	f04f 32ff 	mov.w	r2, #4294967295
 800924e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009252:	f10a 0a01 	add.w	sl, sl, #1
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	9307      	str	r3, [sp, #28]
 800925a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800925e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009260:	4654      	mov	r4, sl
 8009262:	2205      	movs	r2, #5
 8009264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009268:	484e      	ldr	r0, [pc, #312]	@ (80093a4 <_svfiprintf_r+0x1e4>)
 800926a:	f000 fa61 	bl	8009730 <memchr>
 800926e:	9a04      	ldr	r2, [sp, #16]
 8009270:	b9d8      	cbnz	r0, 80092aa <_svfiprintf_r+0xea>
 8009272:	06d0      	lsls	r0, r2, #27
 8009274:	bf44      	itt	mi
 8009276:	2320      	movmi	r3, #32
 8009278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800927c:	0711      	lsls	r1, r2, #28
 800927e:	bf44      	itt	mi
 8009280:	232b      	movmi	r3, #43	@ 0x2b
 8009282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009286:	f89a 3000 	ldrb.w	r3, [sl]
 800928a:	2b2a      	cmp	r3, #42	@ 0x2a
 800928c:	d015      	beq.n	80092ba <_svfiprintf_r+0xfa>
 800928e:	4654      	mov	r4, sl
 8009290:	2000      	movs	r0, #0
 8009292:	f04f 0c0a 	mov.w	ip, #10
 8009296:	9a07      	ldr	r2, [sp, #28]
 8009298:	4621      	mov	r1, r4
 800929a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800929e:	3b30      	subs	r3, #48	@ 0x30
 80092a0:	2b09      	cmp	r3, #9
 80092a2:	d94b      	bls.n	800933c <_svfiprintf_r+0x17c>
 80092a4:	b1b0      	cbz	r0, 80092d4 <_svfiprintf_r+0x114>
 80092a6:	9207      	str	r2, [sp, #28]
 80092a8:	e014      	b.n	80092d4 <_svfiprintf_r+0x114>
 80092aa:	eba0 0308 	sub.w	r3, r0, r8
 80092ae:	fa09 f303 	lsl.w	r3, r9, r3
 80092b2:	4313      	orrs	r3, r2
 80092b4:	46a2      	mov	sl, r4
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	e7d2      	b.n	8009260 <_svfiprintf_r+0xa0>
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	1d19      	adds	r1, r3, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	9103      	str	r1, [sp, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfbb      	ittet	lt
 80092c6:	425b      	neglt	r3, r3
 80092c8:	f042 0202 	orrlt.w	r2, r2, #2
 80092cc:	9307      	strge	r3, [sp, #28]
 80092ce:	9307      	strlt	r3, [sp, #28]
 80092d0:	bfb8      	it	lt
 80092d2:	9204      	strlt	r2, [sp, #16]
 80092d4:	7823      	ldrb	r3, [r4, #0]
 80092d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80092d8:	d10a      	bne.n	80092f0 <_svfiprintf_r+0x130>
 80092da:	7863      	ldrb	r3, [r4, #1]
 80092dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80092de:	d132      	bne.n	8009346 <_svfiprintf_r+0x186>
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	3402      	adds	r4, #2
 80092e4:	1d1a      	adds	r2, r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	9203      	str	r2, [sp, #12]
 80092ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ee:	9305      	str	r3, [sp, #20]
 80092f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80093a8 <_svfiprintf_r+0x1e8>
 80092f4:	2203      	movs	r2, #3
 80092f6:	4650      	mov	r0, sl
 80092f8:	7821      	ldrb	r1, [r4, #0]
 80092fa:	f000 fa19 	bl	8009730 <memchr>
 80092fe:	b138      	cbz	r0, 8009310 <_svfiprintf_r+0x150>
 8009300:	2240      	movs	r2, #64	@ 0x40
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	eba0 000a 	sub.w	r0, r0, sl
 8009308:	4082      	lsls	r2, r0
 800930a:	4313      	orrs	r3, r2
 800930c:	3401      	adds	r4, #1
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009314:	2206      	movs	r2, #6
 8009316:	4825      	ldr	r0, [pc, #148]	@ (80093ac <_svfiprintf_r+0x1ec>)
 8009318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800931c:	f000 fa08 	bl	8009730 <memchr>
 8009320:	2800      	cmp	r0, #0
 8009322:	d036      	beq.n	8009392 <_svfiprintf_r+0x1d2>
 8009324:	4b22      	ldr	r3, [pc, #136]	@ (80093b0 <_svfiprintf_r+0x1f0>)
 8009326:	bb1b      	cbnz	r3, 8009370 <_svfiprintf_r+0x1b0>
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	3307      	adds	r3, #7
 800932c:	f023 0307 	bic.w	r3, r3, #7
 8009330:	3308      	adds	r3, #8
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009336:	4433      	add	r3, r6
 8009338:	9309      	str	r3, [sp, #36]	@ 0x24
 800933a:	e76a      	b.n	8009212 <_svfiprintf_r+0x52>
 800933c:	460c      	mov	r4, r1
 800933e:	2001      	movs	r0, #1
 8009340:	fb0c 3202 	mla	r2, ip, r2, r3
 8009344:	e7a8      	b.n	8009298 <_svfiprintf_r+0xd8>
 8009346:	2300      	movs	r3, #0
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4619      	mov	r1, r3
 800934e:	3401      	adds	r4, #1
 8009350:	9305      	str	r3, [sp, #20]
 8009352:	4620      	mov	r0, r4
 8009354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009358:	3a30      	subs	r2, #48	@ 0x30
 800935a:	2a09      	cmp	r2, #9
 800935c:	d903      	bls.n	8009366 <_svfiprintf_r+0x1a6>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0c6      	beq.n	80092f0 <_svfiprintf_r+0x130>
 8009362:	9105      	str	r1, [sp, #20]
 8009364:	e7c4      	b.n	80092f0 <_svfiprintf_r+0x130>
 8009366:	4604      	mov	r4, r0
 8009368:	2301      	movs	r3, #1
 800936a:	fb0c 2101 	mla	r1, ip, r1, r2
 800936e:	e7f0      	b.n	8009352 <_svfiprintf_r+0x192>
 8009370:	ab03      	add	r3, sp, #12
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	462a      	mov	r2, r5
 8009376:	4638      	mov	r0, r7
 8009378:	4b0e      	ldr	r3, [pc, #56]	@ (80093b4 <_svfiprintf_r+0x1f4>)
 800937a:	a904      	add	r1, sp, #16
 800937c:	f3af 8000 	nop.w
 8009380:	1c42      	adds	r2, r0, #1
 8009382:	4606      	mov	r6, r0
 8009384:	d1d6      	bne.n	8009334 <_svfiprintf_r+0x174>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	065b      	lsls	r3, r3, #25
 800938a:	f53f af2d 	bmi.w	80091e8 <_svfiprintf_r+0x28>
 800938e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009390:	e72c      	b.n	80091ec <_svfiprintf_r+0x2c>
 8009392:	ab03      	add	r3, sp, #12
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	462a      	mov	r2, r5
 8009398:	4638      	mov	r0, r7
 800939a:	4b06      	ldr	r3, [pc, #24]	@ (80093b4 <_svfiprintf_r+0x1f4>)
 800939c:	a904      	add	r1, sp, #16
 800939e:	f000 f87d 	bl	800949c <_printf_i>
 80093a2:	e7ed      	b.n	8009380 <_svfiprintf_r+0x1c0>
 80093a4:	08009e40 	.word	0x08009e40
 80093a8:	08009e46 	.word	0x08009e46
 80093ac:	08009e4a 	.word	0x08009e4a
 80093b0:	00000000 	.word	0x00000000
 80093b4:	08009109 	.word	0x08009109

080093b8 <_printf_common>:
 80093b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	4616      	mov	r6, r2
 80093be:	4698      	mov	r8, r3
 80093c0:	688a      	ldr	r2, [r1, #8]
 80093c2:	690b      	ldr	r3, [r1, #16]
 80093c4:	4607      	mov	r7, r0
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bfb8      	it	lt
 80093ca:	4613      	movlt	r3, r2
 80093cc:	6033      	str	r3, [r6, #0]
 80093ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093d2:	460c      	mov	r4, r1
 80093d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093d8:	b10a      	cbz	r2, 80093de <_printf_common+0x26>
 80093da:	3301      	adds	r3, #1
 80093dc:	6033      	str	r3, [r6, #0]
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	0699      	lsls	r1, r3, #26
 80093e2:	bf42      	ittt	mi
 80093e4:	6833      	ldrmi	r3, [r6, #0]
 80093e6:	3302      	addmi	r3, #2
 80093e8:	6033      	strmi	r3, [r6, #0]
 80093ea:	6825      	ldr	r5, [r4, #0]
 80093ec:	f015 0506 	ands.w	r5, r5, #6
 80093f0:	d106      	bne.n	8009400 <_printf_common+0x48>
 80093f2:	f104 0a19 	add.w	sl, r4, #25
 80093f6:	68e3      	ldr	r3, [r4, #12]
 80093f8:	6832      	ldr	r2, [r6, #0]
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	42ab      	cmp	r3, r5
 80093fe:	dc2b      	bgt.n	8009458 <_printf_common+0xa0>
 8009400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009404:	6822      	ldr	r2, [r4, #0]
 8009406:	3b00      	subs	r3, #0
 8009408:	bf18      	it	ne
 800940a:	2301      	movne	r3, #1
 800940c:	0692      	lsls	r2, r2, #26
 800940e:	d430      	bmi.n	8009472 <_printf_common+0xba>
 8009410:	4641      	mov	r1, r8
 8009412:	4638      	mov	r0, r7
 8009414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009418:	47c8      	blx	r9
 800941a:	3001      	adds	r0, #1
 800941c:	d023      	beq.n	8009466 <_printf_common+0xae>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	6922      	ldr	r2, [r4, #16]
 8009422:	f003 0306 	and.w	r3, r3, #6
 8009426:	2b04      	cmp	r3, #4
 8009428:	bf14      	ite	ne
 800942a:	2500      	movne	r5, #0
 800942c:	6833      	ldreq	r3, [r6, #0]
 800942e:	f04f 0600 	mov.w	r6, #0
 8009432:	bf08      	it	eq
 8009434:	68e5      	ldreq	r5, [r4, #12]
 8009436:	f104 041a 	add.w	r4, r4, #26
 800943a:	bf08      	it	eq
 800943c:	1aed      	subeq	r5, r5, r3
 800943e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009442:	bf08      	it	eq
 8009444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009448:	4293      	cmp	r3, r2
 800944a:	bfc4      	itt	gt
 800944c:	1a9b      	subgt	r3, r3, r2
 800944e:	18ed      	addgt	r5, r5, r3
 8009450:	42b5      	cmp	r5, r6
 8009452:	d11a      	bne.n	800948a <_printf_common+0xd2>
 8009454:	2000      	movs	r0, #0
 8009456:	e008      	b.n	800946a <_printf_common+0xb2>
 8009458:	2301      	movs	r3, #1
 800945a:	4652      	mov	r2, sl
 800945c:	4641      	mov	r1, r8
 800945e:	4638      	mov	r0, r7
 8009460:	47c8      	blx	r9
 8009462:	3001      	adds	r0, #1
 8009464:	d103      	bne.n	800946e <_printf_common+0xb6>
 8009466:	f04f 30ff 	mov.w	r0, #4294967295
 800946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946e:	3501      	adds	r5, #1
 8009470:	e7c1      	b.n	80093f6 <_printf_common+0x3e>
 8009472:	2030      	movs	r0, #48	@ 0x30
 8009474:	18e1      	adds	r1, r4, r3
 8009476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009480:	4422      	add	r2, r4
 8009482:	3302      	adds	r3, #2
 8009484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009488:	e7c2      	b.n	8009410 <_printf_common+0x58>
 800948a:	2301      	movs	r3, #1
 800948c:	4622      	mov	r2, r4
 800948e:	4641      	mov	r1, r8
 8009490:	4638      	mov	r0, r7
 8009492:	47c8      	blx	r9
 8009494:	3001      	adds	r0, #1
 8009496:	d0e6      	beq.n	8009466 <_printf_common+0xae>
 8009498:	3601      	adds	r6, #1
 800949a:	e7d9      	b.n	8009450 <_printf_common+0x98>

0800949c <_printf_i>:
 800949c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	7e0f      	ldrb	r7, [r1, #24]
 80094a2:	4691      	mov	r9, r2
 80094a4:	2f78      	cmp	r7, #120	@ 0x78
 80094a6:	4680      	mov	r8, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	469a      	mov	sl, r3
 80094ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094b2:	d807      	bhi.n	80094c4 <_printf_i+0x28>
 80094b4:	2f62      	cmp	r7, #98	@ 0x62
 80094b6:	d80a      	bhi.n	80094ce <_printf_i+0x32>
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	f000 80d3 	beq.w	8009664 <_printf_i+0x1c8>
 80094be:	2f58      	cmp	r7, #88	@ 0x58
 80094c0:	f000 80ba 	beq.w	8009638 <_printf_i+0x19c>
 80094c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094cc:	e03a      	b.n	8009544 <_printf_i+0xa8>
 80094ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094d2:	2b15      	cmp	r3, #21
 80094d4:	d8f6      	bhi.n	80094c4 <_printf_i+0x28>
 80094d6:	a101      	add	r1, pc, #4	@ (adr r1, 80094dc <_printf_i+0x40>)
 80094d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094dc:	08009535 	.word	0x08009535
 80094e0:	08009549 	.word	0x08009549
 80094e4:	080094c5 	.word	0x080094c5
 80094e8:	080094c5 	.word	0x080094c5
 80094ec:	080094c5 	.word	0x080094c5
 80094f0:	080094c5 	.word	0x080094c5
 80094f4:	08009549 	.word	0x08009549
 80094f8:	080094c5 	.word	0x080094c5
 80094fc:	080094c5 	.word	0x080094c5
 8009500:	080094c5 	.word	0x080094c5
 8009504:	080094c5 	.word	0x080094c5
 8009508:	0800964b 	.word	0x0800964b
 800950c:	08009573 	.word	0x08009573
 8009510:	08009605 	.word	0x08009605
 8009514:	080094c5 	.word	0x080094c5
 8009518:	080094c5 	.word	0x080094c5
 800951c:	0800966d 	.word	0x0800966d
 8009520:	080094c5 	.word	0x080094c5
 8009524:	08009573 	.word	0x08009573
 8009528:	080094c5 	.word	0x080094c5
 800952c:	080094c5 	.word	0x080094c5
 8009530:	0800960d 	.word	0x0800960d
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	1d1a      	adds	r2, r3, #4
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6032      	str	r2, [r6, #0]
 800953c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009544:	2301      	movs	r3, #1
 8009546:	e09e      	b.n	8009686 <_printf_i+0x1ea>
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	6031      	str	r1, [r6, #0]
 8009550:	0606      	lsls	r6, r0, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xbc>
 8009554:	681d      	ldr	r5, [r3, #0]
 8009556:	e003      	b.n	8009560 <_printf_i+0xc4>
 8009558:	0645      	lsls	r5, r0, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xb8>
 800955c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009560:	2d00      	cmp	r5, #0
 8009562:	da03      	bge.n	800956c <_printf_i+0xd0>
 8009564:	232d      	movs	r3, #45	@ 0x2d
 8009566:	426d      	negs	r5, r5
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800956c:	230a      	movs	r3, #10
 800956e:	4859      	ldr	r0, [pc, #356]	@ (80096d4 <_printf_i+0x238>)
 8009570:	e011      	b.n	8009596 <_printf_i+0xfa>
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	6833      	ldr	r3, [r6, #0]
 8009576:	0608      	lsls	r0, r1, #24
 8009578:	f853 5b04 	ldr.w	r5, [r3], #4
 800957c:	d402      	bmi.n	8009584 <_printf_i+0xe8>
 800957e:	0649      	lsls	r1, r1, #25
 8009580:	bf48      	it	mi
 8009582:	b2ad      	uxthmi	r5, r5
 8009584:	2f6f      	cmp	r7, #111	@ 0x6f
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	bf14      	ite	ne
 800958a:	230a      	movne	r3, #10
 800958c:	2308      	moveq	r3, #8
 800958e:	4851      	ldr	r0, [pc, #324]	@ (80096d4 <_printf_i+0x238>)
 8009590:	2100      	movs	r1, #0
 8009592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009596:	6866      	ldr	r6, [r4, #4]
 8009598:	2e00      	cmp	r6, #0
 800959a:	bfa8      	it	ge
 800959c:	6821      	ldrge	r1, [r4, #0]
 800959e:	60a6      	str	r6, [r4, #8]
 80095a0:	bfa4      	itt	ge
 80095a2:	f021 0104 	bicge.w	r1, r1, #4
 80095a6:	6021      	strge	r1, [r4, #0]
 80095a8:	b90d      	cbnz	r5, 80095ae <_printf_i+0x112>
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	d04b      	beq.n	8009646 <_printf_i+0x1aa>
 80095ae:	4616      	mov	r6, r2
 80095b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80095b4:	fb03 5711 	mls	r7, r3, r1, r5
 80095b8:	5dc7      	ldrb	r7, [r0, r7]
 80095ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095be:	462f      	mov	r7, r5
 80095c0:	42bb      	cmp	r3, r7
 80095c2:	460d      	mov	r5, r1
 80095c4:	d9f4      	bls.n	80095b0 <_printf_i+0x114>
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d10b      	bne.n	80095e2 <_printf_i+0x146>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	07df      	lsls	r7, r3, #31
 80095ce:	d508      	bpl.n	80095e2 <_printf_i+0x146>
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	6861      	ldr	r1, [r4, #4]
 80095d4:	4299      	cmp	r1, r3
 80095d6:	bfde      	ittt	le
 80095d8:	2330      	movle	r3, #48	@ 0x30
 80095da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095e2:	1b92      	subs	r2, r2, r6
 80095e4:	6122      	str	r2, [r4, #16]
 80095e6:	464b      	mov	r3, r9
 80095e8:	4621      	mov	r1, r4
 80095ea:	4640      	mov	r0, r8
 80095ec:	f8cd a000 	str.w	sl, [sp]
 80095f0:	aa03      	add	r2, sp, #12
 80095f2:	f7ff fee1 	bl	80093b8 <_printf_common>
 80095f6:	3001      	adds	r0, #1
 80095f8:	d14a      	bne.n	8009690 <_printf_i+0x1f4>
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	b004      	add	sp, #16
 8009600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	f043 0320 	orr.w	r3, r3, #32
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	2778      	movs	r7, #120	@ 0x78
 800960e:	4832      	ldr	r0, [pc, #200]	@ (80096d8 <_printf_i+0x23c>)
 8009610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	6831      	ldr	r1, [r6, #0]
 8009618:	061f      	lsls	r7, r3, #24
 800961a:	f851 5b04 	ldr.w	r5, [r1], #4
 800961e:	d402      	bmi.n	8009626 <_printf_i+0x18a>
 8009620:	065f      	lsls	r7, r3, #25
 8009622:	bf48      	it	mi
 8009624:	b2ad      	uxthmi	r5, r5
 8009626:	6031      	str	r1, [r6, #0]
 8009628:	07d9      	lsls	r1, r3, #31
 800962a:	bf44      	itt	mi
 800962c:	f043 0320 	orrmi.w	r3, r3, #32
 8009630:	6023      	strmi	r3, [r4, #0]
 8009632:	b11d      	cbz	r5, 800963c <_printf_i+0x1a0>
 8009634:	2310      	movs	r3, #16
 8009636:	e7ab      	b.n	8009590 <_printf_i+0xf4>
 8009638:	4826      	ldr	r0, [pc, #152]	@ (80096d4 <_printf_i+0x238>)
 800963a:	e7e9      	b.n	8009610 <_printf_i+0x174>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	f023 0320 	bic.w	r3, r3, #32
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	e7f6      	b.n	8009634 <_printf_i+0x198>
 8009646:	4616      	mov	r6, r2
 8009648:	e7bd      	b.n	80095c6 <_printf_i+0x12a>
 800964a:	6833      	ldr	r3, [r6, #0]
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1d18      	adds	r0, r3, #4
 8009650:	6961      	ldr	r1, [r4, #20]
 8009652:	6030      	str	r0, [r6, #0]
 8009654:	062e      	lsls	r6, r5, #24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	d501      	bpl.n	800965e <_printf_i+0x1c2>
 800965a:	6019      	str	r1, [r3, #0]
 800965c:	e002      	b.n	8009664 <_printf_i+0x1c8>
 800965e:	0668      	lsls	r0, r5, #25
 8009660:	d5fb      	bpl.n	800965a <_printf_i+0x1be>
 8009662:	8019      	strh	r1, [r3, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	4616      	mov	r6, r2
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	e7bc      	b.n	80095e6 <_printf_i+0x14a>
 800966c:	6833      	ldr	r3, [r6, #0]
 800966e:	2100      	movs	r1, #0
 8009670:	1d1a      	adds	r2, r3, #4
 8009672:	6032      	str	r2, [r6, #0]
 8009674:	681e      	ldr	r6, [r3, #0]
 8009676:	6862      	ldr	r2, [r4, #4]
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f859 	bl	8009730 <memchr>
 800967e:	b108      	cbz	r0, 8009684 <_printf_i+0x1e8>
 8009680:	1b80      	subs	r0, r0, r6
 8009682:	6060      	str	r0, [r4, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	2300      	movs	r3, #0
 800968a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800968e:	e7aa      	b.n	80095e6 <_printf_i+0x14a>
 8009690:	4632      	mov	r2, r6
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	47d0      	blx	sl
 800969a:	3001      	adds	r0, #1
 800969c:	d0ad      	beq.n	80095fa <_printf_i+0x15e>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	079b      	lsls	r3, r3, #30
 80096a2:	d413      	bmi.n	80096cc <_printf_i+0x230>
 80096a4:	68e0      	ldr	r0, [r4, #12]
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	4298      	cmp	r0, r3
 80096aa:	bfb8      	it	lt
 80096ac:	4618      	movlt	r0, r3
 80096ae:	e7a6      	b.n	80095fe <_printf_i+0x162>
 80096b0:	2301      	movs	r3, #1
 80096b2:	4632      	mov	r2, r6
 80096b4:	4649      	mov	r1, r9
 80096b6:	4640      	mov	r0, r8
 80096b8:	47d0      	blx	sl
 80096ba:	3001      	adds	r0, #1
 80096bc:	d09d      	beq.n	80095fa <_printf_i+0x15e>
 80096be:	3501      	adds	r5, #1
 80096c0:	68e3      	ldr	r3, [r4, #12]
 80096c2:	9903      	ldr	r1, [sp, #12]
 80096c4:	1a5b      	subs	r3, r3, r1
 80096c6:	42ab      	cmp	r3, r5
 80096c8:	dcf2      	bgt.n	80096b0 <_printf_i+0x214>
 80096ca:	e7eb      	b.n	80096a4 <_printf_i+0x208>
 80096cc:	2500      	movs	r5, #0
 80096ce:	f104 0619 	add.w	r6, r4, #25
 80096d2:	e7f5      	b.n	80096c0 <_printf_i+0x224>
 80096d4:	08009e51 	.word	0x08009e51
 80096d8:	08009e62 	.word	0x08009e62

080096dc <memmove>:
 80096dc:	4288      	cmp	r0, r1
 80096de:	b510      	push	{r4, lr}
 80096e0:	eb01 0402 	add.w	r4, r1, r2
 80096e4:	d902      	bls.n	80096ec <memmove+0x10>
 80096e6:	4284      	cmp	r4, r0
 80096e8:	4623      	mov	r3, r4
 80096ea:	d807      	bhi.n	80096fc <memmove+0x20>
 80096ec:	1e43      	subs	r3, r0, #1
 80096ee:	42a1      	cmp	r1, r4
 80096f0:	d008      	beq.n	8009704 <memmove+0x28>
 80096f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096fa:	e7f8      	b.n	80096ee <memmove+0x12>
 80096fc:	4601      	mov	r1, r0
 80096fe:	4402      	add	r2, r0
 8009700:	428a      	cmp	r2, r1
 8009702:	d100      	bne.n	8009706 <memmove+0x2a>
 8009704:	bd10      	pop	{r4, pc}
 8009706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800970a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970e:	e7f7      	b.n	8009700 <memmove+0x24>

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	2300      	movs	r3, #0
 8009714:	4d05      	ldr	r5, [pc, #20]	@ (800972c <_sbrk_r+0x1c>)
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f8 f8e0 	bl	80018e0 <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20002590 	.word	0x20002590

08009730 <memchr>:
 8009730:	4603      	mov	r3, r0
 8009732:	b510      	push	{r4, lr}
 8009734:	b2c9      	uxtb	r1, r1
 8009736:	4402      	add	r2, r0
 8009738:	4293      	cmp	r3, r2
 800973a:	4618      	mov	r0, r3
 800973c:	d101      	bne.n	8009742 <memchr+0x12>
 800973e:	2000      	movs	r0, #0
 8009740:	e003      	b.n	800974a <memchr+0x1a>
 8009742:	7804      	ldrb	r4, [r0, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	428c      	cmp	r4, r1
 8009748:	d1f6      	bne.n	8009738 <memchr+0x8>
 800974a:	bd10      	pop	{r4, pc}

0800974c <memcpy>:
 800974c:	440a      	add	r2, r1
 800974e:	4291      	cmp	r1, r2
 8009750:	f100 33ff 	add.w	r3, r0, #4294967295
 8009754:	d100      	bne.n	8009758 <memcpy+0xc>
 8009756:	4770      	bx	lr
 8009758:	b510      	push	{r4, lr}
 800975a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975e:	4291      	cmp	r1, r2
 8009760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009764:	d1f9      	bne.n	800975a <memcpy+0xe>
 8009766:	bd10      	pop	{r4, pc}

08009768 <_realloc_r>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	4680      	mov	r8, r0
 800976e:	4615      	mov	r5, r2
 8009770:	460c      	mov	r4, r1
 8009772:	b921      	cbnz	r1, 800977e <_realloc_r+0x16>
 8009774:	4611      	mov	r1, r2
 8009776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800977a:	f7ff bc39 	b.w	8008ff0 <_malloc_r>
 800977e:	b92a      	cbnz	r2, 800978c <_realloc_r+0x24>
 8009780:	f7ff fbcc 	bl	8008f1c <_free_r>
 8009784:	2400      	movs	r4, #0
 8009786:	4620      	mov	r0, r4
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	f000 f81a 	bl	80097c4 <_malloc_usable_size_r>
 8009790:	4285      	cmp	r5, r0
 8009792:	4606      	mov	r6, r0
 8009794:	d802      	bhi.n	800979c <_realloc_r+0x34>
 8009796:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800979a:	d8f4      	bhi.n	8009786 <_realloc_r+0x1e>
 800979c:	4629      	mov	r1, r5
 800979e:	4640      	mov	r0, r8
 80097a0:	f7ff fc26 	bl	8008ff0 <_malloc_r>
 80097a4:	4607      	mov	r7, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d0ec      	beq.n	8009784 <_realloc_r+0x1c>
 80097aa:	42b5      	cmp	r5, r6
 80097ac:	462a      	mov	r2, r5
 80097ae:	4621      	mov	r1, r4
 80097b0:	bf28      	it	cs
 80097b2:	4632      	movcs	r2, r6
 80097b4:	f7ff ffca 	bl	800974c <memcpy>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4640      	mov	r0, r8
 80097bc:	f7ff fbae 	bl	8008f1c <_free_r>
 80097c0:	463c      	mov	r4, r7
 80097c2:	e7e0      	b.n	8009786 <_realloc_r+0x1e>

080097c4 <_malloc_usable_size_r>:
 80097c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c8:	1f18      	subs	r0, r3, #4
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfbc      	itt	lt
 80097ce:	580b      	ldrlt	r3, [r1, r0]
 80097d0:	18c0      	addlt	r0, r0, r3
 80097d2:	4770      	bx	lr

080097d4 <_init>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr

080097e0 <_fini>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	bf00      	nop
 80097e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e6:	bc08      	pop	{r3}
 80097e8:	469e      	mov	lr, r3
 80097ea:	4770      	bx	lr
