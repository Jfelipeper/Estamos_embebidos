
Projecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec4  08009ec4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009ec4  08009ec4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ec4  08009ec4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec4  08009ec4  00019ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000074  08009f40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000255c  08009f40  0002255c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6d2  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c12  00000000  00000000  0002f7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  000323c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b63  00000000  00000000  000332a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dfb  00000000  00000000  00033e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001339f  00000000  00000000  0004cbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c30c  00000000  00000000  0005ff9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000421c  00000000  00000000  000ec2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f04c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08009820 	.word	0x08009820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08009820 	.word	0x08009820

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2iz>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d215      	bcs.n	8000762 <__aeabi_d2iz+0x36>
 8000736:	d511      	bpl.n	800075c <__aeabi_d2iz+0x30>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d912      	bls.n	8000768 <__aeabi_d2iz+0x3c>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000752:	fa23 f002 	lsr.w	r0, r3, r2
 8000756:	bf18      	it	ne
 8000758:	4240      	negne	r0, r0
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000766:	d105      	bne.n	8000774 <__aeabi_d2iz+0x48>
 8000768:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2110      	movs	r1, #16
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <SELECT+0x18>)
 8000786:	f002 fab6 	bl	8002cf6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f001 fbb8 	bl	8001f00 <HAL_Delay>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40010800 	.word	0x40010800

08000798 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2110      	movs	r1, #16
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <DESELECT+0x18>)
 80007a2:	f002 faa8 	bl	8002cf6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 fbaa 	bl	8001f00 <HAL_Delay>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010800 	.word	0x40010800

080007b4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007be:	bf00      	nop
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <SPI_TxByte+0x30>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d1f8      	bne.n	80007c0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80007ce:	1df9      	adds	r1, r7, #7
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	2201      	movs	r2, #1
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <SPI_TxByte+0x30>)
 80007d6:	f003 fe73 	bl	80044c0 <HAL_SPI_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000dc 	.word	0x200000dc

080007e8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007f4:	bf00      	nop
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <SPI_TxBuffer+0x30>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	2b02      	cmp	r3, #2
 8000802:	d1f8      	bne.n	80007f6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000804:	887a      	ldrh	r2, [r7, #2]
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <SPI_TxBuffer+0x30>)
 800080c:	f003 fe58 	bl	80044c0 <HAL_SPI_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000dc 	.word	0x200000dc

0800081c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000826:	bf00      	nop
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <SPI_RxByte+0x34>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	2b02      	cmp	r3, #2
 8000834:	d1f8      	bne.n	8000828 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000836:	1dba      	adds	r2, r7, #6
 8000838:	1df9      	adds	r1, r7, #7
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <SPI_RxByte+0x34>)
 8000842:	f003 ff80 	bl	8004746 <HAL_SPI_TransmitReceive>

	return data;
 8000846:	79bb      	ldrb	r3, [r7, #6]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000dc 	.word	0x200000dc

08000854 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800085c:	f7ff ffde 	bl	800081c <SPI_RxByte>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	701a      	strb	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <SD_ReadyWait+0x30>)
 8000878:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800087c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800087e:	f7ff ffcd 	bl	800081c <SPI_RxByte>
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d003      	beq.n	8000894 <SD_ReadyWait+0x24>
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SD_ReadyWait+0x30>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f4      	bne.n	800087e <SD_ReadyWait+0xe>

	return res;
 8000894:	79fb      	ldrb	r3, [r7, #7]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000092 	.word	0x20000092

080008a4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80008aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80008ae:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80008b0:	f7ff ff72 	bl	8000798 <DESELECT>
	for(int i = 0; i < 10; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	e005      	b.n	80008c6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80008ba:	20ff      	movs	r0, #255	; 0xff
 80008bc:	f7ff ff7a 	bl	80007b4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b09      	cmp	r3, #9
 80008ca:	ddf6      	ble.n	80008ba <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80008cc:	f7ff ff56 	bl	800077c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80008e4:	2395      	movs	r3, #149	; 0x95
 80008e6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80008e8:	463b      	mov	r3, r7
 80008ea:	2106      	movs	r1, #6
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff7b 	bl	80007e8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80008f2:	e002      	b.n	80008fa <SD_PowerOn+0x56>
	{
		cnt--;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80008fa:	f7ff ff8f 	bl	800081c <SPI_RxByte>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d002      	beq.n	800090a <SD_PowerOn+0x66>
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1f4      	bne.n	80008f4 <SD_PowerOn+0x50>
	}

	DESELECT();
 800090a:	f7ff ff45 	bl	8000798 <DESELECT>
	SPI_TxByte(0XFF);
 800090e:	20ff      	movs	r0, #255	; 0xff
 8000910:	f7ff ff50 	bl	80007b4 <SPI_TxByte>

	PowerFlag = 1;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <SD_PowerOn+0x80>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000095 	.word	0x20000095

08000928 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <SD_PowerOff+0x14>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000095 	.word	0x20000095

08000940 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <SD_CheckPower+0x10>)
 8000946:	781b      	ldrb	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000095 	.word	0x20000095

08000954 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <SD_RxDataBlock+0x58>)
 8000960:	22c8      	movs	r2, #200	; 0xc8
 8000962:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000964:	f7ff ff5a 	bl	800081c <SPI_RxByte>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2bff      	cmp	r3, #255	; 0xff
 8000970:	d103      	bne.n	800097a <SD_RxDataBlock+0x26>
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <SD_RxDataBlock+0x58>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f4      	bne.n	8000964 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2bfe      	cmp	r3, #254	; 0xfe
 800097e:	d001      	beq.n	8000984 <SD_RxDataBlock+0x30>
 8000980:	2300      	movs	r3, #0
 8000982:	e00f      	b.n	80009a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff62 	bl	8000854 <SPI_RxBytePtr>
	} while(len--);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	603a      	str	r2, [r7, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f4      	bne.n	8000984 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800099a:	f7ff ff3f 	bl	800081c <SPI_RxByte>
	SPI_RxByte();
 800099e:	f7ff ff3d 	bl	800081c <SPI_RxByte>

	return TRUE;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000090 	.word	0x20000090

080009b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80009c0:	f7ff ff56 	bl	8000870 <SD_ReadyWait>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d001      	beq.n	80009ce <SD_TxDataBlock+0x1e>
 80009ca:	2300      	movs	r3, #0
 80009cc:	e02f      	b.n	8000a2e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff feef 	bl	80007b4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80009d6:	78fb      	ldrb	r3, [r7, #3]
 80009d8:	2bfd      	cmp	r3, #253	; 0xfd
 80009da:	d020      	beq.n	8000a1e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff01 	bl	80007e8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80009e6:	f7ff ff19 	bl	800081c <SPI_RxByte>
		SPI_RxByte();
 80009ea:	f7ff ff17 	bl	800081c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80009ee:	e00b      	b.n	8000a08 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80009f0:	f7ff ff14 	bl	800081c <SPI_RxByte>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	f003 031f 	and.w	r3, r3, #31
 80009fe:	2b05      	cmp	r3, #5
 8000a00:	d006      	beq.n	8000a10 <SD_TxDataBlock+0x60>
			i++;
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	3301      	adds	r3, #1
 8000a06:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	2b40      	cmp	r3, #64	; 0x40
 8000a0c:	d9f0      	bls.n	80009f0 <SD_TxDataBlock+0x40>
 8000a0e:	e000      	b.n	8000a12 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000a10:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000a12:	bf00      	nop
 8000a14:	f7ff ff02 	bl	800081c <SPI_RxByte>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0fa      	beq.n	8000a14 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	f003 031f 	and.w	r3, r3, #31
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d101      	bne.n	8000a2c <SD_TxDataBlock+0x7c>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	6039      	str	r1, [r7, #0]
 8000a40:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000a42:	f7ff ff15 	bl	8000870 <SD_ReadyWait>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2bff      	cmp	r3, #255	; 0xff
 8000a4a:	d001      	beq.n	8000a50 <SD_SendCmd+0x1a>
 8000a4c:	23ff      	movs	r3, #255	; 0xff
 8000a4e:	e042      	b.n	8000ad6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff feae 	bl	80007b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	0e1b      	lsrs	r3, r3, #24
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fea8 	bl	80007b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fea2 	bl	80007b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe9c 	bl	80007b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe97 	bl	80007b4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b40      	cmp	r3, #64	; 0x40
 8000a8a:	d102      	bne.n	8000a92 <SD_SendCmd+0x5c>
 8000a8c:	2395      	movs	r3, #149	; 0x95
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	e007      	b.n	8000aa2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b48      	cmp	r3, #72	; 0x48
 8000a96:	d102      	bne.n	8000a9e <SD_SendCmd+0x68>
 8000a98:	2387      	movs	r3, #135	; 0x87
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e001      	b.n	8000aa2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe85 	bl	80007b4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b4c      	cmp	r3, #76	; 0x4c
 8000aae:	d101      	bne.n	8000ab4 <SD_SendCmd+0x7e>
 8000ab0:	f7ff feb4 	bl	800081c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ab8:	f7ff feb0 	bl	800081c <SPI_RxByte>
 8000abc:	4603      	mov	r3, r0
 8000abe:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ac0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	da05      	bge.n	8000ad4 <SD_SendCmd+0x9e>
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	73bb      	strb	r3, [r7, #14]
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <SD_SendCmd+0x82>

	return res;
 8000ad4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SD_disk_initialize+0x14>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e0d1      	b.n	8000c98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000af4:	4b6a      	ldr	r3, [pc, #424]	; (8000ca0 <SD_disk_initialize+0x1c0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <SD_disk_initialize+0x2a>
 8000b02:	4b67      	ldr	r3, [pc, #412]	; (8000ca0 <SD_disk_initialize+0x1c0>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	e0c6      	b.n	8000c98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000b0a:	f7ff fecb 	bl	80008a4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000b0e:	f7ff fe35 	bl	800077c <SELECT>

	/* check disk type */
	type = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000b16:	2100      	movs	r1, #0
 8000b18:	2040      	movs	r0, #64	; 0x40
 8000b1a:	f7ff ff8c 	bl	8000a36 <SD_SendCmd>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	f040 80a1 	bne.w	8000c68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <SD_disk_initialize+0x1c4>)
 8000b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b2c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b32:	2048      	movs	r0, #72	; 0x48
 8000b34:	f7ff ff7f 	bl	8000a36 <SD_SendCmd>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d155      	bne.n	8000bea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e00c      	b.n	8000b5e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000b44:	7bfc      	ldrb	r4, [r7, #15]
 8000b46:	f7ff fe69 	bl	800081c <SPI_RxByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f104 0310 	add.w	r3, r4, #16
 8000b52:	443b      	add	r3, r7
 8000b54:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d9ef      	bls.n	8000b44 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b64:	7abb      	ldrb	r3, [r7, #10]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d17e      	bne.n	8000c68 <SD_disk_initialize+0x188>
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	2baa      	cmp	r3, #170	; 0xaa
 8000b6e:	d17b      	bne.n	8000c68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b70:	2100      	movs	r1, #0
 8000b72:	2077      	movs	r0, #119	; 0x77
 8000b74:	f7ff ff5f 	bl	8000a36 <SD_SendCmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d807      	bhi.n	8000b8e <SD_disk_initialize+0xae>
 8000b7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b82:	2069      	movs	r0, #105	; 0x69
 8000b84:	f7ff ff57 	bl	8000a36 <SD_SendCmd>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <SD_disk_initialize+0x1c4>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1ec      	bne.n	8000b70 <SD_disk_initialize+0x90>
 8000b96:	e000      	b.n	8000b9a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b98:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b9a:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <SD_disk_initialize+0x1c4>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d062      	beq.n	8000c68 <SD_disk_initialize+0x188>
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	207a      	movs	r0, #122	; 0x7a
 8000ba6:	f7ff ff46 	bl	8000a36 <SD_SendCmd>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d15b      	bne.n	8000c68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e00c      	b.n	8000bd0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000bb6:	7bfc      	ldrb	r4, [r7, #15]
 8000bb8:	f7ff fe30 	bl	800081c <SPI_RxByte>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f104 0310 	add.w	r3, r4, #16
 8000bc4:	443b      	add	r3, r7
 8000bc6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d9ef      	bls.n	8000bb6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000bd6:	7a3b      	ldrb	r3, [r7, #8]
 8000bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SD_disk_initialize+0x104>
 8000be0:	230c      	movs	r3, #12
 8000be2:	e000      	b.n	8000be6 <SD_disk_initialize+0x106>
 8000be4:	2304      	movs	r3, #4
 8000be6:	73bb      	strb	r3, [r7, #14]
 8000be8:	e03e      	b.n	8000c68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000bea:	2100      	movs	r1, #0
 8000bec:	2077      	movs	r0, #119	; 0x77
 8000bee:	f7ff ff22 	bl	8000a36 <SD_SendCmd>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d808      	bhi.n	8000c0a <SD_disk_initialize+0x12a>
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2069      	movs	r0, #105	; 0x69
 8000bfc:	f7ff ff1b 	bl	8000a36 <SD_SendCmd>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d801      	bhi.n	8000c0a <SD_disk_initialize+0x12a>
 8000c06:	2302      	movs	r3, #2
 8000c08:	e000      	b.n	8000c0c <SD_disk_initialize+0x12c>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d10e      	bne.n	8000c32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000c14:	2100      	movs	r1, #0
 8000c16:	2077      	movs	r0, #119	; 0x77
 8000c18:	f7ff ff0d 	bl	8000a36 <SD_SendCmd>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d80e      	bhi.n	8000c40 <SD_disk_initialize+0x160>
 8000c22:	2100      	movs	r1, #0
 8000c24:	2069      	movs	r0, #105	; 0x69
 8000c26:	f7ff ff06 	bl	8000a36 <SD_SendCmd>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d107      	bne.n	8000c40 <SD_disk_initialize+0x160>
 8000c30:	e00c      	b.n	8000c4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c32:	2100      	movs	r1, #0
 8000c34:	2041      	movs	r0, #65	; 0x41
 8000c36:	f7ff fefe 	bl	8000a36 <SD_SendCmd>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d004      	beq.n	8000c4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SD_disk_initialize+0x1c4>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1e2      	bne.n	8000c0e <SD_disk_initialize+0x12e>
 8000c48:	e000      	b.n	8000c4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <SD_disk_initialize+0x1c4>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <SD_disk_initialize+0x184>
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	2050      	movs	r0, #80	; 0x50
 8000c5a:	f7ff feec 	bl	8000a36 <SD_SendCmd>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SD_disk_initialize+0x188>
 8000c64:	2300      	movs	r3, #0
 8000c66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <SD_disk_initialize+0x1c8>)
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000c6e:	f7ff fd93 	bl	8000798 <DESELECT>
	SPI_RxByte();
 8000c72:	f7ff fdd3 	bl	800081c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SD_disk_initialize+0x1c0>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SD_disk_initialize+0x1c0>)
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e001      	b.n	8000c92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000c8e:	f7ff fe4b 	bl	8000928 <SD_PowerOff>
	}

	return Stat;
 8000c92:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <SD_disk_initialize+0x1c0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000090 	.word	0x20000090
 8000ca8:	20000094 	.word	0x20000094

08000cac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SD_disk_status+0x14>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e002      	b.n	8000cc6 <SD_disk_status+0x1a>
	return Stat;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <SD_disk_status+0x24>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <SD_disk_read+0x1c>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <SD_disk_read+0x20>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e051      	b.n	8000d98 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <SD_disk_read+0xcc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SD_disk_read+0x32>
 8000d02:	2303      	movs	r3, #3
 8000d04:	e048      	b.n	8000d98 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <SD_disk_read+0xd0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <SD_disk_read+0x44>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d18:	f7ff fd30 	bl	800077c <SELECT>

	if (count == 1)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d111      	bne.n	8000d46 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2051      	movs	r0, #81	; 0x51
 8000d26:	f7ff fe86 	bl	8000a36 <SD_SendCmd>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d129      	bne.n	8000d84 <SD_disk_read+0xb0>
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff fe0d 	bl	8000954 <SD_RxDataBlock>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <SD_disk_read+0xb0>
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	e01e      	b.n	8000d84 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2052      	movs	r0, #82	; 0x52
 8000d4a:	f7ff fe74 	bl	8000a36 <SD_SendCmd>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d117      	bne.n	8000d84 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f7ff fdfb 	bl	8000954 <SD_RxDataBlock>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00a      	beq.n	8000d7a <SD_disk_read+0xa6>
				buff += 512;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d6a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ed      	bne.n	8000d54 <SD_disk_read+0x80>
 8000d78:	e000      	b.n	8000d7c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d7a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	204c      	movs	r0, #76	; 0x4c
 8000d80:	f7ff fe59 	bl	8000a36 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000d84:	f7ff fd08 	bl	8000798 <DESELECT>
	SPI_RxByte();
 8000d88:	f7ff fd48 	bl	800081c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000094 	.word	0x20000094

08000da8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <SD_disk_write+0x1c>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <SD_disk_write+0x20>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e06b      	b.n	8000ea0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <SD_disk_write+0x100>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SD_disk_write+0x32>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e062      	b.n	8000ea0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <SD_disk_write+0x100>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_write+0x44>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e059      	b.n	8000ea0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <SD_disk_write+0x104>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <SD_disk_write+0x56>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	025b      	lsls	r3, r3, #9
 8000dfc:	607b      	str	r3, [r7, #4]

	SELECT();
 8000dfe:	f7ff fcbd 	bl	800077c <SELECT>

	if (count == 1)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d110      	bne.n	8000e2a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2058      	movs	r0, #88	; 0x58
 8000e0c:	f7ff fe13 	bl	8000a36 <SD_SendCmd>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d13a      	bne.n	8000e8c <SD_disk_write+0xe4>
 8000e16:	21fe      	movs	r1, #254	; 0xfe
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f7ff fdc9 	bl	80009b0 <SD_TxDataBlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d033      	beq.n	8000e8c <SD_disk_write+0xe4>
			count = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	e030      	b.n	8000e8c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SD_disk_write+0x104>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2077      	movs	r0, #119	; 0x77
 8000e3a:	f7ff fdfc 	bl	8000a36 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	2057      	movs	r0, #87	; 0x57
 8000e42:	f7ff fdf8 	bl	8000a36 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2059      	movs	r0, #89	; 0x59
 8000e4a:	f7ff fdf4 	bl	8000a36 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e54:	21fc      	movs	r1, #252	; 0xfc
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff fdaa 	bl	80009b0 <SD_TxDataBlock>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00a      	beq.n	8000e78 <SD_disk_write+0xd0>
				buff += 512;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e68:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ee      	bne.n	8000e54 <SD_disk_write+0xac>
 8000e76:	e000      	b.n	8000e7a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e78:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000e7a:	21fd      	movs	r1, #253	; 0xfd
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fd97 	bl	80009b0 <SD_TxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <SD_disk_write+0xe4>
			{
				count = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000e8c:	f7ff fc84 	bl	8000798 <DESELECT>
	SPI_RxByte();
 8000e90:	f7ff fcc4 	bl	800081c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000094 	.word	0x20000094

08000eb0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SD_disk_ioctl+0x1e>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e115      	b.n	80010fa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d124      	bne.n	8000f24 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d012      	beq.n	8000f08 <SD_disk_ioctl+0x58>
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	dc1a      	bgt.n	8000f1c <SD_disk_ioctl+0x6c>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <SD_disk_ioctl+0x40>
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d006      	beq.n	8000efc <SD_disk_ioctl+0x4c>
 8000eee:	e015      	b.n	8000f1c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000ef0:	f7ff fd1a 	bl	8000928 <SD_PowerOff>
			res = RES_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000efa:	e0fc      	b.n	80010f6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000efc:	f7ff fcd2 	bl	80008a4 <SD_PowerOn>
			res = RES_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f06:	e0f6      	b.n	80010f6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	1c5c      	adds	r4, r3, #1
 8000f0c:	f7ff fd18 	bl	8000940 <SD_CheckPower>
 8000f10:	4603      	mov	r3, r0
 8000f12:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f1a:	e0ec      	b.n	80010f6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f22:	e0e8      	b.n	80010f6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f24:	4b77      	ldr	r3, [pc, #476]	; (8001104 <SD_disk_ioctl+0x254>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SD_disk_ioctl+0x86>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e0e1      	b.n	80010fa <SD_disk_ioctl+0x24a>

		SELECT();
 8000f36:	f7ff fc21 	bl	800077c <SELECT>

		switch (ctrl)
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b0d      	cmp	r3, #13
 8000f3e:	f200 80cb 	bhi.w	80010d8 <SD_disk_ioctl+0x228>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <SD_disk_ioctl+0x98>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08001043 	.word	0x08001043
 8000f4c:	08000f81 	.word	0x08000f81
 8000f50:	08001033 	.word	0x08001033
 8000f54:	080010d9 	.word	0x080010d9
 8000f58:	080010d9 	.word	0x080010d9
 8000f5c:	080010d9 	.word	0x080010d9
 8000f60:	080010d9 	.word	0x080010d9
 8000f64:	080010d9 	.word	0x080010d9
 8000f68:	080010d9 	.word	0x080010d9
 8000f6c:	080010d9 	.word	0x080010d9
 8000f70:	080010d9 	.word	0x080010d9
 8000f74:	08001055 	.word	0x08001055
 8000f78:	08001079 	.word	0x08001079
 8000f7c:	0800109d 	.word	0x0800109d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f80:	2100      	movs	r1, #0
 8000f82:	2049      	movs	r0, #73	; 0x49
 8000f84:	f7ff fd57 	bl	8000a36 <SD_SendCmd>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 80a8 	bne.w	80010e0 <SD_disk_ioctl+0x230>
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2110      	movs	r1, #16
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fcdc 	bl	8000954 <SD_RxDataBlock>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 809e 	beq.w	80010e0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	099b      	lsrs	r3, r3, #6
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10e      	bne.n	8000fcc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000fae:	7d7b      	ldrb	r3, [r7, #21]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	7d3b      	ldrb	r3, [r7, #20]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000fc2:	8bfb      	ldrh	r3, [r7, #30]
 8000fc4:	029a      	lsls	r2, r3, #10
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e02e      	b.n	800102a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fcc:	7c7b      	ldrb	r3, [r7, #17]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	7dbb      	ldrb	r3, [r7, #22]
 8000fd6:	09db      	lsrs	r3, r3, #7
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	7d7b      	ldrb	r3, [r7, #21]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f003 0306 	and.w	r3, r3, #6
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ff4:	7d3b      	ldrb	r3, [r7, #20]
 8000ff6:	099b      	lsrs	r3, r3, #6
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	7cfb      	ldrb	r3, [r7, #19]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	b29b      	uxth	r3, r3
 8001004:	4413      	add	r3, r2
 8001006:	b29a      	uxth	r2, r3
 8001008:	7cbb      	ldrb	r3, [r7, #18]
 800100a:	029b      	lsls	r3, r3, #10
 800100c:	b29b      	uxth	r3, r3
 800100e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800101c:	8bfa      	ldrh	r2, [r7, #30]
 800101e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001022:	3b09      	subs	r3, #9
 8001024:	409a      	lsls	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001030:	e056      	b.n	80010e0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001038:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001040:	e055      	b.n	80010ee <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001042:	f7ff fc15 	bl	8000870 <SD_ReadyWait>
 8001046:	4603      	mov	r3, r0
 8001048:	2bff      	cmp	r3, #255	; 0xff
 800104a:	d14b      	bne.n	80010e4 <SD_disk_ioctl+0x234>
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001052:	e047      	b.n	80010e4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001054:	2100      	movs	r1, #0
 8001056:	2049      	movs	r0, #73	; 0x49
 8001058:	f7ff fced 	bl	8000a36 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d142      	bne.n	80010e8 <SD_disk_ioctl+0x238>
 8001062:	2110      	movs	r1, #16
 8001064:	6a38      	ldr	r0, [r7, #32]
 8001066:	f7ff fc75 	bl	8000954 <SD_RxDataBlock>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d03b      	beq.n	80010e8 <SD_disk_ioctl+0x238>
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001076:	e037      	b.n	80010e8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001078:	2100      	movs	r1, #0
 800107a:	204a      	movs	r0, #74	; 0x4a
 800107c:	f7ff fcdb 	bl	8000a36 <SD_SendCmd>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d132      	bne.n	80010ec <SD_disk_ioctl+0x23c>
 8001086:	2110      	movs	r1, #16
 8001088:	6a38      	ldr	r0, [r7, #32]
 800108a:	f7ff fc63 	bl	8000954 <SD_RxDataBlock>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d02b      	beq.n	80010ec <SD_disk_ioctl+0x23c>
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800109a:	e027      	b.n	80010ec <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800109c:	2100      	movs	r1, #0
 800109e:	207a      	movs	r0, #122	; 0x7a
 80010a0:	f7ff fcc9 	bl	8000a36 <SD_SendCmd>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010b0:	e00b      	b.n	80010ca <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80010b2:	6a3c      	ldr	r4, [r7, #32]
 80010b4:	1c63      	adds	r3, r4, #1
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	f7ff fbb0 	bl	800081c <SPI_RxByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80010c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c4:	3301      	adds	r3, #1
 80010c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d9ef      	bls.n	80010b2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80010d8:	2304      	movs	r3, #4
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010de:	e006      	b.n	80010ee <SD_disk_ioctl+0x23e>
			break;
 80010e0:	bf00      	nop
 80010e2:	e004      	b.n	80010ee <SD_disk_ioctl+0x23e>
			break;
 80010e4:	bf00      	nop
 80010e6:	e002      	b.n	80010ee <SD_disk_ioctl+0x23e>
			break;
 80010e8:	bf00      	nop
 80010ea:	e000      	b.n	80010ee <SD_disk_ioctl+0x23e>
			break;
 80010ec:	bf00      	nop
		}

		DESELECT();
 80010ee:	f7ff fb53 	bl	8000798 <DESELECT>
		SPI_RxByte();
 80010f2:	f7ff fb93 	bl	800081c <SPI_RxByte>
	}

	return res;
 80010f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	372c      	adds	r7, #44	; 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <RTC_GetTimeStr>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void RTC_GetTimeStr(char *buffer) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	6078      	str	r0, [r7, #4]
    RTC_DateTypeDef sDate;
    RTC_TimeTypeDef sTime;

    // Obtiene la fecha y hora actual del RTC
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <RTC_GetTimeStr+0x44>)
 800111a:	f002 fe57 	bl	8003dcc <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <RTC_GetTimeStr+0x44>)
 8001128:	f002 fcc2 	bl	8003ab0 <HAL_RTC_GetTime>

    // Formatea la hora como una cadena de caracteres y la guarda en el buffer
    sprintf(buffer, "\n\r%02d:%02d:%02d\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800112c:	7a3b      	ldrb	r3, [r7, #8]
 800112e:	461a      	mov	r2, r3
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	4619      	mov	r1, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	460b      	mov	r3, r1
 800113a:	4905      	ldr	r1, [pc, #20]	; (8001150 <RTC_GetTimeStr+0x48>)
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f007 febd 	bl	8008ebc <siprintf>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000c8 	.word	0x200000c8
 8001150:	08009838 	.word	0x08009838
 8001154:	00000000 	.word	0x00000000

08001158 <GetTemperatura>:

void GetTemperatura( char *timeStr ){
 8001158:	b580      	push	{r7, lr}
 800115a:	b096      	sub	sp, #88	; 0x58
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
	int parte_decimal;
	int adc_value1;
	int adc_value;
	char Cadena[50];

	 HAL_ADC_Start(&hadc1);
 8001160:	4841      	ldr	r0, [pc, #260]	; (8001268 <GetTemperatura+0x110>)
 8001162:	f000 ffc9 	bl	80020f8 <HAL_ADC_Start>
		    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001166:	2164      	movs	r1, #100	; 0x64
 8001168:	483f      	ldr	r0, [pc, #252]	; (8001268 <GetTemperatura+0x110>)
 800116a:	f001 f89f 	bl	80022ac <HAL_ADC_PollForConversion>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d104      	bne.n	800117e <GetTemperatura+0x26>
		      adc_value = HAL_ADC_GetValue(&hadc1);
 8001174:	483c      	ldr	r0, [pc, #240]	; (8001268 <GetTemperatura+0x110>)
 8001176:	f001 f99f 	bl	80024b8 <HAL_ADC_GetValue>
 800117a:	4603      	mov	r3, r0
 800117c:	64fb      	str	r3, [r7, #76]	; 0x4c
		    }
		  HAL_ADC_Stop(&hadc1);
 800117e:	483a      	ldr	r0, [pc, #232]	; (8001268 <GetTemperatura+0x110>)
 8001180:	f001 f868 	bl	8002254 <HAL_ADC_Stop>
		  HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001188:	f000 feba 	bl	8001f00 <HAL_Delay>
		  adc_value1=(((adc_value*TEMP_RESOLUTION)/4096)*3.3*100)-50*TEMP_RESOLUTION;
 800118c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800118e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	da01      	bge.n	800119e <GetTemperatura+0x46>
 800119a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800119e:	131b      	asrs	r3, r3, #12
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fa59 	bl	8000658 <__aeabi_i2d>
 80011a6:	a32c      	add	r3, pc, #176	; (adr r3, 8001258 <GetTemperatura+0x100>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7fe ffd8 	bl	8000160 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <GetTemperatura+0x114>)
 80011be:	f7fe ffcf 	bl	8000160 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	a325      	add	r3, pc, #148	; (adr r3, 8001260 <GetTemperatura+0x108>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff f8f4 	bl	80003bc <__aeabi_dsub>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff faa6 	bl	800072c <__aeabi_d2iz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
		  parte_entera=adc_value1/TEMP_RESOLUTION;
 80011e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <GetTemperatura+0x118>)
 80011e8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ec:	1312      	asrs	r2, r2, #12
 80011ee:	17db      	asrs	r3, r3, #31
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
		  parte_decimal=abs(adc_value1%(parte_entera*TEMP_RESOLUTION));
 80011f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011fa:	fb03 f202 	mul.w	r2, r3, r2
 80011fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001200:	fb93 f1f2 	sdiv	r1, r3, r2
 8001204:	fb01 f202 	mul.w	r2, r1, r2
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	bfb8      	it	lt
 800120e:	425b      	neglt	r3, r3
 8001210:	643b      	str	r3, [r7, #64]	; 0x40
		  parte_decimal=parte_decimal/1000;
 8001212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <GetTemperatura+0x11c>)
 8001216:	fb82 1203 	smull	r1, r2, r2, r3
 800121a:	1192      	asrs	r2, r2, #6
 800121c:	17db      	asrs	r3, r3, #31
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	643b      	str	r3, [r7, #64]	; 0x40

		 sprintf(Cadena,"%s %d,%0.2d °C\n\r", timeStr, parte_entera, parte_decimal);
 8001222:	f107 000c 	add.w	r0, r7, #12
 8001226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4912      	ldr	r1, [pc, #72]	; (8001278 <GetTemperatura+0x120>)
 8001230:	f007 fe44 	bl	8008ebc <siprintf>

		  // Enviar la cadena por UART
		 HAL_UART_Transmit(&huart1, (uint8_t *)Cadena, strlen(Cadena), HAL_MAX_DELAY);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ff89 	bl	8000150 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 010c 	add.w	r1, r7, #12
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <GetTemperatura+0x124>)
 800124c:	f003 fd22 	bl	8004c94 <HAL_UART_Transmit>
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	; 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	66666666 	.word	0x66666666
 800125c:	400a6666 	.word	0x400a6666
 8001260:	00000000 	.word	0x00000000
 8001264:	411e8480 	.word	0x411e8480
 8001268:	20000098 	.word	0x20000098
 800126c:	40590000 	.word	0x40590000
 8001270:	68db8bad 	.word	0x68db8bad
 8001274:	10624dd3 	.word	0x10624dd3
 8001278:	0800984c 	.word	0x0800984c
 800127c:	20000134 	.word	0x20000134

08001280 <iniciosd>:

void iniciosd(FATFS fs,FIL fil){
 8001280:	b084      	sub	sp, #16
 8001282:	b5b0      	push	{r4, r5, r7, lr}
 8001284:	b08a      	sub	sp, #40	; 0x28
 8001286:	af00      	add	r7, sp, #0
 8001288:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char header[] = "|Hora|Temperatura|\n\r|-----|-----|\n\r";
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <iniciosd+0x94>)
 8001292:	1d3c      	adds	r4, r7, #4
 8001294:	461d      	mov	r5, r3
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	6023      	str	r3, [r4, #0]
	f_mount(&fs, "", 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	491c      	ldr	r1, [pc, #112]	; (8001318 <iniciosd+0x98>)
 80012a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80012aa:	f006 fb49 	bl	8007940 <f_mount>
	f_open(&fil, "tabla.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80012ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80012b2:	f103 0318 	add.w	r3, r3, #24
 80012b6:	3310      	adds	r3, #16
 80012b8:	220b      	movs	r2, #11
 80012ba:	4918      	ldr	r1, [pc, #96]	; (800131c <iniciosd+0x9c>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f006 fb89 	bl	80079d4 <f_open>
	f_lseek(&fil, fil.fsize);
 80012c2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80012c6:	f103 0318 	add.w	r3, r3, #24
 80012ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80012d4:	f103 0318 	add.w	r3, r3, #24
 80012d8:	3310      	adds	r3, #16
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f007 f9c3 	bl	8008668 <f_lseek>
	f_puts(header, &fil);
 80012e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80012e6:	f103 0318 	add.w	r3, r3, #24
 80012ea:	3310      	adds	r3, #16
 80012ec:	1d3a      	adds	r2, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f007 fce7 	bl	8008cc4 <f_puts>
	f_close(&fil);
 80012f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80012fa:	f103 0318 	add.w	r3, r3, #24
 80012fe:	3310      	adds	r3, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f007 f986 	bl	8008612 <f_close>
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001310:	b004      	add	sp, #16
 8001312:	4770      	bx	lr
 8001314:	08009870 	.word	0x08009870
 8001318:	08009860 	.word	0x08009860
 800131c:	08009864 	.word	0x08009864

08001320 <flectura>:

void flectura(FATFS fs, FIL fil){
 8001320:	b084      	sub	sp, #16
 8001322:	b590      	push	{r4, r7, lr}
 8001324:	b097      	sub	sp, #92	; 0x5c
 8001326:	af04      	add	r7, sp, #16
 8001328:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800132c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t entero;
	int32_t decimal;
	char buffer[50];

	// Obtiene la fecha y hora actual del RTC
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4848      	ldr	r0, [pc, #288]	; (800145c <flectura+0x13c>)
 800133a:	f002 fd47 	bl	8003dcc <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800133e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <flectura+0x13c>)
 8001348:	f002 fbb2 	bl	8003ab0 <HAL_RTC_GetTime>

	HAL_ADC_Start(&hadc1);
 800134c:	4844      	ldr	r0, [pc, #272]	; (8001460 <flectura+0x140>)
 800134e:	f000 fed3 	bl	80020f8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	4842      	ldr	r0, [pc, #264]	; (8001460 <flectura+0x140>)
 8001356:	f000 ffa9 	bl	80022ac <HAL_ADC_PollForConversion>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d104      	bne.n	800136a <flectura+0x4a>
		adcValue = HAL_ADC_GetValue(&hadc1);
 8001360:	483f      	ldr	r0, [pc, #252]	; (8001460 <flectura+0x140>)
 8001362:	f001 f8a9 	bl	80024b8 <HAL_ADC_GetValue>
 8001366:	4603      	mov	r3, r0
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
	}
	HAL_ADC_Stop(&hadc1);
 800136a:	483d      	ldr	r0, [pc, #244]	; (8001460 <flectura+0x140>)
 800136c:	f000 ff72 	bl	8002254 <HAL_ADC_Stop>
    adcValue=(((adcValue*TEMP_RESOLUTION)/4096)*330)-50*TEMP_RESOLUTION;
 8001370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001372:	f242 7210 	movw	r2, #10000	; 0x2710
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	da01      	bge.n	8001382 <flectura+0x62>
 800137e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001382:	131b      	asrs	r3, r3, #12
 8001384:	461a      	mov	r2, r3
 8001386:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	f5a3 23f4 	sub.w	r3, r3, #499712	; 0x7a000
 8001392:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
    entero=adcValue/TEMP_RESOLUTION;
 8001398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <flectura+0x144>)
 800139c:	fb82 1203 	smull	r1, r2, r2, r3
 80013a0:	1312      	asrs	r2, r2, #12
 80013a2:	17db      	asrs	r3, r3, #31
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
    decimal=(adcValue%(entero*TEMP_RESOLUTION))/100;
 80013a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80013ae:	fb03 f202 	mul.w	r2, r3, r2
 80013b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80013b8:	fb01 f202 	mul.w	r2, r1, r2
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	4a2a      	ldr	r2, [pc, #168]	; (8001468 <flectura+0x148>)
 80013c0:	fb82 1203 	smull	r1, r2, r2, r3
 80013c4:	1152      	asrs	r2, r2, #5
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Formatea la hora como una cadena de caracteres y la guarda en el buffer
	sprintf(buffer, "| %02d:%02d:%02d | %d,%d °C |\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds, entero, decimal);
 80013cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013d0:	4619      	mov	r1, r3
 80013d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013d6:	461c      	mov	r4, r3
 80013d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013dc:	461a      	mov	r2, r3
 80013de:	4638      	mov	r0, r7
 80013e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	4623      	mov	r3, r4
 80013ec:	460a      	mov	r2, r1
 80013ee:	491f      	ldr	r1, [pc, #124]	; (800146c <flectura+0x14c>)
 80013f0:	f007 fd64 	bl	8008ebc <siprintf>
	f_open(&fil, "tabla.txt", FA_OPEN_EXISTING | FA_WRITE | FA_READ);
 80013f4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80013f8:	f103 0318 	add.w	r3, r3, #24
 80013fc:	3310      	adds	r3, #16
 80013fe:	2203      	movs	r2, #3
 8001400:	491b      	ldr	r1, [pc, #108]	; (8001470 <flectura+0x150>)
 8001402:	4618      	mov	r0, r3
 8001404:	f006 fae6 	bl	80079d4 <f_open>
	f_lseek(&fil,fil.fsize);
 8001408:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800140c:	f103 0318 	add.w	r3, r3, #24
 8001410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001416:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800141a:	f103 0318 	add.w	r3, r3, #24
 800141e:	3310      	adds	r3, #16
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f007 f920 	bl	8008668 <f_lseek>
	f_puts(buffer,&fil);
 8001428:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800142c:	f103 0318 	add.w	r3, r3, #24
 8001430:	3310      	adds	r3, #16
 8001432:	463a      	mov	r2, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f007 fc44 	bl	8008cc4 <f_puts>
	f_close(&fil);
 800143c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001440:	f103 0318 	add.w	r3, r3, #24
 8001444:	3310      	adds	r3, #16
 8001446:	4618      	mov	r0, r3
 8001448:	f007 f8e3 	bl	8008612 <f_close>
}
 800144c:	bf00      	nop
 800144e:	374c      	adds	r7, #76	; 0x4c
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001456:	b004      	add	sp, #16
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200000c8 	.word	0x200000c8
 8001460:	20000098 	.word	0x20000098
 8001464:	68db8bad 	.word	0x68db8bad
 8001468:	51eb851f 	.word	0x51eb851f
 800146c:	08009894 	.word	0x08009894
 8001470:	08009864 	.word	0x08009864

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800147a:	b085      	sub	sp, #20
 800147c:	f242 0750 	movw	r7, #8272	; 0x2050
 8001480:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001482:	f000 fcdb 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001486:	f000 f94f 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148a:	f000 fa8b 	bl	80019a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800148e:	f000 fa29 	bl	80018e4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001492:	f003 fd7f 	bl	8004f94 <MX_FATFS_Init>
  MX_RTC_Init();
 8001496:	f000 f9db 	bl	8001850 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800149a:	f000 fa59 	bl	8001950 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800149e:	f000 f999 	bl	80017d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  iniciosd(filesystem,file);
 80014a2:	4c9c      	ldr	r4, [pc, #624]	; (8001714 <main+0x2a0>)
 80014a4:	4a9c      	ldr	r2, [pc, #624]	; (8001718 <main+0x2a4>)
 80014a6:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80014aa:	3320      	adds	r3, #32
 80014ac:	4611      	mov	r1, r2
 80014ae:	f241 022c 	movw	r2, #4140	; 0x102c
 80014b2:	4618      	mov	r0, r3
 80014b4:	f007 fd56 	bl	8008f64 <memcpy>
 80014b8:	4668      	mov	r0, sp
 80014ba:	f104 0310 	add.w	r3, r4, #16
 80014be:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 80014c2:	4619      	mov	r1, r3
 80014c4:	f007 fd4e 	bl	8008f64 <memcpy>
 80014c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014cc:	f7ff fed8 	bl	8001280 <iniciosd>
  char timeStr[50];
  uint8_t botonA,botonB,botonAold,botonBold,changePin;
  uint32_t startTick;
  enum state maquina = espera;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  enum event event = start;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  while (1)
  {

	  switch(maquina){
 80014dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d05f      	beq.n	80015a4 <main+0x130>
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	dcf9      	bgt.n	80014dc <main+0x68>
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <main+0x7e>
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d01b      	beq.n	8001528 <main+0xb4>
 80014f0:	e7f4      	b.n	80014dc <main+0x68>
	  case lectura:
		  flectura(filesystem,file);
 80014f2:	4c88      	ldr	r4, [pc, #544]	; (8001714 <main+0x2a0>)
 80014f4:	4a88      	ldr	r2, [pc, #544]	; (8001718 <main+0x2a4>)
 80014f6:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80014fa:	3320      	adds	r3, #32
 80014fc:	4611      	mov	r1, r2
 80014fe:	f241 022c 	movw	r2, #4140	; 0x102c
 8001502:	4618      	mov	r0, r3
 8001504:	f007 fd2e 	bl	8008f64 <memcpy>
 8001508:	4668      	mov	r0, sp
 800150a:	f104 0310 	add.w	r3, r4, #16
 800150e:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 8001512:	4619      	mov	r1, r3
 8001514:	f007 fd26 	bl	8008f64 <memcpy>
 8001518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800151c:	f7ff ff00 	bl	8001320 <flectura>
		  maquina = espera;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  break;
 8001526:	e0f4      	b.n	8001712 <main+0x29e>

	  case espera:
		  switch(event){
 8001528:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <main+0xc2>
 8001530:	2b01      	cmp	r3, #1
 8001532:	d007      	beq.n	8001544 <main+0xd0>
 8001534:	e030      	b.n	8001598 <main+0x124>
		  case start:
			  startTick = HAL_GetTick();
 8001536:	f000 fcd9 	bl	8001eec <HAL_GetTick>
 800153a:	6378      	str	r0, [r7, #52]	; 0x34
			  event = wait;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  break;
 8001542:	e02e      	b.n	80015a2 <main+0x12e>
		  case wait:
			  botonAold = (uint8_t) HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8001544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001548:	4874      	ldr	r0, [pc, #464]	; (800171c <main+0x2a8>)
 800154a:	f001 fbbd 	bl	8002cc8 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			  botonBold = (uint8_t) HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001558:	4870      	ldr	r0, [pc, #448]	; (800171c <main+0x2a8>)
 800155a:	f001 fbb5 	bl	8002cc8 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			  if( HAL_GetTick() > startTick + MINUTE_TICK_OFFSET ) maquina = lectura;
 8001564:	f000 fcc2 	bl	8001eec <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001570:	429a      	cmp	r2, r3
 8001572:	d902      	bls.n	800157a <main+0x106>
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  if( botonAold == GPIO_PIN_SET || botonBold == GPIO_PIN_SET )
 800157a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800157e:	2b01      	cmp	r3, #1
 8001580:	d003      	beq.n	800158a <main+0x116>
 8001582:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10a      	bne.n	80015a0 <main+0x12c>
			  {
				  maquina = botonEspera;
 800158a:	2302      	movs	r3, #2
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				  event = wait;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  }
			  break;
 8001596:	e003      	b.n	80015a0 <main+0x12c>
		  default:
			  event = wait;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  break;
 800159e:	e000      	b.n	80015a2 <main+0x12e>
			  break;
 80015a0:	bf00      	nop
		  }
		  break;
 80015a2:	e0b6      	b.n	8001712 <main+0x29e>

		  case botonEspera:
			  switch(event){
 80015a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d06b      	beq.n	8001684 <main+0x210>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	f300 80af 	bgt.w	8001710 <main+0x29c>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <main+0x148>
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d007      	beq.n	80015ca <main+0x156>
					  changePin = 1;
				  }
				  if ( HAL_GetTick()%500 != 0 ) changePin = 0;
				  break;
			  }
		  break;
 80015ba:	e0a9      	b.n	8001710 <main+0x29c>
				  startTick = HAL_GetTick();
 80015bc:	f000 fc96 	bl	8001eec <HAL_GetTick>
 80015c0:	6378      	str	r0, [r7, #52]	; 0x34
				  event = wait2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				  break;
 80015c8:	e0a2      	b.n	8001710 <main+0x29c>
				  botonA = (uint8_t) HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80015ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ce:	4853      	ldr	r0, [pc, #332]	; (800171c <main+0x2a8>)
 80015d0:	f001 fb7a 	bl	8002cc8 <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  botonB = (uint8_t) HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	484f      	ldr	r0, [pc, #316]	; (800171c <main+0x2a8>)
 80015e0:	f001 fb72 	bl	8002cc8 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				  if( (botonA != botonAold) && botonB == GPIO_PIN_RESET ){
 80015ea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80015ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d00f      	beq.n	8001616 <main+0x1a2>
 80015f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10b      	bne.n	8001616 <main+0x1a2>
					  RTC_GetTimeStr(timeStr);
 80015fe:	463b      	mov	r3, r7
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd81 	bl	8001108 <RTC_GetTimeStr>
					  GetTemperatura(timeStr);
 8001606:	463b      	mov	r3, r7
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fda5 	bl	8001158 <GetTemperatura>
					  maquina = espera;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001614:	e035      	b.n	8001682 <main+0x20e>
				  else if( (botonB != botonBold) && botonA == GPIO_PIN_RESET ){
 8001616:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800161a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800161e:	429a      	cmp	r2, r3
 8001620:	d01e      	beq.n	8001660 <main+0x1ec>
 8001622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11a      	bne.n	8001660 <main+0x1ec>
					  flectura(filesystem,file);
 800162a:	4c3a      	ldr	r4, [pc, #232]	; (8001714 <main+0x2a0>)
 800162c:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <main+0x2a4>)
 800162e:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8001632:	3320      	adds	r3, #32
 8001634:	4611      	mov	r1, r2
 8001636:	f241 022c 	movw	r2, #4140	; 0x102c
 800163a:	4618      	mov	r0, r3
 800163c:	f007 fc92 	bl	8008f64 <memcpy>
 8001640:	4668      	mov	r0, sp
 8001642:	f104 0310 	add.w	r3, r4, #16
 8001646:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 800164a:	4619      	mov	r1, r3
 800164c:	f007 fc8a 	bl	8008f64 <memcpy>
 8001650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001654:	f7ff fe64 	bl	8001320 <flectura>
					  maquina = espera;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800165e:	e010      	b.n	8001682 <main+0x20e>
				  else if( (botonA && botonB) == GPIO_PIN_SET ) event=start;
 8001660:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <main+0x200>
 8001668:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <main+0x200>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <main+0x202>
 8001674:	2300      	movs	r3, #0
 8001676:	2b01      	cmp	r3, #1
 8001678:	d147      	bne.n	800170a <main+0x296>
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				  break;
 8001680:	e043      	b.n	800170a <main+0x296>
 8001682:	e042      	b.n	800170a <main+0x296>
				  if(( HAL_GetTick() > startTick + WAIT_OFFSET ) &&  (botonA && botonB == GPIO_PIN_SET))
 8001684:	f000 fc32 	bl	8001eec <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001690:	3308      	adds	r3, #8
 8001692:	429a      	cmp	r2, r3
 8001694:	d90d      	bls.n	80016b2 <main+0x23e>
 8001696:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <main+0x23e>
 800169e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d105      	bne.n	80016b2 <main+0x23e>
					  maquina = espera;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					  event = start;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				  if (HAL_GetTick()%500 == 0 && changePin == 0 ){
 80016b2:	f000 fc1b 	bl	8001eec <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <main+0x2ac>)
 80016ba:	fba3 1302 	umull	r1, r3, r3, r2
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10b      	bne.n	80016e6 <main+0x272>
 80016ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <main+0x272>
					  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <main+0x2b0>)
 80016dc:	f001 fb23 	bl	8002d26 <HAL_GPIO_TogglePin>
					  changePin = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				  if ( HAL_GetTick()%500 != 0 ) changePin = 0;
 80016e6:	f000 fc01 	bl	8001eec <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <main+0x2ac>)
 80016ee:	fba3 1302 	umull	r1, r3, r3, r2
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <main+0x29a>
 8001702:	2300      	movs	r3, #0
 8001704:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				  break;
 8001708:	e001      	b.n	800170e <main+0x29a>
				  break;
 800170a:	bf00      	nop
 800170c:	e000      	b.n	8001710 <main+0x29c>
				  break;
 800170e:	bf00      	nop
		  break;
 8001710:	bf00      	nop
	  switch(maquina){
 8001712:	e6e3      	b.n	80014dc <main+0x68>
 8001714:	2000017c 	.word	0x2000017c
 8001718:	200011ac 	.word	0x200011ac
 800171c:	40010c00 	.word	0x40010c00
 8001720:	10624dd3 	.word	0x10624dd3
 8001724:	40011000 	.word	0x40011000

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001732:	2228      	movs	r2, #40	; 0x28
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fbe0 	bl	8008efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001758:	230a      	movs	r3, #10
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001760:	2310      	movs	r3, #16
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001764:	2301      	movs	r3, #1
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fafd 	bl	8002d70 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800177c:	f000 f98e 	bl	8001a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fd6a 	bl	8003274 <HAL_RCC_ClockConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017a6:	f000 f979 	bl	8001a9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80017aa:	2303      	movs	r3, #3
 80017ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fee8 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80017c6:	f000 f969 	bl	8001a9c <Error_Handler>
  }
}
 80017ca:	bf00      	nop
 80017cc:	3750      	adds	r7, #80	; 0x50
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_ADC1_Init+0x74>)
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <MX_ADC1_Init+0x78>)
 80017e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_ADC1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_ADC1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_ADC1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_ADC1_Init+0x74>)
 80017fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_ADC1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_ADC1_Init+0x74>)
 800180c:	2201      	movs	r2, #1
 800180e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_ADC1_Init+0x74>)
 8001812:	f000 fb99 	bl	8001f48 <HAL_ADC_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800181c:	f000 f93e 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001824:	2301      	movs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001828:	2307      	movs	r3, #7
 800182a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_ADC1_Init+0x74>)
 8001832:	f000 fe4d 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800183c:	f000 f92e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000098 	.word	0x20000098
 800184c:	40012400 	.word	0x40012400

08001850 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2100      	movs	r1, #0
 800185a:	460a      	mov	r2, r1
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	460a      	mov	r2, r1
 8001860:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_RTC_Init+0x8c>)
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <MX_RTC_Init+0x90>)
 800186a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_RTC_Init+0x8c>)
 800186e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001872:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_RTC_Init+0x8c>)
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <MX_RTC_Init+0x8c>)
 800187e:	f001 fff3 	bl	8003868 <HAL_RTC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001888:	f000 f908 	bl	8001a9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800188c:	2300      	movs	r3, #0
 800188e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001890:	2300      	movs	r3, #0
 8001892:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001894:	2300      	movs	r3, #0
 8001896:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2201      	movs	r2, #1
 800189c:	4619      	mov	r1, r3
 800189e:	480f      	ldr	r0, [pc, #60]	; (80018dc <MX_RTC_Init+0x8c>)
 80018a0:	f002 f86e 	bl	8003980 <HAL_RTC_SetTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80018aa:	f000 f8f7 	bl	8001a9c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018ae:	2301      	movs	r3, #1
 80018b0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 80018b2:	2304      	movs	r3, #4
 80018b4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	2201      	movs	r2, #1
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_RTC_Init+0x8c>)
 80018c6:	f002 f9cb 	bl	8003c60 <HAL_RTC_SetDate>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80018d0:	f000 f8e4 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000c8 	.word	0x200000c8
 80018e0:	40002800 	.word	0x40002800

080018e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_SPI1_Init+0x64>)
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <MX_SPI1_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_SPI1_Init+0x64>)
 80018f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_SPI1_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_SPI1_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_SPI1_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_SPI1_Init+0x64>)
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_SPI1_Init+0x64>)
 8001918:	2230      	movs	r2, #48	; 0x30
 800191a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_SPI1_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_SPI1_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_SPI1_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_SPI1_Init+0x64>)
 8001930:	220a      	movs	r2, #10
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_SPI1_Init+0x64>)
 8001936:	f002 fd3f 	bl	80043b8 <HAL_SPI_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001940:	f000 f8ac 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000dc 	.word	0x200000dc
 800194c:	40013000 	.word	0x40013000

08001950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_USART1_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001988:	f003 f934 	bl	8004bf4 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001992:	f000 f883 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000134 	.word	0x20000134
 80019a0:	40013800 	.word	0x40013800

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b8:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <MX_GPIO_Init+0xe8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <MX_GPIO_Init+0xe8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_GPIO_Init+0xe8>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_GPIO_Init+0xe8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1e:	481c      	ldr	r0, [pc, #112]	; (8001a90 <MX_GPIO_Init+0xec>)
 8001a20:	f001 f969 	bl	8002cf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2110      	movs	r1, #16
 8001a28:	481a      	ldr	r0, [pc, #104]	; (8001a94 <MX_GPIO_Init+0xf0>)
 8001a2a:	f001 f964 	bl	8002cf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	4812      	ldr	r0, [pc, #72]	; (8001a90 <MX_GPIO_Init+0xec>)
 8001a48:	f000 ffba 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_GPIO_Init+0xf0>)
 8001a64:	f000 ffac 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_GPIO_Init+0xf4>)
 8001a7e:	f000 ff9f 	bl	80029c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_MspInit+0x5c>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_MspInit+0x5c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_MspInit+0x5c>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_MspInit+0x5c>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_MspInit+0x5c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_MspInit+0x5c>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_MspInit+0x60>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_MspInit+0x60>)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000

08001b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_ADC_MspInit+0x6c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d121      	bne.n	8001b70 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_ADC_MspInit+0x70>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2303      	movs	r3, #3
 8001b62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_ADC_MspInit+0x74>)
 8001b6c:	f000 ff28 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40012400 	.word	0x40012400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010800 	.word	0x40010800

08001b84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_RTC_MspInit+0x3c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d110      	bne.n	8001bb8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001b96:	f001 f8df 	bl	8002d58 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_RTC_MspInit+0x40>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_RTC_MspInit+0x40>)
 8001ba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RTC_MspInit+0x40>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RTC_MspInit+0x44>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40002800 	.word	0x40002800
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	4242043c 	.word	0x4242043c

08001bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_SPI_MspInit+0x88>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d12f      	bne.n	8001c4c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c1c:	23a0      	movs	r3, #160	; 0xa0
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001c30:	f000 fec6 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c34:	2340      	movs	r3, #64	; 0x40
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001c48:	f000 feba 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40013000 	.word	0x40013000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010800 	.word	0x40010800

08001c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_UART_MspInit+0x8c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d131      	bne.n	8001ce4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_UART_MspInit+0x90>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <HAL_UART_MspInit+0x90>)
 8001c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_UART_MspInit+0x90>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_UART_MspInit+0x90>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_UART_MspInit+0x90>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_UART_MspInit+0x90>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <HAL_UART_MspInit+0x94>)
 8001cc6:	f000 fe7b 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_UART_MspInit+0x94>)
 8001ce0:	f000 fe6e 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010800 	.word	0x40010800

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cfc:	e7fe      	b.n	8001cfc <NMI_Handler+0x4>

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <SysTick_Handler+0x34>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <SysTick_Handler+0x18>
		Timer1--;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <SysTick_Handler+0x34>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <SysTick_Handler+0x34>)
 8001d52:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <SysTick_Handler+0x38>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <SysTick_Handler+0x2c>
		Timer2--;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Handler+0x38>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <SysTick_Handler+0x38>)
 8001d66:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d68:	f000 f8ae 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000090 	.word	0x20000090
 8001d74:	20000092 	.word	0x20000092

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f007 f8b0 	bl	8008f0c <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20005000 	.word	0x20005000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	200021d8 	.word	0x200021d8
 8001de0:	20002560 	.word	0x20002560

08001de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df0:	f7ff fff8 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df4:	480b      	ldr	r0, [pc, #44]	; (8001e24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001df6:	490c      	ldr	r1, [pc, #48]	; (8001e28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e0c:	4c09      	ldr	r4, [pc, #36]	; (8001e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f007 f87d 	bl	8008f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1e:	f7ff fb29 	bl	8001474 <main>
  bx lr
 8001e22:	4770      	bx	lr
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e2c:	08009ecc 	.word	0x08009ecc
  ldr r2, =_sbss
 8001e30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e34:	2000255c 	.word	0x2000255c

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fd83 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	200f      	movs	r0, #15
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fe26 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd8d 	bl	80029a6 <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea4:	f000 fd63 	bl	800296e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_IncTick+0x1c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_IncTick+0x20>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	200021dc 	.word	0x200021dc

08001eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_GetTick+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	200021dc 	.word	0x200021dc

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff fff0 	bl	8001eec <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffe0 	bl	8001eec <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0be      	b.n	80020e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fdc0 	bl	8001b0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fbf1 	bl	8002774 <ADC_ConversionStop_Disable>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8099 	bne.w	80020d6 <HAL_ADC_Init+0x18e>
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8095 	bne.w	80020d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fb4:	f023 0302 	bic.w	r3, r3, #2
 8001fb8:	f043 0202 	orr.w	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7b1b      	ldrb	r3, [r3, #12]
 8001fce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe0:	d003      	beq.n	8001fea <HAL_ADC_Init+0xa2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_ADC_Init+0xa8>
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_Init+0xaa>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7d1b      	ldrb	r3, [r3, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d119      	bne.n	8002034 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	3b01      	subs	r3, #1
 800200e:	035a      	lsls	r2, r3, #13
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e00b      	b.n	8002034 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_ADC_Init+0x1a8>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	430b      	orrs	r3, r1
 800205a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002064:	d003      	beq.n	800206e <HAL_ADC_Init+0x126>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d104      	bne.n	8002078 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	3b01      	subs	r3, #1
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	430a      	orrs	r2, r1
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_ADC_Init+0x1ac>)
 8002094:	4013      	ands	r3, r2
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b2:	e018      	b.n	80020e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f023 0312 	bic.w	r3, r3, #18
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020d4:	e007      	b.n	80020e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	ffe1f7fd 	.word	0xffe1f7fd
 80020f4:	ff1f0efe 	.word	0xff1f0efe

080020f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Start+0x1a>
 800210e:	2302      	movs	r3, #2
 8002110:	e098      	b.n	8002244 <HAL_ADC_Start+0x14c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fad0 	bl	80026c0 <ADC_Enable>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 8087 	bne.w	800223a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a41      	ldr	r2, [pc, #260]	; (800224c <HAL_ADC_Start+0x154>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d105      	bne.n	8002156 <HAL_ADC_Start+0x5e>
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_ADC_Start+0x158>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d026      	beq.n	80021be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002180:	e01d      	b.n	80021be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_ADC_Start+0x158>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_Start+0xaa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_ADC_Start+0x154>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_ADC_Start+0xc6>
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_ADC_Start+0x158>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f023 0206 	bic.w	r2, r3, #6
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d6:	e002      	b.n	80021de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0202 	mvn.w	r2, #2
 80021ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021fe:	d113      	bne.n	8002228 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_ADC_Start+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d105      	bne.n	8002216 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_ADC_Start+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	e00c      	b.n	8002242 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e003      	b.n	8002242 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40012800 	.word	0x40012800
 8002250:	40012400 	.word	0x40012400

08002254 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_Stop+0x1a>
 800226a:	2302      	movs	r3, #2
 800226c:	e01a      	b.n	80022a4 <HAL_ADC_Stop+0x50>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa7c 	bl	8002774 <ADC_ConversionStop_Disable>
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022c2:	f7ff fe13 	bl	8001eec <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f043 0220 	orr.w	r2, r3, #32
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0d3      	b.n	8002496 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d131      	bne.n	8002360 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12a      	bne.n	8002360 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800230a:	e021      	b.n	8002350 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002312:	d01d      	beq.n	8002350 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADC_PollForConversion+0x7e>
 800231a:	f7ff fde7 	bl	8001eec <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d212      	bcs.n	8002350 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0a2      	b.n	8002496 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0d6      	beq.n	800230c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800235e:	e070      	b.n	8002442 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <HAL_ADC_PollForConversion+0x1f4>)
 8002362:	681c      	ldr	r4, [r3, #0]
 8002364:	2002      	movs	r0, #2
 8002366:	f001 f9c9 	bl	80036fc <HAL_RCCEx_GetPeriphCLKFreq>
 800236a:	4603      	mov	r3, r0
 800236c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <HAL_ADC_PollForConversion+0x1f8>)
 8002378:	400b      	ands	r3, r1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_ADC_PollForConversion+0x104>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68d9      	ldr	r1, [r3, #12]
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_ADC_PollForConversion+0x1fc>)
 8002386:	400b      	ands	r3, r1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d111      	bne.n	80023b0 <HAL_ADC_PollForConversion+0x104>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6919      	ldr	r1, [r3, #16]
 8002392:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_ADC_PollForConversion+0x200>)
 8002394:	400b      	ands	r3, r1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d108      	bne.n	80023ac <HAL_ADC_PollForConversion+0x100>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_ADC_PollForConversion+0x204>)
 80023a2:	400b      	ands	r3, r1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_PollForConversion+0x100>
 80023a8:	2314      	movs	r3, #20
 80023aa:	e020      	b.n	80023ee <HAL_ADC_PollForConversion+0x142>
 80023ac:	2329      	movs	r3, #41	; 0x29
 80023ae:	e01e      	b.n	80023ee <HAL_ADC_PollForConversion+0x142>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_ADC_PollForConversion+0x200>)
 80023b8:	400b      	ands	r3, r1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_ADC_PollForConversion+0x120>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68d9      	ldr	r1, [r3, #12]
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_ADC_PollForConversion+0x204>)
 80023c6:	400b      	ands	r3, r1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00d      	beq.n	80023e8 <HAL_ADC_PollForConversion+0x13c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_ADC_PollForConversion+0x208>)
 80023d4:	400b      	ands	r3, r1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_ADC_PollForConversion+0x140>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_ADC_PollForConversion+0x208>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_PollForConversion+0x140>
 80023e8:	2354      	movs	r3, #84	; 0x54
 80023ea:	e000      	b.n	80023ee <HAL_ADC_PollForConversion+0x142>
 80023ec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023f4:	e021      	b.n	800243a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fc:	d01a      	beq.n	8002434 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_ADC_PollForConversion+0x168>
 8002404:	f7ff fd72 	bl	8001eec <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d20f      	bcs.n	8002434 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d90b      	bls.n	8002434 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e030      	b.n	8002496 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d8d9      	bhi.n	80023f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0212 	mvn.w	r2, #18
 800244a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002462:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002466:	d115      	bne.n	8002494 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000004 	.word	0x20000004
 80024a4:	24924924 	.word	0x24924924
 80024a8:	00924924 	.word	0x00924924
 80024ac:	12492492 	.word	0x12492492
 80024b0:	00492492 	.word	0x00492492
 80024b4:	00249249 	.word	0x00249249

080024b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x20>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e0dc      	b.n	80026aa <HAL_ADC_ConfigChannel+0x1da>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d81c      	bhi.n	800253a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	221f      	movs	r2, #31
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b05      	subs	r3, #5
 800252c:	fa00 f203 	lsl.w	r2, r0, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
 8002538:	e03c      	b.n	80025b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d81c      	bhi.n	800257c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b23      	subs	r3, #35	; 0x23
 8002554:	221f      	movs	r2, #31
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	4019      	ands	r1, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b23      	subs	r3, #35	; 0x23
 800256e:	fa00 f203 	lsl.w	r2, r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
 800257a:	e01b      	b.n	80025b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b41      	subs	r3, #65	; 0x41
 800258e:	221f      	movs	r2, #31
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	4019      	ands	r1, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b41      	subs	r3, #65	; 0x41
 80025a8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d91c      	bls.n	80025f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68d9      	ldr	r1, [r3, #12]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4019      	ands	r1, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6898      	ldr	r0, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	3b1e      	subs	r3, #30
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	e019      	b.n	800262a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6919      	ldr	r1, [r3, #16]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	2207      	movs	r2, #7
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	4019      	ands	r1, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6898      	ldr	r0, [r3, #8]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b10      	cmp	r3, #16
 8002630:	d003      	beq.n	800263a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002636:	2b11      	cmp	r3, #17
 8002638:	d132      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d125      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d126      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002660:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b10      	cmp	r3, #16
 8002668:	d11a      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0c9a      	lsrs	r2, r3, #18
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002680:	e002      	b.n	8002688 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x1b2>
 800268e:	e007      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40012400 	.word	0x40012400
 80026b8:	20000004 	.word	0x20000004
 80026bc:	431bde83 	.word	0x431bde83

080026c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d040      	beq.n	8002760 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <ADC_Enable+0xac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <ADC_Enable+0xb0>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026fc:	e002      	b.n	8002704 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800270a:	f7ff fbef 	bl	8001eec <HAL_GetTick>
 800270e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002710:	e01f      	b.n	8002752 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002712:	f7ff fbeb 	bl	8001eec <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d918      	bls.n	8002752 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d011      	beq.n	8002752 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d1d8      	bne.n	8002712 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000004 	.word	0x20000004
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d12e      	bne.n	80027ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800279e:	f7ff fba5 	bl	8001eec <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027a4:	e01b      	b.n	80027de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a6:	f7ff fba1 	bl	8001eec <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d914      	bls.n	80027de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d10d      	bne.n	80027de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e007      	b.n	80027ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d0dc      	beq.n	80027a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	; (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
         );
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002938:	f7ff ff90 	bl	800285c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff49 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff5e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff90 	bl	80028b0 <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5f 	bl	800285c <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffb0 	bl	8002914 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d2:	e169      	b.n	8002ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029d4:	2201      	movs	r2, #1
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 8158 	bne.w	8002ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a9a      	ldr	r2, [pc, #616]	; (8002c60 <HAL_GPIO_Init+0x2a0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d05e      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 80029fc:	4a98      	ldr	r2, [pc, #608]	; (8002c60 <HAL_GPIO_Init+0x2a0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d875      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a02:	4a98      	ldr	r2, [pc, #608]	; (8002c64 <HAL_GPIO_Init+0x2a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d058      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a08:	4a96      	ldr	r2, [pc, #600]	; (8002c64 <HAL_GPIO_Init+0x2a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d86f      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a0e:	4a96      	ldr	r2, [pc, #600]	; (8002c68 <HAL_GPIO_Init+0x2a8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d052      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a14:	4a94      	ldr	r2, [pc, #592]	; (8002c68 <HAL_GPIO_Init+0x2a8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d869      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a1a:	4a94      	ldr	r2, [pc, #592]	; (8002c6c <HAL_GPIO_Init+0x2ac>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d04c      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a20:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_GPIO_Init+0x2ac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d863      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a26:	4a92      	ldr	r2, [pc, #584]	; (8002c70 <HAL_GPIO_Init+0x2b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d046      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a2c:	4a90      	ldr	r2, [pc, #576]	; (8002c70 <HAL_GPIO_Init+0x2b0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d85d      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d82a      	bhi.n	8002a8c <HAL_GPIO_Init+0xcc>
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d859      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <HAL_GPIO_Init+0x80>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002abb 	.word	0x08002abb
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	08002aa7 	.word	0x08002aa7
 8002a4c:	08002ae9 	.word	0x08002ae9
 8002a50:	08002aef 	.word	0x08002aef
 8002a54:	08002aef 	.word	0x08002aef
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002aef 	.word	0x08002aef
 8002a60:	08002aef 	.word	0x08002aef
 8002a64:	08002aef 	.word	0x08002aef
 8002a68:	08002aef 	.word	0x08002aef
 8002a6c:	08002aef 	.word	0x08002aef
 8002a70:	08002aef 	.word	0x08002aef
 8002a74:	08002aef 	.word	0x08002aef
 8002a78:	08002aef 	.word	0x08002aef
 8002a7c:	08002aef 	.word	0x08002aef
 8002a80:	08002aef 	.word	0x08002aef
 8002a84:	08002a9d 	.word	0x08002a9d
 8002a88:	08002ab1 	.word	0x08002ab1
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_GPIO_Init+0x2b4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a92:	e02c      	b.n	8002aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	623b      	str	r3, [r7, #32]
          break;
 8002a9a:	e029      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	623b      	str	r3, [r7, #32]
          break;
 8002aa4:	e024      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	623b      	str	r3, [r7, #32]
          break;
 8002aae:	e01f      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	e01a      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	623b      	str	r3, [r7, #32]
          break;
 8002ac6:	e013      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	611a      	str	r2, [r3, #16]
          break;
 8002ada:	e009      	b.n	8002af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002adc:	2308      	movs	r3, #8
 8002ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	615a      	str	r2, [r3, #20]
          break;
 8002ae6:	e003      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
          break;
 8002aec:	e000      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          break;
 8002aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	d801      	bhi.n	8002afa <HAL_GPIO_Init+0x13a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	e001      	b.n	8002afe <HAL_GPIO_Init+0x13e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2bff      	cmp	r3, #255	; 0xff
 8002b04:	d802      	bhi.n	8002b0c <HAL_GPIO_Init+0x14c>
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x152>
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	3b08      	subs	r3, #8
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	210f      	movs	r1, #15
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80b1 	beq.w	8002ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b58:	4a48      	ldr	r2, [pc, #288]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a40      	ldr	r2, [pc, #256]	; (8002c80 <HAL_GPIO_Init+0x2c0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_GPIO_Init+0x1ec>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_GPIO_Init+0x1e8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3e      	ldr	r2, [pc, #248]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d007      	beq.n	8002ba4 <HAL_GPIO_Init+0x1e4>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <HAL_GPIO_Init+0x2cc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_GPIO_Init+0x1e0>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e006      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	e004      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002bac:	2300      	movs	r3, #0
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	f002 0203 	and.w	r2, r2, #3
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	4093      	lsls	r3, r2
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bbe:	492f      	ldr	r1, [pc, #188]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	492c      	ldr	r1, [pc, #176]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002be6:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	4928      	ldr	r1, [pc, #160]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	491e      	ldr	r1, [pc, #120]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	4918      	ldr	r1, [pc, #96]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	4914      	ldr	r1, [pc, #80]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d021      	beq.n	8002c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	490e      	ldr	r1, [pc, #56]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e021      	b.n	8002ca2 <HAL_GPIO_Init+0x2e2>
 8002c5e:	bf00      	nop
 8002c60:	10320000 	.word	0x10320000
 8002c64:	10310000 	.word	0x10310000
 8002c68:	10220000 	.word	0x10220000
 8002c6c:	10210000 	.word	0x10210000
 8002c70:	10120000 	.word	0x10120000
 8002c74:	10110000 	.word	0x10110000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010800 	.word	0x40010800
 8002c84:	40010c00 	.word	0x40010c00
 8002c88:	40011000 	.word	0x40011000
 8002c8c:	40011400 	.word	0x40011400
 8002c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_GPIO_Init+0x304>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <HAL_GPIO_Init+0x304>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f47f ae8e 	bne.w	80029d4 <HAL_GPIO_Init+0x14>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	372c      	adds	r7, #44	; 0x2c
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e001      	b.n	8002cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d06:	787b      	ldrb	r3, [r7, #1]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d12:	e003      	b.n	8002d1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d38:	887a      	ldrh	r2, [r7, #2]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	041a      	lsls	r2, r3, #16
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	400b      	ands	r3, r1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_PWR_EnableBkUpAccess+0x14>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	420e0020 	.word	0x420e0020

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e272      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8087 	beq.w	8002e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d90:	4b92      	ldr	r3, [pc, #584]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d112      	bne.n	8002dce <HAL_RCC_OscConfig+0x5e>
 8002da8:	4b8c      	ldr	r3, [pc, #560]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d10b      	bne.n	8002dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d06c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x12c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d168      	bne.n	8002e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e24c      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x76>
 8002dd8:	4b80      	ldr	r3, [pc, #512]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7f      	ldr	r2, [pc, #508]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e02e      	b.n	8002e44 <HAL_RCC_OscConfig+0xd4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b7b      	ldr	r3, [pc, #492]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7a      	ldr	r2, [pc, #488]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b78      	ldr	r3, [pc, #480]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a77      	ldr	r2, [pc, #476]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e01d      	b.n	8002e44 <HAL_RCC_OscConfig+0xd4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0xbc>
 8002e12:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a71      	ldr	r2, [pc, #452]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b6f      	ldr	r3, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0xd4>
 8002e2c:	4b6b      	ldr	r3, [pc, #428]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6a      	ldr	r2, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a67      	ldr	r2, [pc, #412]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f84e 	bl	8001eec <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7ff f84a 	bl	8001eec <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e200      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0xe4>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7ff f83a 	bl	8001eec <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7ff f836 	bl	8001eec <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1ec      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x10c>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eaa:	4b4c      	ldr	r3, [pc, #304]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eb6:	4b49      	ldr	r3, [pc, #292]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d11c      	bne.n	8002efc <HAL_RCC_OscConfig+0x18c>
 8002ec2:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d116      	bne.n	8002efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x176>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1c0      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4939      	ldr	r1, [pc, #228]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x270>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe ffef 	bl	8001eec <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fe ffeb 	bl	8001eec <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1a1      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b2a      	ldr	r3, [pc, #168]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4927      	ldr	r1, [pc, #156]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_OscConfig+0x270>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe ffce 	bl	8001eec <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe ffca 	bl	8001eec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e180      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03a      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d019      	beq.n	8002fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCC_OscConfig+0x274>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7fe ffae 	bl	8001eec <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe ffaa 	bl	8001eec <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e160      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f000 face 	bl	8003554 <RCC_Delay>
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe ff94 	bl	8001eec <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc6:	e00f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe ff90 	bl	8001eec <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d908      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e146      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	42420000 	.word	0x42420000
 8002fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	4b92      	ldr	r3, [pc, #584]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e9      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80a6 	beq.w	800314e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b8b      	ldr	r3, [pc, #556]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4a87      	ldr	r2, [pc, #540]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	61d3      	str	r3, [r2, #28]
 800301e:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b82      	ldr	r3, [pc, #520]	; (8003238 <HAL_RCC_OscConfig+0x4c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303a:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <HAL_RCC_OscConfig+0x4c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7e      	ldr	r2, [pc, #504]	; (8003238 <HAL_RCC_OscConfig+0x4c8>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7fe ff51 	bl	8001eec <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304e:	f7fe ff4d 	bl	8001eec <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	; 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e103      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x4c8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x312>
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a6e      	ldr	r2, [pc, #440]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	e02d      	b.n	80030de <HAL_RCC_OscConfig+0x36e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x334>
 800308a:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a69      	ldr	r2, [pc, #420]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6213      	str	r3, [r2, #32]
 8003096:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a66      	ldr	r2, [pc, #408]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	e01c      	b.n	80030de <HAL_RCC_OscConfig+0x36e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x356>
 80030ac:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a60      	ldr	r2, [pc, #384]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6213      	str	r3, [r2, #32]
 80030b8:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a5d      	ldr	r2, [pc, #372]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	e00b      	b.n	80030de <HAL_RCC_OscConfig+0x36e>
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6213      	str	r3, [r2, #32]
 80030d2:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe ff01 	bl	8001eec <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe fefd 	bl	8001eec <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0b1      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ee      	beq.n	80030ee <HAL_RCC_OscConfig+0x37e>
 8003110:	e014      	b.n	800313c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe feeb 	bl	8001eec <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe fee7 	bl	8001eec <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e09b      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8087 	beq.w	8003266 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d061      	beq.n	8003228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d146      	bne.n	80031fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_RCC_OscConfig+0x4cc>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7fe febb 	bl	8001eec <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe feb7 	bl	8001eec <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e06d      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318c:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a0:	d108      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4921      	ldr	r1, [pc, #132]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a19      	ldr	r1, [r3, #32]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	430b      	orrs	r3, r1
 80031c6:	491b      	ldr	r1, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fe8b 	bl	8001eec <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fe87 	bl	8001eec <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03d      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x46a>
 80031f8:	e035      	b.n	8003266 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fe74 	bl	8001eec <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fe70 	bl	8001eec <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e026      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x498>
 8003226:	e01e      	b.n	8003266 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e019      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
 800323c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_OscConfig+0x500>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	429a      	cmp	r2, r3
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0d0      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d910      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 0207 	bic.w	r2, r3, #7
 800329e:	4965      	ldr	r1, [pc, #404]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b8      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d0:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	494d      	ldr	r1, [pc, #308]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d040      	beq.n	8003394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d115      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e07f      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e073      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06b      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4936      	ldr	r1, [pc, #216]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fdc2 	bl	8001eec <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fdbe 	bl	8001eec <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e053      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d210      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4922      	ldr	r1, [pc, #136]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e032      	b.n	800342a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4916      	ldr	r1, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	490e      	ldr	r1, [pc, #56]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003402:	f000 f821 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003406:	4602      	mov	r2, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	490a      	ldr	r1, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	5ccb      	ldrb	r3, [r1, r3]
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1cc>)
 800341c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fd20 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40022000 	.word	0x40022000
 8003438:	40021000 	.word	0x40021000
 800343c:	08009900 	.word	0x08009900
 8003440:	20000004 	.word	0x20000004
 8003444:	20000008 	.word	0x20000008

08003448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x30>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x36>
 8003476:	e027      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800347a:	613b      	str	r3, [r7, #16]
      break;
 800347c:	e027      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	0c5b      	lsrs	r3, r3, #17
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034aa:	fb03 f202 	mul.w	r2, r3, r2
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e004      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	613b      	str	r3, [r7, #16]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ca:	613b      	str	r3, [r7, #16]
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	693b      	ldr	r3, [r7, #16]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	007a1200 	.word	0x007a1200
 80034e4:	08009918 	.word	0x08009918
 80034e8:	08009928 	.word	0x08009928
 80034ec:	003d0900 	.word	0x003d0900

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <HAL_RCC_GetHCLKFreq+0x10>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff2 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	08009910 	.word	0x08009910

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffde 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0adb      	lsrs	r3, r3, #11
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	08009910 	.word	0x08009910

08003554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <RCC_Delay+0x34>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0a      	ldr	r2, [pc, #40]	; (800358c <RCC_Delay+0x38>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0a5b      	lsrs	r3, r3, #9
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003570:	bf00      	nop
  }
  while (Delay --);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	60fa      	str	r2, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f9      	bne.n	8003570 <RCC_Delay+0x1c>
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000004 	.word	0x20000004
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d07d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b0:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4a4b      	ldr	r2, [pc, #300]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	61d3      	str	r3, [r2, #28]
 80035c8:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d118      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e4:	4b43      	ldr	r3, [pc, #268]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a42      	ldr	r2, [pc, #264]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f0:	f7fe fc7c 	bl	8001eec <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	e008      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f8:	f7fe fc78 	bl	8001eec <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e06d      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d027      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003634:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe fc47 	bl	8001eec <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe fc43 	bl	8001eec <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e036      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ee      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4917      	ldr	r1, [pc, #92]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	4313      	orrs	r3, r2
 8003694:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	490b      	ldr	r1, [pc, #44]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
 80036f8:	42420440 	.word	0x42420440

080036fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b10      	cmp	r3, #16
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b10      	cmp	r3, #16
 8003722:	f200 808a 	bhi.w	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d045      	beq.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d075      	beq.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003732:	e082      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800373a:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d07b      	beq.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0c9b      	lsrs	r3, r3, #18
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800375e:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0c5b      	lsrs	r3, r3, #17
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003778:	4a38      	ldr	r2, [pc, #224]	; (800385c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4a34      	ldr	r2, [pc, #208]	; (8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003794:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d102      	bne.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	61bb      	str	r3, [r7, #24]
      break;
 80037a6:	e04a      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
      break;
 80037b6:	e042      	b.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c8:	d108      	bne.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80037d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e01f      	b.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e6:	d109      	bne.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80037f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e00f      	b.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d11c      	bne.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d016      	beq.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003814:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003818:	61bb      	str	r3, [r7, #24]
      break;
 800381a:	e012      	b.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800381c:	e011      	b.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800381e:	f7ff fe85 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0b9b      	lsrs	r3, r3, #14
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	61bb      	str	r3, [r7, #24]
      break;
 8003838:	e004      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003842:	bf00      	nop
    }
  }
  return (frequency);
 8003844:	69bb      	ldr	r3, [r7, #24]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	0800992c 	.word	0x0800992c
 8003858:	0800993c 	.word	0x0800993c
 800385c:	007a1200 	.word	0x007a1200
 8003860:	003d0900 	.word	0x003d0900
 8003864:	aaaaaaab 	.word	0xaaaaaaab

08003868 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07a      	b.n	8003974 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7c5b      	ldrb	r3, [r3, #17]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fe f978 	bl	8001b84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 faea 	bl	8003e74 <HAL_RTC_WaitForSynchro>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2204      	movs	r2, #4
 80038aa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e061      	b.n	8003974 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fba3 	bl	8003ffc <RTC_EnterInitMode>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e056      	b.n	8003974 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0207 	bic.w	r2, r2, #7
 80038d4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RTC_Init+0x114>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a26      	ldr	r2, [pc, #152]	; (800397c <HAL_RTC_Init+0x114>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RTC_Init+0x114>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4921      	ldr	r1, [pc, #132]	; (800397c <HAL_RTC_Init+0x114>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003904:	d003      	beq.n	800390e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e00e      	b.n	800392c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800390e:	2001      	movs	r0, #1
 8003910:	f7ff fef4 	bl	80036fc <HAL_RCCEx_GetPeriphCLKFreq>
 8003914:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2204      	movs	r2, #4
 8003920:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e026      	b.n	8003974 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b01      	subs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	0c1a      	lsrs	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 020f 	and.w	r2, r2, #15
 8003938:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	b292      	uxth	r2, r2
 8003942:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fb81 	bl	800404c <RTC_ExitInitMode>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2204      	movs	r2, #4
 8003954:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00c      	b.n	8003974 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40006c00 	.word	0x40006c00

08003980 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_RTC_SetTime+0x20>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e080      	b.n	8003aa6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	7c1b      	ldrb	r3, [r3, #16]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_RTC_SetTime+0x30>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e07a      	b.n	8003aa6 <HAL_RTC_SetTime+0x126>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2202      	movs	r2, #2
 80039ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d113      	bne.n	80039ea <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80039cc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	4619      	mov	r1, r3
 80039d6:	460b      	mov	r3, r1
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a5b      	subs	r3, r3, r1
 80039dc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80039de:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80039e4:	4413      	add	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e01e      	b.n	8003a28 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fb71 	bl	80040d6 <RTC_Bcd2ToByte>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80039fc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fb66 	bl	80040d6 <RTC_Bcd2ToByte>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a16:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	789b      	ldrb	r3, [r3, #2]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fb5a 	bl	80040d6 <RTC_Bcd2ToByte>
 8003a22:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a24:	4423      	add	r3, r4
 8003a26:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a28:	6979      	ldr	r1, [r7, #20]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa7f 	bl	8003f2e <RTC_WriteTimeCounter>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e02f      	b.n	8003aa6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0205 	bic.w	r2, r2, #5
 8003a54:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa90 	bl	8003f7c <RTC_ReadAlarmCounter>
 8003a5c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a64:	d018      	beq.n	8003a98 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d214      	bcs.n	8003a98 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003a74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a78:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fa96 	bl	8003fae <RTC_WriteAlarmCounter>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e006      	b.n	8003aa6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd90      	pop	{r4, r7, pc}
	...

08003ab0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RTC_GetTime+0x28>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b5      	b.n	8003c48 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0ac      	b.n	8003c48 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f9ed 	bl	8003ece <RTC_ReadTimeCounter>
 8003af4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4a55      	ldr	r2, [pc, #340]	; (8003c50 <HAL_RTC_GetTime+0x1a0>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0adb      	lsrs	r3, r3, #11
 8003b00:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <HAL_RTC_GetTime+0x1a0>)
 8003b06:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0a:	0adb      	lsrs	r3, r3, #11
 8003b0c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_RTC_GetTime+0x1a4>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_RTC_GetTime+0x1a0>)
 8003b28:	fba2 1203 	umull	r1, r2, r2, r3
 8003b2c:	0ad2      	lsrs	r2, r2, #11
 8003b2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003b32:	fb01 f202 	mul.w	r2, r1, r2
 8003b36:	1a9a      	subs	r2, r3, r2
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <HAL_RTC_GetTime+0x1a4>)
 8003b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b3e:	0959      	lsrs	r1, r3, #5
 8003b40:	460b      	mov	r3, r1
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a5b      	subs	r3, r3, r1
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	1ad1      	subs	r1, r2, r3
 8003b4a:	b2ca      	uxtb	r2, r1
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b17      	cmp	r3, #23
 8003b54:	d955      	bls.n	8003c02 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4a3f      	ldr	r2, [pc, #252]	; (8003c58 <HAL_RTC_GetTime+0x1a8>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003b62:	6939      	ldr	r1, [r7, #16]
 8003b64:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <HAL_RTC_GetTime+0x1a8>)
 8003b66:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6a:	091a      	lsrs	r2, r3, #4
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1aca      	subs	r2, r1, r3
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f9fd 	bl	8003f7c <RTC_ReadAlarmCounter>
 8003b82:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b8a:	d008      	beq.n	8003b9e <HAL_RTC_GetTime+0xee>
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d904      	bls.n	8003b9e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e002      	b.n	8003ba4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4a2d      	ldr	r2, [pc, #180]	; (8003c5c <HAL_RTC_GetTime+0x1ac>)
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f9ba 	bl	8003f2e <RTC_WriteTimeCounter>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e041      	b.n	8003c48 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bca:	d00c      	beq.n	8003be6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003bd4:	69f9      	ldr	r1, [r7, #28]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9e9 	bl	8003fae <RTC_WriteAlarmCounter>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e030      	b.n	8003c48 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f9e0 	bl	8003fae <RTC_WriteAlarmCounter>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e027      	b.n	8003c48 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fa88 	bl	8004110 <RTC_DateUpdate>
 8003c00:	e003      	b.n	8003c0a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fa41 	bl	800409c <RTC_ByteToBcd2>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa38 	bl	800409c <RTC_ByteToBcd2>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	789b      	ldrb	r3, [r3, #2]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa2f 	bl	800409c <RTC_ByteToBcd2>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	91a2b3c5 	.word	0x91a2b3c5
 8003c54:	88888889 	.word	0x88888889
 8003c58:	aaaaaaab 	.word	0xaaaaaaab
 8003c5c:	00015180 	.word	0x00015180

08003c60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_RTC_SetDate+0x24>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e097      	b.n	8003db8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	7c1b      	ldrb	r3, [r3, #16]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_RTC_SetDate+0x34>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e091      	b.n	8003db8 <HAL_RTC_SetDate+0x158>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	78da      	ldrb	r2, [r3, #3]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785a      	ldrb	r2, [r3, #1]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	789a      	ldrb	r2, [r3, #2]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	739a      	strb	r2, [r3, #14]
 8003cbe:	e01a      	b.n	8003cf6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fa06 	bl	80040d6 <RTC_Bcd2ToByte>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f9fd 	bl	80040d6 <RTC_Bcd2ToByte>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	789b      	ldrb	r3, [r3, #2]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f9f4 	bl	80040d6 <RTC_Bcd2ToByte>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	7bdb      	ldrb	r3, [r3, #15]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	7b59      	ldrb	r1, [r3, #13]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	7b9b      	ldrb	r3, [r3, #14]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f000 fadf 	bl	80042c8 <RTC_WeekDayNum>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	7b1a      	ldrb	r2, [r3, #12]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f8d7 	bl	8003ece <RTC_ReadTimeCounter>
 8003d20:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <HAL_RTC_SetDate+0x160>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b18      	cmp	r3, #24
 8003d32:	d93a      	bls.n	8003daa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <HAL_RTC_SetDate+0x164>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <HAL_RTC_SetDate+0x168>)
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003d4a:	69f9      	ldr	r1, [r7, #28]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f8ee 	bl	8003f2e <RTC_WriteTimeCounter>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e027      	b.n	8003db8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f907 	bl	8003f7c <RTC_ReadAlarmCounter>
 8003d6e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d76:	d018      	beq.n	8003daa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d214      	bcs.n	8003daa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003d86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d8a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f90d 	bl	8003fae <RTC_WriteAlarmCounter>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e006      	b.n	8003db8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	91a2b3c5 	.word	0x91a2b3c5
 8003dc4:	aaaaaaab 	.word	0xaaaaaaab
 8003dc8:	00015180 	.word	0x00015180

08003dcc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	2100      	movs	r1, #0
 8003dde:	460a      	mov	r2, r1
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	460a      	mov	r2, r1
 8003de4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_RTC_GetDate+0x26>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e03a      	b.n	8003e6c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff fe56 	bl	8003ab0 <HAL_RTC_GetTime>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02e      	b.n	8003e6c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	7b1a      	ldrb	r2, [r3, #12]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	7bda      	ldrb	r2, [r3, #15]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	7b5a      	ldrb	r2, [r3, #13]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	7b9a      	ldrb	r2, [r3, #14]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01a      	beq.n	8003e6a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	78db      	ldrb	r3, [r3, #3]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f92f 	bl	800409c <RTC_ByteToBcd2>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f926 	bl	800409c <RTC_ByteToBcd2>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	789b      	ldrb	r3, [r3, #2]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f91d 	bl	800409c <RTC_ByteToBcd2>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e01d      	b.n	8003ec6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0208 	bic.w	r2, r2, #8
 8003e98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e9a:	f7fe f827 	bl	8001eec <HAL_GetTick>
 8003e9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ea0:	e009      	b.n	8003eb6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ea2:	f7fe f823 	bl	8001eec <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e007      	b.n	8003ec6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	827b      	strh	r3, [r7, #18]
 8003eda:	2300      	movs	r3, #0
 8003edc:	823b      	strh	r3, [r7, #16]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003efe:	8a7a      	ldrh	r2, [r7, #18]
 8003f00:	8a3b      	ldrh	r3, [r7, #16]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d008      	beq.n	8003f18 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003f06:	8a3b      	ldrh	r3, [r7, #16]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e004      	b.n	8003f22 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003f18:	8a7b      	ldrh	r3, [r7, #18]
 8003f1a:	041a      	lsls	r2, r3, #16
 8003f1c:	89fb      	ldrh	r3, [r7, #14]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003f22:	697b      	ldr	r3, [r7, #20]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f85d 	bl	8003ffc <RTC_EnterInitMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e011      	b.n	8003f72 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	0c12      	lsrs	r2, r2, #16
 8003f56:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b292      	uxth	r2, r2
 8003f60:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f872 	bl	800404c <RTC_ExitInitMode>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	81fb      	strh	r3, [r7, #14]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
 8003f9e:	041a      	lsls	r2, r3, #16
 8003fa0:	89bb      	ldrh	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f81d 	bl	8003ffc <RTC_EnterInitMode>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e011      	b.n	8003ff2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	0c12      	lsrs	r2, r2, #16
 8003fd6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f832 	bl	800404c <RTC_ExitInitMode>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004008:	f7fd ff70 	bl	8001eec <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800400e:	e009      	b.n	8004024 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004010:	f7fd ff6c 	bl	8001eec <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401e:	d901      	bls.n	8004024 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e00f      	b.n	8004044 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0210 	orr.w	r2, r2, #16
 8004040:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0210 	bic.w	r2, r2, #16
 8004066:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004068:	f7fd ff40 	bl	8001eec <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800406e:	e009      	b.n	8004084 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004070:	f7fd ff3c 	bl	8001eec <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407e:	d901      	bls.n	8004084 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e007      	b.n	8004094 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80040aa:	e005      	b.n	80040b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	3b0a      	subs	r3, #10
 80040b6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d8f6      	bhi.n	80040ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b2db      	uxtb	r3, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	4413      	add	r3, r2
 8004104:	b2db      	uxtb	r3, r3
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7bdb      	ldrb	r3, [r3, #15]
 800412e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7b5b      	ldrb	r3, [r3, #13]
 8004134:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7b9b      	ldrb	r3, [r3, #14]
 800413a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	e06f      	b.n	8004222 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d011      	beq.n	800416c <RTC_DateUpdate+0x5c>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d00e      	beq.n	800416c <RTC_DateUpdate+0x5c>
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d00b      	beq.n	800416c <RTC_DateUpdate+0x5c>
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b07      	cmp	r3, #7
 8004158:	d008      	beq.n	800416c <RTC_DateUpdate+0x5c>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d005      	beq.n	800416c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b0a      	cmp	r3, #10
 8004164:	d002      	beq.n	800416c <RTC_DateUpdate+0x5c>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d117      	bne.n	800419c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b1e      	cmp	r3, #30
 8004170:	d803      	bhi.n	800417a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004178:	e050      	b.n	800421c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d005      	beq.n	800418c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3301      	adds	r3, #1
 8004184:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004186:	2301      	movs	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800418a:	e047      	b.n	800421c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800418c:	2301      	movs	r3, #1
 800418e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004190:	2301      	movs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
          year++;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800419a:	e03f      	b.n	800421c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d008      	beq.n	80041b4 <RTC_DateUpdate+0xa4>
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b06      	cmp	r3, #6
 80041a6:	d005      	beq.n	80041b4 <RTC_DateUpdate+0xa4>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d002      	beq.n	80041b4 <RTC_DateUpdate+0xa4>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b0b      	cmp	r3, #11
 80041b2:	d10c      	bne.n	80041ce <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b1d      	cmp	r3, #29
 80041b8:	d803      	bhi.n	80041c2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3301      	adds	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80041c0:	e02c      	b.n	800421c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3301      	adds	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80041c8:	2301      	movs	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80041cc:	e026      	b.n	800421c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d123      	bne.n	800421c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b1b      	cmp	r3, #27
 80041d8:	d803      	bhi.n	80041e2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e01c      	b.n	800421c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b1c      	cmp	r3, #28
 80041e6:	d111      	bne.n	800420c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f839 	bl	8004264 <RTC_IsLeapYear>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <RTC_DateUpdate+0xf0>
        {
          day++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e00d      	b.n	800421c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	3301      	adds	r3, #1
 8004204:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004206:	2301      	movs	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e007      	b.n	800421c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b1d      	cmp	r3, #29
 8004210:	d104      	bne.n	800421c <RTC_DateUpdate+0x10c>
      {
        month++;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004218:	2301      	movs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3301      	adds	r3, #1
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d38b      	bcc.n	8004142 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	4619      	mov	r1, r3
 800424c:	6978      	ldr	r0, [r7, #20]
 800424e:	f000 f83b 	bl	80042c8 <RTC_WeekDayNum>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	731a      	strb	r2, [r3, #12]
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	e01d      	b.n	80042ba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <RTC_IsLeapYear+0x60>)
 8004282:	fba2 1203 	umull	r1, r2, r2, r3
 8004286:	0952      	lsrs	r2, r2, #5
 8004288:	2164      	movs	r1, #100	; 0x64
 800428a:	fb01 f202 	mul.w	r2, r1, r2
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <RTC_IsLeapYear+0x60>)
 800429e:	fba2 1203 	umull	r1, r2, r2, r3
 80042a2:	09d2      	lsrs	r2, r2, #7
 80042a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80042a8:	fb01 f202 	mul.w	r2, r1, r2
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80042b8:	2300      	movs	r3, #0
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	51eb851f 	.word	0x51eb851f

080042c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
 80042d4:	4613      	mov	r3, r2
 80042d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80042e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d82d      	bhi.n	800434a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	4a2c      	ldr	r2, [pc, #176]	; (80043ac <RTC_WeekDayNum+0xe4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	085a      	lsrs	r2, r3, #1
 8004302:	78bb      	ldrb	r3, [r7, #2]
 8004304:	441a      	add	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	441a      	add	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3b01      	subs	r3, #1
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3b01      	subs	r3, #1
 8004316:	4926      	ldr	r1, [pc, #152]	; (80043b0 <RTC_WeekDayNum+0xe8>)
 8004318:	fba1 1303 	umull	r1, r3, r1, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3b01      	subs	r3, #1
 8004324:	4922      	ldr	r1, [pc, #136]	; (80043b0 <RTC_WeekDayNum+0xe8>)
 8004326:	fba1 1303 	umull	r1, r3, r1, r3
 800432a:	09db      	lsrs	r3, r3, #7
 800432c:	4413      	add	r3, r2
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <RTC_WeekDayNum+0xec>)
 8004332:	fba3 1302 	umull	r1, r3, r3, r2
 8004336:	1ad1      	subs	r1, r2, r3
 8004338:	0849      	lsrs	r1, r1, #1
 800433a:	440b      	add	r3, r1
 800433c:	0899      	lsrs	r1, r3, #2
 800433e:	460b      	mov	r3, r1
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	1a5b      	subs	r3, r3, r1
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e029      	b.n	800439e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <RTC_WeekDayNum+0xe4>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	085a      	lsrs	r2, r3, #1
 800435e:	78bb      	ldrb	r3, [r7, #2]
 8004360:	441a      	add	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	441a      	add	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4910      	ldr	r1, [pc, #64]	; (80043b0 <RTC_WeekDayNum+0xe8>)
 8004370:	fba1 1303 	umull	r1, r3, r1, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	490d      	ldr	r1, [pc, #52]	; (80043b0 <RTC_WeekDayNum+0xe8>)
 800437c:	fba1 1303 	umull	r1, r3, r1, r3
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <RTC_WeekDayNum+0xec>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	1ad1      	subs	r1, r2, r3
 800438e:	0849      	lsrs	r1, r1, #1
 8004390:	440b      	add	r3, r1
 8004392:	0899      	lsrs	r1, r3, #2
 8004394:	460b      	mov	r3, r1
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	1a5b      	subs	r3, r3, r1
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	b2db      	uxtb	r3, r3
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	38e38e39 	.word	0x38e38e39
 80043b0:	51eb851f 	.word	0x51eb851f
 80043b4:	24924925 	.word	0x24924925

080043b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e076      	b.n	80044b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043da:	d009      	beq.n	80043f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
 80043e2:	e005      	b.n	80043f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd fbde 	bl	8001bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	ea42 0103 	orr.w	r1, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	0c1a      	lsrs	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f002 0204 	and.w	r2, r2, #4
 8004496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_SPI_Transmit+0x22>
 80044de:	2302      	movs	r3, #2
 80044e0:	e12d      	b.n	800473e <HAL_SPI_Transmit+0x27e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ea:	f7fd fcff 	bl	8001eec <HAL_GetTick>
 80044ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004500:	2302      	movs	r3, #2
 8004502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004504:	e116      	b.n	8004734 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_SPI_Transmit+0x52>
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004516:	e10d      	b.n	8004734 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2203      	movs	r2, #3
 800451c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455e:	d10f      	bne.n	8004580 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d007      	beq.n	800459e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d14f      	bne.n	8004648 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_SPI_Transmit+0xf6>
 80045b0:	8afb      	ldrh	r3, [r7, #22]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d142      	bne.n	800463c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045da:	e02f      	b.n	800463c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d112      	bne.n	8004610 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
 800460e:	e015      	b.n	800463c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004610:	f7fd fc6c 	bl	8001eec <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d803      	bhi.n	8004628 <HAL_SPI_Transmit+0x168>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004626:	d102      	bne.n	800462e <HAL_SPI_Transmit+0x16e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800463a:	e07b      	b.n	8004734 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ca      	bne.n	80045dc <HAL_SPI_Transmit+0x11c>
 8004646:	e050      	b.n	80046ea <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Transmit+0x196>
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d144      	bne.n	80046e0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800467c:	e030      	b.n	80046e0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b02      	cmp	r3, #2
 800468a:	d113      	bne.n	80046b4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b2:	e015      	b.n	80046e0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b4:	f7fd fc1a 	bl	8001eec <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d803      	bhi.n	80046cc <HAL_SPI_Transmit+0x20c>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ca:	d102      	bne.n	80046d2 <HAL_SPI_Transmit+0x212>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046de:	e029      	b.n	8004734 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1c9      	bne.n	800467e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa62 	bl	8004bb8 <SPI_EndRxTxTransaction>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e003      	b.n	8004734 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800473c:	7ffb      	ldrb	r3, [r7, #31]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08c      	sub	sp, #48	; 0x30
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004754:	2301      	movs	r3, #1
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_SPI_TransmitReceive+0x26>
 8004768:	2302      	movs	r3, #2
 800476a:	e198      	b.n	8004a9e <HAL_SPI_TransmitReceive+0x358>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004774:	f7fd fbba 	bl	8001eec <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800478e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004792:	2b01      	cmp	r3, #1
 8004794:	d00f      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x70>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479c:	d107      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x68>
 80047a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d003      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047b4:	e16d      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x82>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x82>
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047ce:	e160      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d003      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	887a      	ldrh	r2, [r7, #2]
 80047fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	887a      	ldrh	r2, [r7, #2]
 8004806:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d007      	beq.n	8004838 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004840:	d17c      	bne.n	800493c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_SPI_TransmitReceive+0x10a>
 800484a:	8b7b      	ldrh	r3, [r7, #26]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d16a      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	1c9a      	adds	r2, r3, #2
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004874:	e057      	b.n	8004926 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d11b      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x176>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x176>
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d113      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d119      	bne.n	80048fe <HAL_SPI_TransmitReceive+0x1b8>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d014      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	b292      	uxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048fa:	2301      	movs	r3, #1
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048fe:	f7fd faf5 	bl	8001eec <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800490a:	429a      	cmp	r2, r3
 800490c:	d80b      	bhi.n	8004926 <HAL_SPI_TransmitReceive+0x1e0>
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004914:	d007      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004924:	e0b5      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1a2      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x130>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d19d      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x130>
 800493a:	e080      	b.n	8004a3e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SPI_TransmitReceive+0x204>
 8004944:	8b7b      	ldrh	r3, [r7, #26]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d16f      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004970:	e05b      	b.n	8004a2a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d11c      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x274>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_SPI_TransmitReceive+0x274>
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d114      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d119      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x2b6>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d014      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f8:	2301      	movs	r3, #1
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049fc:	f7fd fa76 	bl	8001eec <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d803      	bhi.n	8004a14 <HAL_SPI_TransmitReceive+0x2ce>
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x2d4>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a28:	e033      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d19e      	bne.n	8004972 <HAL_SPI_TransmitReceive+0x22c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d199      	bne.n	8004972 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f8b8 	bl	8004bb8 <SPI_EndRxTxTransaction>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d006      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a5a:	e01a      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a88:	e003      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3730      	adds	r7, #48	; 0x30
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ab8:	f7fd fa18 	bl	8001eec <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac8:	f7fd fa10 	bl	8001eec <HAL_GetTick>
 8004acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	015b      	lsls	r3, r3, #5
 8004ad4:	0d1b      	lsrs	r3, r3, #20
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ade:	e054      	b.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae6:	d050      	beq.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae8:	f7fd fa00 	bl	8001eec <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d902      	bls.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d13d      	bne.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b16:	d111      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d004      	beq.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d107      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b44:	d10f      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e017      	b.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d19b      	bne.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000004 	.word	0x20000004

08004bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff6a 	bl	8004aa8 <SPI_WaitFlagStateUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e000      	b.n	8004bec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e042      	b.n	8004c8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fd f820 	bl	8001c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	; 0x24
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f91d 	bl	8004e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d16d      	bne.n	8004d90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_UART_Transmit+0x2c>
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e066      	b.n	8004d92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2221      	movs	r2, #33	; 0x21
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd2:	f7fd f90b 	bl	8001eec <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d108      	bne.n	8004d00 <HAL_UART_Transmit+0x6c>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e003      	b.n	8004d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d08:	e02a      	b.n	8004d60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f840 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e036      	b.n	8004d92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e007      	b.n	8004d52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cf      	bne.n	8004d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f810 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e006      	b.n	8004d92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b090      	sub	sp, #64	; 0x40
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004daa:	e050      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db2:	d04c      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0x30>
 8004dba:	f7fd f897 	bl	8001eec <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d241      	bcs.n	8004e4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dea:	637a      	str	r2, [r7, #52]	; 0x34
 8004dec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1e:	623a      	str	r2, [r7, #32]
 8004e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e00f      	b.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d09f      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3740      	adds	r7, #64	; 0x40
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eb2:	f023 030c 	bic.w	r3, r3, #12
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <UART_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ee0:	f7fe fb24 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	e002      	b.n	8004eee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f7fe fb0c 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8004eec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <UART_SetConfig+0x118>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	0119      	lsls	r1, r3, #4
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009a      	lsls	r2, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <UART_SetConfig+0x118>)
 8004f26:	fba3 0302 	umull	r0, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2064      	movs	r0, #100	; 0x64
 8004f2e:	fb00 f303 	mul.w	r3, r0, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <UART_SetConfig+0x118>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f44:	4419      	add	r1, r3
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009a      	lsls	r2, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <UART_SetConfig+0x118>)
 8004f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2064      	movs	r0, #100	; 0x64
 8004f66:	fb00 f303 	mul.w	r3, r0, r3
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	3332      	adds	r3, #50	; 0x32
 8004f70:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <UART_SetConfig+0x118>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	440a      	add	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	51eb851f 	.word	0x51eb851f

08004f94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f98:	4904      	ldr	r1, [pc, #16]	; (8004fac <MX_FATFS_Init+0x18>)
 8004f9a:	4805      	ldr	r0, [pc, #20]	; (8004fb0 <MX_FATFS_Init+0x1c>)
 8004f9c:	f003 ff16 	bl	8008dcc <FATFS_LinkDriver>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <MX_FATFS_Init+0x20>)
 8004fa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200021e4 	.word	0x200021e4
 8004fb0:	20000010 	.word	0x20000010
 8004fb4:	200021e0 	.word	0x200021e0

08004fb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004fbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	4603      	mov	r3, r0
 8004fce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    /*Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_initialize(pdrv);
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb fd84 	bl	8000ae0 <SD_disk_initialize>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_status(pdrv);
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fb fe5b 	bl	8000cac <SD_disk_status>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    /*return RES_OK;*/
	return SD_disk_read(pdrv, buff, sector, count);
 8005012:	7bf8      	ldrb	r0, [r7, #15]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	f7fb fe5b 	bl	8000cd4 <SD_disk_read>
 800501e:	4603      	mov	r3, r0
 8005020:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4603      	mov	r3, r0
 8005038:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    /*return RES_OK;*/
	return SD_disk_write(pdrv, buff, sector, count);
 800503a:	7bf8      	ldrb	r0, [r7, #15]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	f7fb feb1 	bl	8000da8 <SD_disk_write>
 8005046:	4603      	mov	r3, r0
 8005048:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	4603      	mov	r3, r0
 800505a:	603a      	str	r2, [r7, #0]
 800505c:	71fb      	strb	r3, [r7, #7]
 800505e:	460b      	mov	r3, r1
 8005060:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    /*DRESULT res = RES_ERROR;
    return res;*/
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	79b9      	ldrb	r1, [r7, #6]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fb ff21 	bl	8000eb0 <SD_disk_ioctl>
 800506e:	4603      	mov	r3, r0
 8005070:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	4a08      	ldr	r2, [pc, #32]	; (80050ac <disk_status+0x30>)
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	79fa      	ldrb	r2, [r7, #7]
 8005094:	4905      	ldr	r1, [pc, #20]	; (80050ac <disk_status+0x30>)
 8005096:	440a      	add	r2, r1
 8005098:	7a12      	ldrb	r2, [r2, #8]
 800509a:	4610      	mov	r0, r2
 800509c:	4798      	blx	r3
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20002408 	.word	0x20002408

080050b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <disk_initialize+0x48>)
 80050c2:	5cd3      	ldrb	r3, [r2, r3]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d111      	bne.n	80050ec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <disk_initialize+0x48>)
 80050cc:	2101      	movs	r1, #1
 80050ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <disk_initialize+0x48>)
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	79fa      	ldrb	r2, [r7, #7]
 80050de:	4906      	ldr	r1, [pc, #24]	; (80050f8 <disk_initialize+0x48>)
 80050e0:	440a      	add	r2, r1
 80050e2:	7a12      	ldrb	r2, [r2, #8]
 80050e4:	4610      	mov	r0, r2
 80050e6:	4798      	blx	r3
 80050e8:	4603      	mov	r3, r0
 80050ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20002408 	.word	0x20002408

080050fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4603      	mov	r3, r0
 800510a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <disk_read+0x3c>)
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	689c      	ldr	r4, [r3, #8]
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	4a07      	ldr	r2, [pc, #28]	; (8005138 <disk_read+0x3c>)
 800511c:	4413      	add	r3, r2
 800511e:	7a18      	ldrb	r0, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	47a0      	blx	r4
 8005128:	4603      	mov	r3, r0
 800512a:	75fb      	strb	r3, [r7, #23]
  return res;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd90      	pop	{r4, r7, pc}
 8005136:	bf00      	nop
 8005138:	20002408 	.word	0x20002408

0800513c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <disk_write+0x3c>)
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	68dc      	ldr	r4, [r3, #12]
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	4a07      	ldr	r2, [pc, #28]	; (8005178 <disk_write+0x3c>)
 800515c:	4413      	add	r3, r2
 800515e:	7a18      	ldrb	r0, [r3, #8]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	47a0      	blx	r4
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]
  return res;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
}
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd90      	pop	{r4, r7, pc}
 8005176:	bf00      	nop
 8005178:	20002408 	.word	0x20002408

0800517c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	603a      	str	r2, [r7, #0]
 8005186:	71fb      	strb	r3, [r7, #7]
 8005188:	460b      	mov	r3, r1
 800518a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <disk_ioctl+0x38>)
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	79fa      	ldrb	r2, [r7, #7]
 800519a:	4906      	ldr	r1, [pc, #24]	; (80051b4 <disk_ioctl+0x38>)
 800519c:	440a      	add	r2, r1
 800519e:	7a10      	ldrb	r0, [r2, #8]
 80051a0:	79b9      	ldrb	r1, [r7, #6]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	4798      	blx	r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20002408 	.word	0x20002408

080051b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80051cc:	e007      	b.n	80051de <mem_cpy+0x26>
		*d++ = *s++;
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	1c53      	adds	r3, r2, #1
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	6179      	str	r1, [r7, #20]
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	1e5a      	subs	r2, r3, #1
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f2      	bne.n	80051ce <mem_cpy+0x16>
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005204:	e005      	b.n	8005212 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	617a      	str	r2, [r7, #20]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	1e5a      	subs	r2, r3, #1
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f4      	bne.n	8005206 <mem_set+0x12>
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005240:	bf00      	nop
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1e5a      	subs	r2, r3, #1
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <mem_cmp+0x40>
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	61fa      	str	r2, [r7, #28]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	61ba      	str	r2, [r7, #24]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	1acb      	subs	r3, r1, r3
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ec      	beq.n	8005242 <mem_cmp+0x1a>
	return r;
 8005268:	697b      	ldr	r3, [r7, #20]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800527e:	e002      	b.n	8005286 <chk_chr+0x12>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3301      	adds	r3, #1
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <chk_chr+0x26>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4293      	cmp	r3, r2
 8005298:	d1f2      	bne.n	8005280 <chk_chr+0xc>
	return *str;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	781b      	ldrb	r3, [r3, #0]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e03b      	b.n	8005334 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80052bc:	4931      	ldr	r1, [pc, #196]	; (8005384 <chk_lock+0xdc>)
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02c      	beq.n	800532a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80052d0:	492c      	ldr	r1, [pc, #176]	; (8005384 <chk_lock+0xdc>)
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d120      	bne.n	800532e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80052ec:	4925      	ldr	r1, [pc, #148]	; (8005384 <chk_lock+0xdc>)
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3304      	adds	r3, #4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005304:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005306:	429a      	cmp	r2, r3
 8005308:	d111      	bne.n	800532e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800530a:	491e      	ldr	r1, [pc, #120]	; (8005384 <chk_lock+0xdc>)
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	3308      	adds	r3, #8
 800531a:	881a      	ldrh	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005322:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005324:	429a      	cmp	r2, r3
 8005326:	d102      	bne.n	800532e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005328:	e007      	b.n	800533a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d9c0      	bls.n	80052bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d109      	bne.n	8005354 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <chk_lock+0xa4>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d101      	bne.n	8005350 <chk_lock+0xa8>
 800534c:	2300      	movs	r3, #0
 800534e:	e013      	b.n	8005378 <chk_lock+0xd0>
 8005350:	2312      	movs	r3, #18
 8005352:	e011      	b.n	8005378 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <chk_lock+0xca>
 800535a:	490a      	ldr	r1, [pc, #40]	; (8005384 <chk_lock+0xdc>)
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	330a      	adds	r3, #10
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d101      	bne.n	8005376 <chk_lock+0xce>
 8005372:	2310      	movs	r3, #16
 8005374:	e000      	b.n	8005378 <chk_lock+0xd0>
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	200021f0 	.word	0x200021f0

08005388 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
 8005392:	e002      	b.n	800539a <enq_lock+0x12>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d809      	bhi.n	80053b4 <enq_lock+0x2c>
 80053a0:	490a      	ldr	r1, [pc, #40]	; (80053cc <enq_lock+0x44>)
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ef      	bne.n	8005394 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	bf14      	ite	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	2300      	moveq	r3, #0
 80053be:	b2db      	uxtb	r3, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	200021f0 	.word	0x200021f0

080053d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e02e      	b.n	800543e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80053e0:	4958      	ldr	r1, [pc, #352]	; (8005544 <inc_lock+0x174>)
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d11d      	bne.n	8005438 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80053fc:	4951      	ldr	r1, [pc, #324]	; (8005544 <inc_lock+0x174>)
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	3304      	adds	r3, #4
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005414:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005416:	429a      	cmp	r2, r3
 8005418:	d10e      	bne.n	8005438 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800541a:	494a      	ldr	r1, [pc, #296]	; (8005544 <inc_lock+0x174>)
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4613      	mov	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	3308      	adds	r3, #8
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005434:	429a      	cmp	r2, r3
 8005436:	d006      	beq.n	8005446 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d9cd      	bls.n	80053e0 <inc_lock+0x10>
 8005444:	e000      	b.n	8005448 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005446:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d148      	bne.n	80054e0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e002      	b.n	800545a <inc_lock+0x8a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d809      	bhi.n	8005474 <inc_lock+0xa4>
 8005460:	4938      	ldr	r1, [pc, #224]	; (8005544 <inc_lock+0x174>)
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ef      	bne.n	8005454 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d101      	bne.n	800547e <inc_lock+0xae>
 800547a:	2300      	movs	r3, #0
 800547c:	e05d      	b.n	800553a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	482f      	ldr	r0, [pc, #188]	; (8005544 <inc_lock+0x174>)
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4403      	add	r3, r0
 8005494:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	4829      	ldr	r0, [pc, #164]	; (8005544 <inc_lock+0x174>)
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4403      	add	r3, r0
 80054ac:	3304      	adds	r3, #4
 80054ae:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b6:	88d8      	ldrh	r0, [r3, #6]
 80054b8:	4922      	ldr	r1, [pc, #136]	; (8005544 <inc_lock+0x174>)
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	3308      	adds	r3, #8
 80054c8:	4602      	mov	r2, r0
 80054ca:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80054cc:	491d      	ldr	r1, [pc, #116]	; (8005544 <inc_lock+0x174>)
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	330a      	adds	r3, #10
 80054dc:	2200      	movs	r2, #0
 80054de:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <inc_lock+0x130>
 80054e6:	4917      	ldr	r1, [pc, #92]	; (8005544 <inc_lock+0x174>)
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	330a      	adds	r3, #10
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <inc_lock+0x130>
 80054fc:	2300      	movs	r3, #0
 80054fe:	e01c      	b.n	800553a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <inc_lock+0x14e>
 8005506:	490f      	ldr	r1, [pc, #60]	; (8005544 <inc_lock+0x174>)
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4613      	mov	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	330a      	adds	r3, #10
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	b299      	uxth	r1, r3
 800551c:	e001      	b.n	8005522 <inc_lock+0x152>
 800551e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005522:	4808      	ldr	r0, [pc, #32]	; (8005544 <inc_lock+0x174>)
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4403      	add	r3, r0
 8005530:	330a      	adds	r3, #10
 8005532:	460a      	mov	r2, r1
 8005534:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	200021f0 	.word	0x200021f0

08005548 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d82e      	bhi.n	80055ba <dec_lock+0x72>
		n = Files[i].ctr;
 800555c:	491b      	ldr	r1, [pc, #108]	; (80055cc <dec_lock+0x84>)
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	330a      	adds	r3, #10
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005576:	d101      	bne.n	800557c <dec_lock+0x34>
 8005578:	2300      	movs	r3, #0
 800557a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800557c:	89fb      	ldrh	r3, [r7, #14]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <dec_lock+0x40>
 8005582:	89fb      	ldrh	r3, [r7, #14]
 8005584:	3b01      	subs	r3, #1
 8005586:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005588:	4910      	ldr	r1, [pc, #64]	; (80055cc <dec_lock+0x84>)
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	330a      	adds	r3, #10
 8005598:	89fa      	ldrh	r2, [r7, #14]
 800559a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800559c:	89fb      	ldrh	r3, [r7, #14]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <dec_lock+0x6c>
 80055a2:	490a      	ldr	r1, [pc, #40]	; (80055cc <dec_lock+0x84>)
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	737b      	strb	r3, [r7, #13]
 80055b8:	e001      	b.n	80055be <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80055ba:	2302      	movs	r3, #2
 80055bc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80055be:	7b7b      	ldrb	r3, [r7, #13]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	200021f0 	.word	0x200021f0

080055d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e016      	b.n	800560c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055de:	4910      	ldr	r1, [pc, #64]	; (8005620 <clear_lock+0x50>)
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d108      	bne.n	8005606 <clear_lock+0x36>
 80055f4:	490a      	ldr	r1, [pc, #40]	; (8005620 <clear_lock+0x50>)
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d9e5      	bls.n	80055de <clear_lock+0xe>
	}
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200021f0 	.word	0x200021f0

08005624 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	791b      	ldrb	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d040      	beq.n	80056be <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564c:	7858      	ldrb	r0, [r3, #1]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	2301      	movs	r3, #1
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	f7ff fd72 	bl	800513c <disk_write>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <sync_window+0x40>
			res = FR_DISK_ERR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
 8005662:	e02c      	b.n	80056be <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566a:	2200      	movs	r2, #0
 800566c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	1ad2      	subs	r2, r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	429a      	cmp	r2, r3
 8005684:	d21b      	bcs.n	80056be <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e012      	b.n	80056b8 <sync_window+0x94>
					wsect += fs->fsize;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a6:	7858      	ldrb	r0, [r3, #1]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	2301      	movs	r3, #1
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	f7ff fd45 	bl	800513c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d8e9      	bhi.n	8005692 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d01e      	beq.n	8005722 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff9d 	bl	8005624 <sync_window>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fa:	7858      	ldrb	r0, [r3, #1]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	2301      	movs	r3, #1
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	f7ff fcfb 	bl	80050fc <disk_read>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800570c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005710:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	461a      	mov	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff75 	bl	8005624 <sync_window>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f040 80ad 	bne.w	80058a0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b03      	cmp	r3, #3
 8005750:	f040 8098 	bne.w	8005884 <sync_fs+0x158>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	795b      	ldrb	r3, [r3, #5]
 800575c:	2b01      	cmp	r3, #1
 800575e:	f040 8091 	bne.w	8005884 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576a:	895b      	ldrh	r3, [r3, #10]
 800576c:	461a      	mov	r2, r3
 800576e:	2100      	movs	r1, #0
 8005770:	f7ff fd40 	bl	80051f4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2255      	movs	r2, #85	; 0x55
 8005778:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	22aa      	movs	r2, #170	; 0xaa
 8005780:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2252      	movs	r2, #82	; 0x52
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2252      	movs	r2, #82	; 0x52
 800578e:	705a      	strb	r2, [r3, #1]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2261      	movs	r2, #97	; 0x61
 8005794:	709a      	strb	r2, [r3, #2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2241      	movs	r2, #65	; 0x41
 800579a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2272      	movs	r2, #114	; 0x72
 80057a0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2272      	movs	r2, #114	; 0x72
 80057a8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2241      	movs	r2, #65	; 0x41
 80057b0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2261      	movs	r2, #97	; 0x61
 80057b8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	b29b      	uxth	r3, r3
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	b29b      	uxth	r3, r3
 8005824:	b2da      	uxtb	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	b2da      	uxtb	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	0e1b      	lsrs	r3, r3, #24
 8005848:	b2da      	uxtb	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005860:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005868:	7858      	ldrb	r0, [r3, #1]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	2301      	movs	r3, #1
 8005876:	f7ff fc61 	bl	800513c <disk_write>
			fs->fsi_flag = 0;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005880:	2200      	movs	r2, #0
 8005882:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2200      	movs	r2, #0
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fc73 	bl	800517c <disk_ioctl>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	3b02      	subs	r3, #2
 80058b8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	3b02      	subs	r3, #2
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d301      	bcc.n	80058ce <clust2sect+0x24>
 80058ca:	2300      	movs	r3, #0
 80058cc:	e00c      	b.n	80058e8 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d4:	789b      	ldrb	r3, [r3, #2]
 80058d6:	461a      	mov	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	fb03 f202 	mul.w	r2, r3, r2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	4413      	add	r3, r2
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d906      	bls.n	8005910 <get_fat+0x1e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d302      	bcc.n	8005916 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e0e4      	b.n	8005ae0 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800591a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b03      	cmp	r3, #3
 8005926:	f000 8098 	beq.w	8005a5a <get_fat+0x168>
 800592a:	2b03      	cmp	r3, #3
 800592c:	f300 80ce 	bgt.w	8005acc <get_fat+0x1da>
 8005930:	2b01      	cmp	r3, #1
 8005932:	d002      	beq.n	800593a <get_fat+0x48>
 8005934:	2b02      	cmp	r3, #2
 8005936:	d05f      	beq.n	80059f8 <get_fat+0x106>
 8005938:	e0c8      	b.n	8005acc <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005956:	895b      	ldrh	r3, [r3, #10]
 8005958:	4619      	mov	r1, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005960:	4413      	add	r3, r2
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff feaf 	bl	80056c8 <move_window>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 80b0 	bne.w	8005ad2 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	60fa      	str	r2, [r7, #12]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800597e:	8952      	ldrh	r2, [r2, #10]
 8005980:	fbb3 f1f2 	udiv	r1, r3, r2
 8005984:	fb01 f202 	mul.w	r2, r1, r2
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	5cd3      	ldrb	r3, [r2, r3]
 800598e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599e:	895b      	ldrh	r3, [r3, #10]
 80059a0:	4619      	mov	r1, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80059a8:	4413      	add	r3, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff fe8b 	bl	80056c8 <move_window>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 808e 	bne.w	8005ad6 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c0:	895b      	ldrh	r3, [r3, #10]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80059ca:	fb01 f202 	mul.w	r2, r1, r2
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	5cd3      	ldrb	r3, [r2, r3]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	461a      	mov	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <get_fat+0xfc>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	e002      	b.n	80059f4 <get_fat+0x102>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f4:	617b      	str	r3, [r7, #20]
			break;
 80059f6:	e073      	b.n	8005ae0 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a06:	895b      	ldrh	r3, [r3, #10]
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a14:	4413      	add	r3, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fe55 	bl	80056c8 <move_window>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d15a      	bne.n	8005ada <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a2e:	8952      	ldrh	r2, [r2, #10]
 8005a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a34:	fb01 f202 	mul.w	r2, r1, r2
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3301      	adds	r3, #1
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	b21a      	sxth	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	617b      	str	r3, [r7, #20]
			break;
 8005a58:	e042      	b.n	8005ae0 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a60:	6a1a      	ldr	r2, [r3, #32]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a68:	895b      	ldrh	r3, [r3, #10]
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a76:	4413      	add	r3, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fe24 	bl	80056c8 <move_window>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d12b      	bne.n	8005ade <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a90:	8952      	ldrh	r2, [r2, #10]
 8005a92:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a96:	fb01 f202 	mul.w	r2, r1, r2
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3303      	adds	r3, #3
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	061a      	lsls	r2, r3, #24
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3302      	adds	r3, #2
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	0212      	lsls	r2, r2, #8
 8005abc:	4313      	orrs	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ac8:	617b      	str	r3, [r7, #20]
			break;
 8005aca:	e009      	b.n	8005ae0 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005acc:	2301      	movs	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e006      	b.n	8005ae0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ad2:	bf00      	nop
 8005ad4:	e004      	b.n	8005ae0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ad6:	bf00      	nop
 8005ad8:	e002      	b.n	8005ae0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ade:	bf00      	nop
		}
	}

	return val;
 8005ae0:	697b      	ldr	r3, [r7, #20]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b088      	sub	sp, #32
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d906      	bls.n	8005b0a <put_fat+0x20>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <put_fat+0x26>
		res = FR_INT_ERR;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e13a      	b.n	8005d86 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	f000 80d0 	beq.w	8005cbe <put_fat+0x1d4>
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	f300 8127 	bgt.w	8005d72 <put_fat+0x288>
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d003      	beq.n	8005b30 <put_fat+0x46>
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f000 808f 	beq.w	8005c4c <put_fat+0x162>
 8005b2e:	e120      	b.n	8005d72 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	085b      	lsrs	r3, r3, #1
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4c:	895b      	ldrh	r3, [r3, #10]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b56:	4413      	add	r3, r2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fdb4 	bl	80056c8 <move_window>
 8005b60:	4603      	mov	r3, r0
 8005b62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b64:	7ffb      	ldrb	r3, [r7, #31]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 8106 	bne.w	8005d78 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	617a      	str	r2, [r7, #20]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b78:	8952      	ldrh	r2, [r2, #10]
 8005b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b7e:	fb01 f202 	mul.w	r2, r1, r2
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <put_fat+0xc6>
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	b25a      	sxtb	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e001      	b.n	8005bb4 <put_fat+0xca>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd0:	895b      	ldrh	r3, [r3, #10]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bda:	4413      	add	r3, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fd72 	bl	80056c8 <move_window>
 8005be4:	4603      	mov	r3, r0
 8005be6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005be8:	7ffb      	ldrb	r3, [r7, #31]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 80c6 	bne.w	8005d7c <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf6:	895b      	ldrh	r3, [r3, #10]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c00:	fb01 f202 	mul.w	r2, r1, r2
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <put_fat+0x134>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	e00e      	b.n	8005c3c <put_fat+0x152>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	f023 030f 	bic.w	r3, r3, #15
 8005c28:	b25a      	sxtb	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	4313      	orrs	r3, r2
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c46:	2201      	movs	r2, #1
 8005c48:	711a      	strb	r2, [r3, #4]
			break;
 8005c4a:	e09c      	b.n	8005d86 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5a:	895b      	ldrh	r3, [r3, #10]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c68:	4413      	add	r3, r2
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff fd2b 	bl	80056c8 <move_window>
 8005c72:	4603      	mov	r3, r0
 8005c74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c76:	7ffb      	ldrb	r3, [r7, #31]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 8081 	bne.w	8005d80 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c88:	8952      	ldrh	r2, [r2, #10]
 8005c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c8e:	fb01 f202 	mul.w	r2, r1, r2
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	3301      	adds	r3, #1
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb8:	2201      	movs	r2, #1
 8005cba:	711a      	strb	r2, [r3, #4]
			break;
 8005cbc:	e063      	b.n	8005d86 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ccc:	895b      	ldrh	r3, [r3, #10]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cda:	4413      	add	r3, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fcf2 	bl	80056c8 <move_window>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ce8:	7ffb      	ldrb	r3, [r7, #31]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d14a      	bne.n	8005d84 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cf8:	8952      	ldrh	r2, [r2, #10]
 8005cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cfe:	fb01 f202 	mul.w	r2, r1, r2
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	061a      	lsls	r2, r3, #24
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	3302      	adds	r3, #2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	3201      	adds	r2, #1
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	0212      	lsls	r2, r2, #8
 8005d24:	4313      	orrs	r3, r2
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	7812      	ldrb	r2, [r2, #0]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0c1a      	lsrs	r2, r3, #16
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	3302      	adds	r3, #2
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0e1a      	lsrs	r2, r3, #24
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	3303      	adds	r3, #3
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	711a      	strb	r2, [r3, #4]
			break;
 8005d70:	e009      	b.n	8005d86 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005d72:	2302      	movs	r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e006      	b.n	8005d86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005d78:	bf00      	nop
 8005d7a:	e004      	b.n	8005d86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005d7c:	bf00      	nop
 8005d7e:	e002      	b.n	8005d86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005d80:	bf00      	nop
 8005d82:	e000      	b.n	8005d86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005d84:	bf00      	nop
		}
	}

	return res;
 8005d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d906      	bls.n	8005dae <remove_chain+0x1e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d302      	bcc.n	8005db4 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005dae:	2302      	movs	r3, #2
 8005db0:	73fb      	strb	r3, [r7, #15]
 8005db2:	e049      	b.n	8005e48 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005db8:	e03b      	b.n	8005e32 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff fd98 	bl	80058f2 <get_fat>
 8005dc2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03b      	beq.n	8005e42 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <remove_chain+0x46>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	73fb      	strb	r3, [r7, #15]
 8005dd4:	e038      	b.n	8005e48 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ddc:	d102      	bne.n	8005de4 <remove_chain+0x54>
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	e031      	b.n	8005e48 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005de4:	2200      	movs	r2, #0
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fe7e 	bl	8005aea <put_fat>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d126      	bne.n	8005e46 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e04:	d013      	beq.n	8005e2e <remove_chain+0x9e>
				fs->free_clust++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e16:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1e:	795b      	ldrb	r3, [r3, #5]
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3bc      	bcc.n	8005dba <remove_chain+0x2a>
 8005e40:	e002      	b.n	8005e48 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005e46:	bf00      	nop
		}
	}

	return res;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d111      	bne.n	8005e86 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <create_chain+0x2e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d31d      	bcc.n	8005ebc <create_chain+0x6a>
 8005e80:	2301      	movs	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	e01a      	b.n	8005ebc <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fd32 	bl	80058f2 <get_fat>
 8005e8e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d801      	bhi.n	8005e9a <create_chain+0x48>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07f      	b.n	8005f9a <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea0:	d101      	bne.n	8005ea6 <create_chain+0x54>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	e079      	b.n	8005f9a <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d201      	bcs.n	8005eb8 <create_chain+0x66>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	e070      	b.n	8005f9a <create_chain+0x148>
		scl = clst;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d307      	bcc.n	8005ee4 <create_chain+0x92>
			ncl = 2;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d901      	bls.n	8005ee4 <create_chain+0x92>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e05a      	b.n	8005f9a <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fd03 	bl	80058f2 <get_fat>
 8005eec:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00e      	beq.n	8005f12 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efa:	d002      	beq.n	8005f02 <create_chain+0xb0>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <create_chain+0xb4>
			return cs;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	e049      	b.n	8005f9a <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d1d8      	bne.n	8005ec0 <create_chain+0x6e>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e043      	b.n	8005f9a <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005f12:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005f14:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fde5 	bl	8005aea <put_fat>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <create_chain+0xec>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d006      	beq.n	8005f3e <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fdd8 	bl	8005aea <put_fat>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d121      	bne.n	8005f88 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f5c:	d01c      	beq.n	8005f98 <create_chain+0x146>
			fs->free_clust--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f6e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f76:	795b      	ldrb	r3, [r3, #5]
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f84:	715a      	strb	r2, [r3, #5]
 8005f86:	e007      	b.n	8005f98 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d102      	bne.n	8005f94 <create_chain+0x142>
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	e000      	b.n	8005f96 <create_chain+0x144>
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005f98:	697b      	ldr	r3, [r7, #20]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b087      	sub	sp, #28
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	895b      	ldrh	r3, [r3, #10]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fda:	7892      	ldrb	r2, [r2, #2]
 8005fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	613a      	str	r2, [r7, #16]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <clmt_clust+0x54>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e010      	b.n	8006018 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d307      	bcc.n	800600e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3304      	adds	r3, #4
 800600a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800600c:	e7e9      	b.n	8005fe2 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800600e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
}
 8006018:	4618      	mov	r0, r3
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006036:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d009      	beq.n	800605c <dir_sdi+0x3a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	d301      	bcc.n	8006060 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800605c:	2302      	movs	r3, #2
 800605e:	e0aa      	b.n	80061b6 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <dir_sdi+0x66>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d107      	bne.n	8006088 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d115      	bne.n	80060ba <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609a:	891b      	ldrh	r3, [r3, #8]
 800609c:	461a      	mov	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d301      	bcc.n	80060a8 <dir_sdi+0x86>
			return FR_INT_ERR;
 80060a4:	2302      	movs	r3, #2
 80060a6:	e086      	b.n	80061b6 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	e043      	b.n	8006142 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c6:	895b      	ldrh	r3, [r3, #10]
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	789b      	ldrb	r3, [r3, #2]
 80060dc:	fb02 f303 	mul.w	r3, r2, r3
 80060e0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80060e2:	e021      	b.n	8006128 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fbff 	bl	80058f2 <get_fat>
 80060f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fc:	d101      	bne.n	8006102 <dir_sdi+0xe0>
 80060fe:	2301      	movs	r3, #1
 8006100:	e059      	b.n	80061b6 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d909      	bls.n	800611c <dir_sdi+0xfa>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	429a      	cmp	r2, r3
 800611a:	d301      	bcc.n	8006120 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800611c:	2302      	movs	r3, #2
 800611e:	e04a      	b.n	80061b6 <dir_sdi+0x194>
			idx -= ic;
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d2d9      	bcs.n	80060e4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6979      	ldr	r1, [r7, #20]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fbb5 	bl	80058aa <clust2sect>
 8006140:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006148:	461a      	mov	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <dir_sdi+0x136>
 8006154:	2302      	movs	r3, #2
 8006156:	e02e      	b.n	80061b6 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006164:	895b      	ldrh	r3, [r3, #10]
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800617c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006194:	895b      	ldrh	r3, [r3, #10]
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	b29b      	uxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	fbb3 f1f2 	udiv	r1, r3, r2
 80061a2:	fb01 f202 	mul.w	r2, r1, r2
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	015b      	lsls	r3, r3, #5
 80061aa:	4403      	add	r3, r0
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061b2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80061be:	b590      	push	{r4, r7, lr}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ce:	88db      	ldrh	r3, [r3, #6]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <dir_next+0x2a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <dir_next+0x2e>
		return FR_NO_FILE;
 80061e8:	2304      	movs	r3, #4
 80061ea:	e12e      	b.n	800644a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f8:	895b      	ldrh	r3, [r3, #10]
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	fbb3 f1f2 	udiv	r1, r3, r2
 8006206:	fb01 f202 	mul.w	r2, r1, r2
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 80fa 	bne.w	8006406 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006222:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10d      	bne.n	800624c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623c:	891b      	ldrh	r3, [r3, #8]
 800623e:	461a      	mov	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4293      	cmp	r3, r2
 8006244:	f0c0 80df 	bcc.w	8006406 <dir_next+0x248>
				return FR_NO_FILE;
 8006248:	2304      	movs	r3, #4
 800624a:	e0fe      	b.n	800644a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006258:	895b      	ldrh	r3, [r3, #10]
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	fbb3 f3f2 	udiv	r3, r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006272:	7892      	ldrb	r2, [r2, #2]
 8006274:	3a01      	subs	r2, #1
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 80c4 	bne.w	8006406 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7ff fb2e 	bl	80058f2 <get_fat>
 8006296:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d801      	bhi.n	80062a2 <dir_next+0xe4>
 800629e:	2302      	movs	r3, #2
 80062a0:	e0d3      	b.n	800644a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a8:	d101      	bne.n	80062ae <dir_next+0xf0>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0cd      	b.n	800644a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	429a      	cmp	r2, r3
 80062c0:	f0c0 808e 	bcc.w	80063e0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <dir_next+0x110>
 80062ca:	2304      	movs	r3, #4
 80062cc:	e0bd      	b.n	800644a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f7ff fdb6 	bl	8005e52 <create_chain>
 80062e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <dir_next+0x134>
 80062ee:	2307      	movs	r3, #7
 80062f0:	e0ab      	b.n	800644a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <dir_next+0x13e>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e0a6      	b.n	800644a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006302:	d101      	bne.n	8006308 <dir_next+0x14a>
 8006304:	2301      	movs	r3, #1
 8006306:	e0a0      	b.n	800644a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff f987 	bl	8005624 <sync_window>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <dir_next+0x162>
 800631c:	2301      	movs	r3, #1
 800631e:	e094      	b.n	800644a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006336:	895b      	ldrh	r3, [r3, #10]
 8006338:	461a      	mov	r2, r3
 800633a:	2100      	movs	r1, #0
 800633c:	f7fe ff5a 	bl	80051f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634e:	681c      	ldr	r4, [r3, #0]
 8006350:	6979      	ldr	r1, [r7, #20]
 8006352:	4610      	mov	r0, r2
 8006354:	f7ff faa9 	bl	80058aa <clust2sect>
 8006358:	4603      	mov	r3, r0
 800635a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800635e:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006360:	2300      	movs	r3, #0
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	e021      	b.n	80063aa <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006372:	2201      	movs	r2, #1
 8006374:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff f950 	bl	8005624 <sync_window>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <dir_next+0x1d0>
 800638a:	2301      	movs	r3, #1
 800638c:	e05d      	b.n	800644a <dir_next+0x28c>
						dp->fs->winsect++;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800639a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800639c:	3201      	adds	r2, #1
 800639e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3301      	adds	r3, #1
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	789b      	ldrb	r3, [r3, #2]
 80063b8:	461a      	mov	r2, r3
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4293      	cmp	r3, r2
 80063be:	d3d2      	bcc.n	8006366 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1acb      	subs	r3, r1, r3
 80063da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e6:	461a      	mov	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6979      	ldr	r1, [r7, #20]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fa57 	bl	80058aa <clust2sect>
 80063fc:	4602      	mov	r2, r0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006404:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006410:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006428:	895b      	ldrh	r3, [r3, #10]
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	fbb3 f1f2 	udiv	r1, r3, r2
 8006436:	fb01 f202 	mul.w	r2, r1, r2
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	015b      	lsls	r3, r3, #5
 800643e:	4403      	add	r3, r0
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006446:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd90      	pop	{r4, r7, pc}

08006452 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800645c:	2100      	movs	r1, #0
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fddf 	bl	8006022 <dir_sdi>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d135      	bne.n	80064da <dir_alloc+0x88>
		n = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7ff f91f 	bl	80056c8 <move_window>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d121      	bne.n	80064d8 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2be5      	cmp	r3, #229	; 0xe5
 80064a0:	d006      	beq.n	80064b0 <dir_alloc+0x5e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d102      	bne.n	80064c4 <dir_alloc+0x72>
 80064be:	e00c      	b.n	80064da <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80064c0:	2300      	movs	r3, #0
 80064c2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80064c4:	2101      	movs	r1, #1
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fe79 	bl	80061be <dir_next>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0cd      	beq.n	8006472 <dir_alloc+0x20>
 80064d6:	e000      	b.n	80064da <dir_alloc+0x88>
			if (res != FR_OK) break;
 80064d8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d101      	bne.n	80064e4 <dir_alloc+0x92>
 80064e0:	2307      	movs	r3, #7
 80064e2:	73fb      	strb	r3, [r7, #15]
	return res;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	331b      	adds	r3, #27
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	b21a      	sxth	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	331a      	adds	r3, #26
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	b21b      	sxth	r3, r3
 800650a:	4313      	orrs	r3, r2
 800650c:	b21b      	sxth	r3, r3
 800650e:	b29b      	uxth	r3, r3
 8006510:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d10f      	bne.n	800653e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	3315      	adds	r3, #21
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	b21a      	sxth	r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b21b      	sxth	r3, r3
 8006530:	4313      	orrs	r3, r2
 8006532:	b21b      	sxth	r3, r3
 8006534:	b29b      	uxth	r3, r3
 8006536:	041b      	lsls	r3, r3, #16
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

	return cl;
 800653e:	68fb      	ldr	r3, [r7, #12]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr

0800654a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	331a      	adds	r3, #26
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	b29a      	uxth	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	331b      	adds	r3, #27
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	0c1a      	lsrs	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3314      	adds	r3, #20
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	b29b      	uxth	r3, r3
 8006580:	0a1b      	lsrs	r3, r3, #8
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3315      	adds	r3, #21
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr
	...

08006598 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065aa:	1e5a      	subs	r2, r3, #1
 80065ac:	4613      	mov	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	2301      	movs	r3, #1
 80065be:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80065c0:	4a2b      	ldr	r2, [pc, #172]	; (8006670 <cmp_lfn+0xd8>)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4413      	add	r3, r2
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	b21a      	sxth	r2, r3
 80065d4:	4926      	ldr	r1, [pc, #152]	; (8006670 <cmp_lfn+0xd8>)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	440b      	add	r3, r1
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	4619      	mov	r1, r3
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	440b      	add	r3, r1
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b21b      	sxth	r3, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b21b      	sxth	r3, r3
 80065ea:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80065ec:	89fb      	ldrh	r3, [r7, #14]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d019      	beq.n	8006626 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80065f2:	89bb      	ldrh	r3, [r7, #12]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f002 fc33 	bl	8008e60 <ff_wtoupper>
 80065fa:	4603      	mov	r3, r0
 80065fc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2bfe      	cmp	r3, #254	; 0xfe
 8006602:	d80e      	bhi.n	8006622 <cmp_lfn+0x8a>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	617a      	str	r2, [r7, #20]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f002 fc24 	bl	8008e60 <ff_wtoupper>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	89fb      	ldrh	r3, [r7, #14]
 800661e:	4293      	cmp	r3, r2
 8006620:	d008      	beq.n	8006634 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006622:	2300      	movs	r3, #0
 8006624:	e01f      	b.n	8006666 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006626:	89bb      	ldrh	r3, [r7, #12]
 8006628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800662c:	4293      	cmp	r3, r2
 800662e:	d001      	beq.n	8006634 <cmp_lfn+0x9c>
 8006630:	2300      	movs	r3, #0
 8006632:	e018      	b.n	8006666 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	3301      	adds	r3, #1
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d9bf      	bls.n	80065c0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <cmp_lfn+0xcc>
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <cmp_lfn+0xcc>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <cmp_lfn+0xcc>
		return 0;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006664:	2301      	movs	r3, #1
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	080099c0 	.word	0x080099c0

08006674 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006674:	b480      	push	{r7}
 8006676:	b089      	sub	sp, #36	; 0x24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	460b      	mov	r3, r1
 8006684:	71fb      	strb	r3, [r7, #7]
 8006686:	4613      	mov	r3, r2
 8006688:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	330d      	adds	r3, #13
 800668e:	79ba      	ldrb	r2, [r7, #6]
 8006690:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	330b      	adds	r3, #11
 8006696:	220f      	movs	r2, #15
 8006698:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	330c      	adds	r3, #12
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	331a      	adds	r3, #26
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	331b      	adds	r3, #27
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	4613      	mov	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	82fb      	strh	r3, [r7, #22]
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80066ca:	8afb      	ldrh	r3, [r7, #22]
 80066cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <fit_lfn+0x70>
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	61fa      	str	r2, [r7, #28]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80066e4:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <fit_lfn+0xe4>)
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	8afa      	ldrh	r2, [r7, #22]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	8afb      	ldrh	r3, [r7, #22]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	b299      	uxth	r1, r3
 80066fe:	4a16      	ldr	r2, [pc, #88]	; (8006758 <fit_lfn+0xe4>)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	4413      	add	r3, r2
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4413      	add	r3, r2
 800670c:	b2ca      	uxtb	r2, r1
 800670e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006710:	8afb      	ldrh	r3, [r7, #22]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <fit_lfn+0xa8>
 8006716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800671a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	3301      	adds	r3, #1
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d9d0      	bls.n	80066ca <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006728:	8afb      	ldrh	r3, [r7, #22]
 800672a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800672e:	4293      	cmp	r3, r2
 8006730:	d006      	beq.n	8006740 <fit_lfn+0xcc>
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <fit_lfn+0xd4>
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	79fa      	ldrb	r2, [r7, #7]
 800674c:	701a      	strb	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	3724      	adds	r7, #36	; 0x24
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	080099c0 	.word	0x080099c0

0800675c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800676a:	220b      	movs	r2, #11
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7fe fd22 	bl	80051b8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d92b      	bls.n	80067d2 <gen_numname+0x76>
		sr = seq;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800677e:	e022      	b.n	80067c6 <gen_numname+0x6a>
			wc = *lfn++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800678a:	2300      	movs	r3, #0
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	e017      	b.n	80067c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005a      	lsls	r2, r3, #1
 8006794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	4413      	add	r3, r2
 800679c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800679e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <gen_numname+0x5e>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80067b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80067b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	3301      	adds	r3, #1
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	2b0f      	cmp	r3, #15
 80067c4:	d9e4      	bls.n	8006790 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1d8      	bne.n	8006780 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80067d2:	2307      	movs	r3, #7
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	3330      	adds	r3, #48	; 0x30
 80067e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80067e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067ea:	2b39      	cmp	r3, #57	; 0x39
 80067ec:	d904      	bls.n	80067f8 <gen_numname+0x9c>
 80067ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067f2:	3307      	adds	r3, #7
 80067f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80067fe:	3330      	adds	r3, #48	; 0x30
 8006800:	443b      	add	r3, r7
 8006802:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006806:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1df      	bne.n	80067d6 <gen_numname+0x7a>
	ns[i] = '~';
 8006816:	f107 0214 	add.w	r2, r7, #20
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	4413      	add	r3, r2
 800681e:	227e      	movs	r2, #126	; 0x7e
 8006820:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
 8006826:	e002      	b.n	800682e <gen_numname+0xd2>
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
 800682e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	429a      	cmp	r2, r3
 8006834:	d205      	bcs.n	8006842 <gen_numname+0xe6>
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	4413      	add	r3, r2
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b20      	cmp	r3, #32
 8006840:	d1f2      	bne.n	8006828 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	2b07      	cmp	r3, #7
 8006846:	d807      	bhi.n	8006858 <gen_numname+0xfc>
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	62ba      	str	r2, [r7, #40]	; 0x28
 800684e:	3330      	adds	r3, #48	; 0x30
 8006850:	443b      	add	r3, r7
 8006852:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006856:	e000      	b.n	800685a <gen_numname+0xfe>
 8006858:	2120      	movs	r1, #32
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	627a      	str	r2, [r7, #36]	; 0x24
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	460a      	mov	r2, r1
 8006866:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	2b07      	cmp	r3, #7
 800686c:	d9e9      	bls.n	8006842 <gen_numname+0xe6>
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	3730      	adds	r7, #48	; 0x30
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006884:	230b      	movs	r3, #11
 8006886:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	b2da      	uxtb	r2, r3
 800688c:	0852      	lsrs	r2, r2, #1
 800688e:	01db      	lsls	r3, r3, #7
 8006890:	4313      	orrs	r3, r2
 8006892:	b2da      	uxtb	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	1c59      	adds	r1, r3, #1
 8006898:	6079      	str	r1, [r7, #4]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	4413      	add	r3, r2
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1ed      	bne.n	8006888 <sum_sfn+0x10>
	return sum;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068c0:	2100      	movs	r1, #0
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fbad 	bl	8006022 <dir_sdi>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <dir_find+0x1e>
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	e0b8      	b.n	8006a48 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80068d6:	23ff      	movs	r3, #255	; 0xff
 80068d8:	753b      	strb	r3, [r7, #20]
 80068da:	7d3b      	ldrb	r3, [r7, #20]
 80068dc:	757b      	strb	r3, [r7, #21]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068e8:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe fee3 	bl	80056c8 <move_window>
 8006902:	4603      	mov	r3, r0
 8006904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f040 8097 	bne.w	8006a3c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800691e:	7dbb      	ldrb	r3, [r7, #22]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <dir_find+0x72>
 8006924:	2304      	movs	r3, #4
 8006926:	75fb      	strb	r3, [r7, #23]
 8006928:	e08d      	b.n	8006a46 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	330b      	adds	r3, #11
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006934:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006936:	7dbb      	ldrb	r3, [r7, #22]
 8006938:	2be5      	cmp	r3, #229	; 0xe5
 800693a:	d007      	beq.n	800694c <dir_find+0x94>
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <dir_find+0xa6>
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d008      	beq.n	800695e <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800694c:	23ff      	movs	r3, #255	; 0xff
 800694e:	757b      	strb	r3, [r7, #21]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800695a:	849a      	strh	r2, [r3, #36]	; 0x24
 800695c:	e063      	b.n	8006a26 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d137      	bne.n	80069d4 <dir_find+0x11c>
				if (dp->lfn) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d05a      	beq.n	8006a26 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006970:	7dbb      	ldrb	r3, [r7, #22]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d010      	beq.n	800699c <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	7b5b      	ldrb	r3, [r3, #13]
 800697e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006980:	7dbb      	ldrb	r3, [r7, #22]
 8006982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006986:	75bb      	strb	r3, [r7, #22]
 8006988:	7dbb      	ldrb	r3, [r7, #22]
 800698a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	88da      	ldrh	r2, [r3, #6]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699a:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800699c:	7dba      	ldrb	r2, [r7, #22]
 800699e:	7d7b      	ldrb	r3, [r7, #21]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d114      	bne.n	80069ce <dir_find+0x116>
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	330d      	adds	r3, #13
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	7d3a      	ldrb	r2, [r7, #20]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d10e      	bne.n	80069ce <dir_find+0x116>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	6939      	ldr	r1, [r7, #16]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fdec 	bl	8006598 <cmp_lfn>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <dir_find+0x116>
 80069c6:	7d7b      	ldrb	r3, [r7, #21]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	e000      	b.n	80069d0 <dir_find+0x118>
 80069ce:	23ff      	movs	r3, #255	; 0xff
 80069d0:	757b      	strb	r3, [r7, #21]
 80069d2:	e028      	b.n	8006a26 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80069d4:	7d7b      	ldrb	r3, [r7, #21]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <dir_find+0x132>
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	f7ff ff4c 	bl	8006878 <sum_sfn>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	7d3b      	ldrb	r3, [r7, #20]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d02a      	beq.n	8006a40 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	330b      	adds	r3, #11
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <dir_find+0x15e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	220b      	movs	r2, #11
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6938      	ldr	r0, [r7, #16]
 8006a0c:	f7fe fc0c 	bl	8005228 <mem_cmp>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d016      	beq.n	8006a44 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006a16:	23ff      	movs	r3, #255	; 0xff
 8006a18:	757b      	strb	r3, [r7, #21]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a24:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006a26:	2100      	movs	r1, #0
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fbc8 	bl	80061be <dir_next>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f43f af58 	beq.w	80068ea <dir_find+0x32>
 8006a3a:	e004      	b.n	8006a46 <dir_find+0x18e>
		if (res != FR_OK) break;
 8006a3c:	bf00      	nop
 8006a3e:	e002      	b.n	8006a46 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a44:	bf00      	nop

	return res;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	; 0x30
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006a6c:	f107 030c 	add.w	r3, r7, #12
 8006a70:	220c      	movs	r2, #12
 8006a72:	6a39      	ldr	r1, [r7, #32]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fe fb9f 	bl	80051b8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d03b      	beq.n	8006afc <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	330b      	adds	r3, #11
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a92:	461a      	mov	r2, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006a98:	2301      	movs	r3, #1
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9c:	e013      	b.n	8006ac6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006a9e:	f107 010c 	add.w	r1, r7, #12
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	6a38      	ldr	r0, [r7, #32]
 8006aa8:	f7ff fe58 	bl	800675c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff03 	bl	80068b8 <dir_find>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	2b63      	cmp	r3, #99	; 0x63
 8006aca:	d9e8      	bls.n	8006a9e <dir_register+0x4e>
 8006acc:	e000      	b.n	8006ad0 <dir_register+0x80>
			if (res != FR_OK) break;
 8006ace:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	2b64      	cmp	r3, #100	; 0x64
 8006ad4:	d101      	bne.n	8006ada <dir_register+0x8a>
 8006ad6:	2307      	movs	r3, #7
 8006ad8:	e0d8      	b.n	8006c8c <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d002      	beq.n	8006ae8 <dir_register+0x98>
 8006ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ae6:	e0d1      	b.n	8006c8c <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	330b      	adds	r3, #11
 8006aec:	7dfa      	ldrb	r2, [r7, #23]
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af6:	461a      	mov	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d014      	beq.n	8006b30 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006b06:	2300      	movs	r3, #0
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b0a:	e002      	b.n	8006b12 <dir_register+0xc2>
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	3301      	adds	r3, #1
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f5      	bne.n	8006b0c <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	3319      	adds	r3, #25
 8006b24:	4a5b      	ldr	r2, [pc, #364]	; (8006c94 <dir_register+0x244>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	089b      	lsrs	r3, r3, #2
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2e:	e001      	b.n	8006b34 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006b30:	2301      	movs	r3, #1
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fc8b 	bl	8006452 <dir_alloc>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d15b      	bne.n	8006c02 <dir_register+0x1b2>
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d055      	beq.n	8006c02 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fa5b 	bl	8006022 <dir_sdi>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d143      	bne.n	8006c02 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fe78 	bl	8006878 <sum_sfn>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f7fe fd92 	bl	80056c8 <move_window>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d126      	bne.n	8006c00 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb8:	6a18      	ldr	r0, [r3, #32]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc0:	6959      	ldr	r1, [r3, #20]
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	7efb      	ldrb	r3, [r7, #27]
 8006bc8:	f7ff fd54 	bl	8006674 <fit_lfn>
				dp->fs->wflag = 1;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd8:	2201      	movs	r2, #1
 8006bda:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006bdc:	2100      	movs	r1, #0
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff faed 	bl	80061be <dir_next>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <dir_register+0x1b2>
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1c6      	bne.n	8006b8c <dir_register+0x13c>
 8006bfe:	e000      	b.n	8006c02 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006c00:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d13e      	bne.n	8006c88 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fe fd53 	bl	80056c8 <move_window>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d12b      	bne.n	8006c88 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fad9 	bl	80051f4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c48:	6958      	ldr	r0, [r3, #20]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	220b      	movs	r2, #11
 8006c54:	4619      	mov	r1, r3
 8006c56:	f7fe faaf 	bl	80051b8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	330b      	adds	r3, #11
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	f002 0218 	and.w	r2, r2, #24
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c84:	2201      	movs	r2, #1
 8006c86:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3730      	adds	r7, #48	; 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	4ec4ec4f 	.word	0x4ec4ec4f

08006c98 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	e002      	b.n	8006cb0 <create_name+0x18>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3301      	adds	r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8006cb6:	d0f8      	beq.n	8006caa <create_name+0x12>
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b5c      	cmp	r3, #92	; 0x5c
 8006cbe:	d0f4      	beq.n	8006caa <create_name+0x12>
	lfn = dp->lfn;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	61ba      	str	r2, [r7, #24]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce2:	2b1f      	cmp	r3, #31
 8006ce4:	d92f      	bls.n	8006d46 <create_name+0xae>
 8006ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce8:	2b2f      	cmp	r3, #47	; 0x2f
 8006cea:	d02c      	beq.n	8006d46 <create_name+0xae>
 8006cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cee:	2b5c      	cmp	r3, #92	; 0x5c
 8006cf0:	d029      	beq.n	8006d46 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2bfe      	cmp	r3, #254	; 0xfe
 8006cf6:	d901      	bls.n	8006cfc <create_name+0x64>
			return FR_INVALID_NAME;
 8006cf8:	2306      	movs	r3, #6
 8006cfa:	e186      	b.n	800700a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d04:	2101      	movs	r1, #1
 8006d06:	4618      	mov	r0, r3
 8006d08:	f002 f870 	bl	8008dec <ff_convert>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <create_name+0x82>
 8006d16:	2306      	movs	r3, #6
 8006d18:	e177      	b.n	800700a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d1e:	d809      	bhi.n	8006d34 <create_name+0x9c>
 8006d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d22:	4619      	mov	r1, r3
 8006d24:	488e      	ldr	r0, [pc, #568]	; (8006f60 <create_name+0x2c8>)
 8006d26:	f7fe faa5 	bl	8005274 <chk_chr>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006d30:	2306      	movs	r3, #6
 8006d32:	e16a      	b.n	800700a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	617a      	str	r2, [r7, #20]
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006d44:	e7c5      	b.n	8006cd2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	441a      	add	r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d52:	2b1f      	cmp	r3, #31
 8006d54:	d801      	bhi.n	8006d5a <create_name+0xc2>
 8006d56:	2304      	movs	r3, #4
 8006d58:	e000      	b.n	8006d5c <create_name+0xc4>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006d60:	e011      	b.n	8006d86 <create_name+0xee>
		w = lfn[di - 1];
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d002      	beq.n	8006d80 <create_name+0xe8>
 8006d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d7e:	d106      	bne.n	8006d8e <create_name+0xf6>
		di--;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1ea      	bne.n	8006d62 <create_name+0xca>
 8006d8c:	e000      	b.n	8006d90 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006d8e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <create_name+0x102>
 8006d96:	2306      	movs	r3, #6
 8006d98:	e137      	b.n	800700a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	220b      	movs	r2, #11
 8006db0:	2120      	movs	r1, #32
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fa1e 	bl	80051f4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e002      	b.n	8006dc4 <create_name+0x12c>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d0f5      	beq.n	8006dbe <create_name+0x126>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dde:	d0ee      	beq.n	8006dbe <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <create_name+0x162>
 8006de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dea:	f043 0303 	orr.w	r3, r3, #3
 8006dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006df2:	e002      	b.n	8006dfa <create_name+0x162>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <create_name+0x17c>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e06:	3b01      	subs	r3, #1
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	2b2e      	cmp	r3, #46	; 0x2e
 8006e12:	d1ef      	bne.n	8006df4 <create_name+0x15c>

	b = i = 0; ni = 8;
 8006e14:	2300      	movs	r3, #0
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e1e:	2308      	movs	r3, #8
 8006e20:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	61ba      	str	r2, [r7, #24]
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8091 	beq.w	8006f5c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d006      	beq.n	8006e4e <create_name+0x1b6>
 8006e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e42:	2b2e      	cmp	r3, #46	; 0x2e
 8006e44:	d10a      	bne.n	8006e5c <create_name+0x1c4>
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d006      	beq.n	8006e5c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8006e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e52:	f043 0303 	orr.w	r3, r3, #3
 8006e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e5a:	e07e      	b.n	8006f5a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006e5c:	6a3a      	ldr	r2, [r7, #32]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d203      	bcs.n	8006e6c <create_name+0x1d4>
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d123      	bne.n	8006eb4 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b0b      	cmp	r3, #11
 8006e70:	d106      	bne.n	8006e80 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8006e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e76:	f043 0303 	orr.w	r3, r3, #3
 8006e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e7e:	e076      	b.n	8006f6e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d005      	beq.n	8006e94 <create_name+0x1fc>
 8006e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e8c:	f043 0303 	orr.w	r3, r3, #3
 8006e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d867      	bhi.n	8006f6c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	623b      	str	r3, [r7, #32]
 8006ea4:	230b      	movs	r3, #11
 8006ea6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006eb2:	e052      	b.n	8006f5a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb8:	d914      	bls.n	8006ee4 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 ff94 	bl	8008dec <ff_convert>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <create_name+0x240>
 8006ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed0:	3b80      	subs	r3, #128	; 0x80
 8006ed2:	4a24      	ldr	r2, [pc, #144]	; (8006f64 <create_name+0x2cc>)
 8006ed4:	5cd3      	ldrb	r3, [r2, r3]
 8006ed6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006edc:	f043 0302 	orr.w	r3, r3, #2
 8006ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <create_name+0x262>
 8006eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eec:	4619      	mov	r1, r3
 8006eee:	481e      	ldr	r0, [pc, #120]	; (8006f68 <create_name+0x2d0>)
 8006ef0:	f7fe f9c0 	bl	8005274 <chk_chr>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006efa:	235f      	movs	r3, #95	; 0x5f
 8006efc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f02:	f043 0303 	orr.w	r3, r3, #3
 8006f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f0a:	e01b      	b.n	8006f44 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d909      	bls.n	8006f26 <create_name+0x28e>
 8006f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f14:	2b5a      	cmp	r3, #90	; 0x5a
 8006f16:	d806      	bhi.n	8006f26 <create_name+0x28e>
					b |= 2;
 8006f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f24:	e00e      	b.n	8006f44 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f28:	2b60      	cmp	r3, #96	; 0x60
 8006f2a:	d90b      	bls.n	8006f44 <create_name+0x2ac>
 8006f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f2e:	2b7a      	cmp	r3, #122	; 0x7a
 8006f30:	d808      	bhi.n	8006f44 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f36:	f043 0301 	orr.w	r3, r3, #1
 8006f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f40:	3b20      	subs	r3, #32
 8006f42:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	6239      	str	r1, [r7, #32]
 8006f52:	4413      	add	r3, r2
 8006f54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006f5a:	e762      	b.n	8006e22 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006f5c:	bf00      	nop
 8006f5e:	e006      	b.n	8006f6e <create_name+0x2d6>
 8006f60:	080098b8 	.word	0x080098b8
 8006f64:	08009940 	.word	0x08009940
 8006f68:	080098c4 	.word	0x080098c4
			if (si > di) break;			/* No extension */
 8006f6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2be5      	cmp	r3, #229	; 0xe5
 8006f7a:	d105      	bne.n	8006f88 <create_name+0x2f0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2205      	movs	r2, #5
 8006f86:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d104      	bne.n	8006f98 <create_name+0x300>
 8006f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f9c:	f003 030c 	and.w	r3, r3, #12
 8006fa0:	2b0c      	cmp	r3, #12
 8006fa2:	d005      	beq.n	8006fb0 <create_name+0x318>
 8006fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d105      	bne.n	8006fbc <create_name+0x324>
		cf |= NS_LFN;
 8006fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb4:	f043 0302 	orr.w	r3, r3, #2
 8006fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d117      	bne.n	8006ff8 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d105      	bne.n	8006fe0 <create_name+0x348>
 8006fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd8:	f043 0310 	orr.w	r3, r3, #16
 8006fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d105      	bne.n	8006ff8 <create_name+0x360>
 8006fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff0:	f043 0308 	orr.w	r3, r3, #8
 8006ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	330b      	adds	r3, #11
 8007002:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007006:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007008:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800700a:	4618      	mov	r0, r3
 800700c:	3728      	adds	r7, #40	; 0x28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop

08007014 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b2f      	cmp	r3, #47	; 0x2f
 8007024:	d003      	beq.n	800702e <follow_path+0x1a>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b5c      	cmp	r3, #92	; 0x5c
 800702c:	d102      	bne.n	8007034 <follow_path+0x20>
		path++;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	3301      	adds	r3, #1
 8007032:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703a:	461a      	mov	r2, r3
 800703c:	2300      	movs	r3, #0
 800703e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b1f      	cmp	r3, #31
 8007046:	d80c      	bhi.n	8007062 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fe ffe9 	bl	8006022 <dir_sdi>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705a:	461a      	mov	r2, r3
 800705c:	2300      	movs	r3, #0
 800705e:	6153      	str	r3, [r2, #20]
 8007060:	e049      	b.n	80070f6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007062:	463b      	mov	r3, r7
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff fe16 	bl	8006c98 <create_name>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d13a      	bne.n	80070ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fc1e 	bl	80068b8 <dir_find>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	7adb      	ldrb	r3, [r3, #11]
 800708a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	2b04      	cmp	r3, #4
 8007096:	d12b      	bne.n	80070f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d126      	bne.n	80070f0 <follow_path+0xdc>
 80070a2:	2305      	movs	r3, #5
 80070a4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80070a6:	e023      	b.n	80070f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d120      	bne.n	80070f4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	330b      	adds	r3, #11
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80070ca:	2305      	movs	r3, #5
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	e012      	b.n	80070f6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fa07 	bl	80064ee <ld_clust>
 80070e0:	4602      	mov	r2, r0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070ea:	e7ba      	b.n	8007062 <follow_path+0x4e>
			if (res != FR_OK) break;
 80070ec:	bf00      	nop
 80070ee:	e002      	b.n	80070f6 <follow_path+0xe2>
				break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070f4:	bf00      	nop
		}
	}

	return res;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800710c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d031      	beq.n	800717a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	e002      	b.n	8007124 <get_ldnumber+0x24>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	3301      	adds	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b1f      	cmp	r3, #31
 800712a:	d903      	bls.n	8007134 <get_ldnumber+0x34>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b3a      	cmp	r3, #58	; 0x3a
 8007132:	d1f4      	bne.n	800711e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b3a      	cmp	r3, #58	; 0x3a
 800713a:	d11c      	bne.n	8007176 <get_ldnumber+0x76>
			tp = *path;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	60fa      	str	r2, [r7, #12]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	3b30      	subs	r3, #48	; 0x30
 800714c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b09      	cmp	r3, #9
 8007152:	d80e      	bhi.n	8007172 <get_ldnumber+0x72>
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	429a      	cmp	r2, r3
 800715a:	d10a      	bne.n	8007172 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <get_ldnumber+0x72>
					vol = (int)i;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	3301      	adds	r3, #1
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	e002      	b.n	800717c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800717a:	693b      	ldr	r3, [r7, #16]
}
 800717c:	4618      	mov	r0, r3
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
	...

08007188 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007198:	2200      	movs	r2, #0
 800719a:	711a      	strb	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	461a      	mov	r2, r3
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fe fa8b 	bl	80056c8 <move_window>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <check_fs+0x34>
		return 3;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e04a      	b.n	8007252 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071c2:	3301      	adds	r3, #1
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	b21a      	sxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b21b      	sxth	r3, r3
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <check_fs+0xd4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d001      	beq.n	80071e0 <check_fs+0x58>
		return 2;
 80071dc:	2302      	movs	r3, #2
 80071de:	e038      	b.n	8007252 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3336      	adds	r3, #54	; 0x36
 80071e4:	3303      	adds	r3, #3
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	061a      	lsls	r2, r3, #24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3336      	adds	r3, #54	; 0x36
 80071ee:	3302      	adds	r3, #2
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	4313      	orrs	r3, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	3236      	adds	r2, #54	; 0x36
 80071fa:	3201      	adds	r2, #1
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	0212      	lsls	r2, r2, #8
 8007200:	4313      	orrs	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007208:	4313      	orrs	r3, r2
 800720a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800720e:	4a14      	ldr	r2, [pc, #80]	; (8007260 <check_fs+0xd8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d101      	bne.n	8007218 <check_fs+0x90>
		return 0;
 8007214:	2300      	movs	r3, #0
 8007216:	e01c      	b.n	8007252 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3352      	adds	r3, #82	; 0x52
 800721c:	3303      	adds	r3, #3
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	061a      	lsls	r2, r3, #24
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3352      	adds	r3, #82	; 0x52
 8007226:	3302      	adds	r3, #2
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	4313      	orrs	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	3252      	adds	r2, #82	; 0x52
 8007232:	3201      	adds	r2, #1
 8007234:	7812      	ldrb	r2, [r2, #0]
 8007236:	0212      	lsls	r2, r2, #8
 8007238:	4313      	orrs	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007240:	4313      	orrs	r3, r2
 8007242:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007246:	4a06      	ldr	r2, [pc, #24]	; (8007260 <check_fs+0xd8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d101      	bne.n	8007250 <check_fs+0xc8>
		return 0;
 800724c:	2300      	movs	r3, #0
 800724e:	e000      	b.n	8007252 <check_fs+0xca>

	return 1;
 8007250:	2301      	movs	r3, #1
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	ffffaa55 	.word	0xffffaa55
 8007260:	00544146 	.word	0x00544146

08007264 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b096      	sub	sp, #88	; 0x58
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007278:	68b8      	ldr	r0, [r7, #8]
 800727a:	f7ff ff41 	bl	8007100 <get_ldnumber>
 800727e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	da01      	bge.n	800728a <find_volume+0x26>
 8007286:	230b      	movs	r3, #11
 8007288:	e311      	b.n	80078ae <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800728a:	4a98      	ldr	r2, [pc, #608]	; (80074ec <find_volume+0x288>)
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007292:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <find_volume+0x3a>
 800729a:	230c      	movs	r3, #12
 800729c:	e307      	b.n	80078ae <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01c      	beq.n	80072ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fd fedf 	bl	800507c <disk_status>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80072c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <find_volume+0x82>
 80072d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80072e2:	230a      	movs	r3, #10
 80072e4:	e2e3      	b.n	80078ae <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80072e6:	2300      	movs	r3, #0
 80072e8:	e2e1      	b.n	80078ae <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80072f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd fed1 	bl	80050b0 <disk_initialize>
 800730e:	4603      	mov	r3, r0
 8007310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007320:	2303      	movs	r3, #3
 8007322:	e2c4      	b.n	80078ae <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <find_volume+0xd6>
 800732a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007336:	230a      	movs	r3, #10
 8007338:	e2b9      	b.n	80078ae <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007340:	7858      	ldrb	r0, [r3, #1]
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007348:	330a      	adds	r3, #10
 800734a:	461a      	mov	r2, r3
 800734c:	2102      	movs	r1, #2
 800734e:	f7fd ff15 	bl	800517c <disk_ioctl>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10d      	bne.n	8007374 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	895b      	ldrh	r3, [r3, #10]
 8007360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007364:	d306      	bcc.n	8007374 <find_volume+0x110>
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736c:	895b      	ldrh	r3, [r3, #10]
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007372:	d901      	bls.n	8007378 <find_volume+0x114>
 8007374:	2301      	movs	r3, #1
 8007376:	e29a      	b.n	80078ae <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800737c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800737e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007380:	f7ff ff02 	bl	8007188 <check_fs>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800738a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800738e:	2b01      	cmp	r3, #1
 8007390:	d153      	bne.n	800743a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007392:	2300      	movs	r3, #0
 8007394:	643b      	str	r3, [r7, #64]	; 0x40
 8007396:	e028      	b.n	80073ea <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80073a2:	4413      	add	r3, r2
 80073a4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	3304      	adds	r3, #4
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <find_volume+0x172>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	330b      	adds	r3, #11
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	061a      	lsls	r2, r3, #24
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	330a      	adds	r3, #10
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	4313      	orrs	r3, r2
 80073c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c4:	3209      	adds	r2, #9
 80073c6:	7812      	ldrb	r2, [r2, #0]
 80073c8:	0212      	lsls	r2, r2, #8
 80073ca:	4313      	orrs	r3, r2
 80073cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ce:	3208      	adds	r2, #8
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	e000      	b.n	80073d8 <find_volume+0x174>
 80073d6:	2200      	movs	r2, #0
 80073d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	3358      	adds	r3, #88	; 0x58
 80073de:	443b      	add	r3, r7
 80073e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80073e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e6:	3301      	adds	r3, #1
 80073e8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d9d3      	bls.n	8007398 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80073f0:	2300      	movs	r3, #0
 80073f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80073f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <find_volume+0x19c>
 80073fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fc:	3b01      	subs	r3, #1
 80073fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	3358      	adds	r3, #88	; 0x58
 8007406:	443b      	add	r3, r7
 8007408:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800740c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800740e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <find_volume+0x1bc>
 8007414:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007418:	f7ff feb6 	bl	8007188 <check_fs>
 800741c:	4603      	mov	r3, r0
 800741e:	e000      	b.n	8007422 <find_volume+0x1be>
 8007420:	2302      	movs	r3, #2
 8007422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <find_volume+0x1d6>
 800742e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007430:	3301      	adds	r3, #1
 8007432:	643b      	str	r3, [r7, #64]	; 0x40
 8007434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007436:	2b03      	cmp	r3, #3
 8007438:	d9e2      	bls.n	8007400 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800743a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800743e:	2b03      	cmp	r3, #3
 8007440:	d101      	bne.n	8007446 <find_volume+0x1e2>
 8007442:	2301      	movs	r3, #1
 8007444:	e233      	b.n	80078ae <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <find_volume+0x1ee>
 800744e:	230d      	movs	r3, #13
 8007450:	e22d      	b.n	80078ae <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	7b1b      	ldrb	r3, [r3, #12]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	b21a      	sxth	r2, r3
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	7adb      	ldrb	r3, [r3, #11]
 800745e:	b21b      	sxth	r3, r3
 8007460:	4313      	orrs	r3, r2
 8007462:	b21a      	sxth	r2, r3
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746a:	895b      	ldrh	r3, [r3, #10]
 800746c:	b21b      	sxth	r3, r3
 800746e:	429a      	cmp	r2, r3
 8007470:	d001      	beq.n	8007476 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007472:	230d      	movs	r3, #13
 8007474:	e21b      	b.n	80078ae <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	7ddb      	ldrb	r3, [r3, #23]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	b21a      	sxth	r2, r3
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	7d9b      	ldrb	r3, [r3, #22]
 8007482:	b21b      	sxth	r3, r3
 8007484:	4313      	orrs	r3, r2
 8007486:	b21b      	sxth	r3, r3
 8007488:	b29b      	uxth	r3, r3
 800748a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d112      	bne.n	80074b8 <find_volume+0x254>
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007498:	061a      	lsls	r2, r3, #24
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	4313      	orrs	r3, r2
 80074a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80074aa:	0212      	lsls	r2, r2, #8
 80074ac:	4313      	orrs	r3, r2
 80074ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80074b4:	4313      	orrs	r3, r2
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074be:	461a      	mov	r2, r3
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	7c1a      	ldrb	r2, [r3, #16]
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d009      	beq.n	80074f0 <find_volume+0x28c>
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e2:	78db      	ldrb	r3, [r3, #3]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d003      	beq.n	80074f0 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80074e8:	230d      	movs	r3, #13
 80074ea:	e1e0      	b.n	80078ae <find_volume+0x64a>
 80074ec:	200021e8 	.word	0x200021e8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f6:	78db      	ldrb	r3, [r3, #3]
 80074f8:	461a      	mov	r2, r3
 80074fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	7b5a      	ldrb	r2, [r3, #13]
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007514:	789b      	ldrb	r3, [r3, #2]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <find_volume+0x2d0>
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007520:	789b      	ldrb	r3, [r3, #2]
 8007522:	461a      	mov	r2, r3
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752a:	789b      	ldrb	r3, [r3, #2]
 800752c:	3b01      	subs	r3, #1
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007534:	230d      	movs	r3, #13
 8007536:	e1ba      	b.n	80078ae <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	7c9b      	ldrb	r3, [r3, #18]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	b21a      	sxth	r2, r3
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	7c5b      	ldrb	r3, [r3, #17]
 8007544:	b21b      	sxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b21b      	sxth	r3, r3
 800754a:	b29a      	uxth	r2, r3
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007552:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755a:	891b      	ldrh	r3, [r3, #8]
 800755c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800755e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007562:	8952      	ldrh	r2, [r2, #10]
 8007564:	0952      	lsrs	r2, r2, #5
 8007566:	b292      	uxth	r2, r2
 8007568:	fbb3 f1f2 	udiv	r1, r3, r2
 800756c:	fb01 f202 	mul.w	r2, r1, r2
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007578:	230d      	movs	r3, #13
 800757a:	e198      	b.n	80078ae <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	7d1b      	ldrb	r3, [r3, #20]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	b21a      	sxth	r2, r3
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	7cdb      	ldrb	r3, [r3, #19]
 8007588:	b21b      	sxth	r3, r3
 800758a:	4313      	orrs	r3, r2
 800758c:	b21b      	sxth	r3, r3
 800758e:	b29b      	uxth	r3, r3
 8007590:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007594:	2b00      	cmp	r3, #0
 8007596:	d112      	bne.n	80075be <find_volume+0x35a>
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800759e:	061a      	lsls	r2, r3, #24
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	4313      	orrs	r3, r2
 80075aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ac:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80075b0:	0212      	lsls	r2, r2, #8
 80075b2:	4313      	orrs	r3, r2
 80075b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	7bdb      	ldrb	r3, [r3, #15]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	b21a      	sxth	r2, r3
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	7b9b      	ldrb	r3, [r3, #14]
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b21b      	sxth	r3, r3
 80075d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80075d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <find_volume+0x378>
 80075d8:	230d      	movs	r3, #13
 80075da:	e168      	b.n	80078ae <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80075dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e0:	4413      	add	r3, r2
 80075e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075e8:	8911      	ldrh	r1, [r2, #8]
 80075ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075f0:	8952      	ldrh	r2, [r2, #10]
 80075f2:	0952      	lsrs	r2, r2, #5
 80075f4:	b292      	uxth	r2, r2
 80075f6:	fbb1 f2f2 	udiv	r2, r1, r2
 80075fa:	b292      	uxth	r2, r2
 80075fc:	4413      	add	r3, r2
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	429a      	cmp	r2, r3
 8007606:	d201      	bcs.n	800760c <find_volume+0x3a8>
 8007608:	230d      	movs	r3, #13
 800760a:	e150      	b.n	80078ae <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800760c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007618:	7892      	ldrb	r2, [r2, #2]
 800761a:	fbb3 f3f2 	udiv	r3, r3, r2
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <find_volume+0x3c6>
 8007626:	230d      	movs	r3, #13
 8007628:	e141      	b.n	80078ae <find_volume+0x64a>
	fmt = FS_FAT12;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007636:	4293      	cmp	r3, r2
 8007638:	d902      	bls.n	8007640 <find_volume+0x3dc>
 800763a:	2302      	movs	r3, #2
 800763c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007646:	4293      	cmp	r3, r2
 8007648:	d902      	bls.n	8007650 <find_volume+0x3ec>
 800764a:	2303      	movs	r3, #3
 800764c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	3302      	adds	r3, #2
 8007654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800765a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007662:	461a      	mov	r2, r3
 8007664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007666:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007668:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800766a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800766c:	4413      	add	r3, r2
 800766e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007674:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	4413      	add	r3, r2
 800767c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007682:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007688:	2b03      	cmp	r3, #3
 800768a:	d124      	bne.n	80076d6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007692:	891b      	ldrh	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <find_volume+0x438>
 8007698:	230d      	movs	r3, #13
 800769a:	e108      	b.n	80078ae <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076a2:	061a      	lsls	r2, r3, #24
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	4313      	orrs	r3, r2
 80076ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80076b4:	0212      	lsls	r2, r2, #8
 80076b6:	4313      	orrs	r3, r2
 80076b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ba:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80076be:	4313      	orrs	r3, r2
 80076c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076c6:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	647b      	str	r3, [r7, #68]	; 0x44
 80076d4:	e02b      	b.n	800772e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076dc:	891b      	ldrh	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <find_volume+0x482>
 80076e2:	230d      	movs	r3, #13
 80076e4:	e0e3      	b.n	80078ae <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f0:	4413      	add	r3, r2
 80076f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076f8:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80076fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d105      	bne.n	800770e <find_volume+0x4aa>
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	e00e      	b.n	800772c <find_volume+0x4c8>
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007714:	695a      	ldr	r2, [r3, #20]
 8007716:	4613      	mov	r3, r2
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	4413      	add	r3, r2
 800771c:	085a      	lsrs	r2, r3, #1
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773c:	895b      	ldrh	r3, [r3, #10]
 800773e:	4619      	mov	r1, r3
 8007740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007742:	440b      	add	r3, r1
 8007744:	3b01      	subs	r3, #1
 8007746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007748:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800774c:	8949      	ldrh	r1, [r1, #10]
 800774e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007752:	429a      	cmp	r2, r3
 8007754:	d201      	bcs.n	800775a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007756:	230d      	movs	r3, #13
 8007758:	e0a9      	b.n	80078ae <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007760:	461a      	mov	r2, r3
 8007762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007766:	6113      	str	r3, [r2, #16]
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007776:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777e:	2280      	movs	r2, #128	; 0x80
 8007780:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007786:	2b03      	cmp	r3, #3
 8007788:	d17a      	bne.n	8007880 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	b21a      	sxth	r2, r3
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800779a:	b21b      	sxth	r3, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	b21b      	sxth	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d16d      	bne.n	8007880 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80077a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a6:	3301      	adds	r3, #1
 80077a8:	4619      	mov	r1, r3
 80077aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077ac:	f7fd ff8c 	bl	80056c8 <move_window>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d164      	bne.n	8007880 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077bc:	2200      	movs	r2, #0
 80077be:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	b21a      	sxth	r2, r3
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80077d0:	b21b      	sxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b21b      	sxth	r3, r3
 80077d6:	4a38      	ldr	r2, [pc, #224]	; (80078b8 <find_volume+0x654>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d151      	bne.n	8007880 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	78db      	ldrb	r3, [r3, #3]
 80077e0:	061a      	lsls	r2, r3, #24
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	789b      	ldrb	r3, [r3, #2]
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	4313      	orrs	r3, r2
 80077ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ec:	7852      	ldrb	r2, [r2, #1]
 80077ee:	0212      	lsls	r2, r2, #8
 80077f0:	4313      	orrs	r3, r2
 80077f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	4a30      	ldr	r2, [pc, #192]	; (80078bc <find_volume+0x658>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d140      	bne.n	8007880 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007804:	061a      	lsls	r2, r3, #24
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	4313      	orrs	r3, r2
 8007810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007812:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007816:	0212      	lsls	r2, r2, #8
 8007818:	4313      	orrs	r3, r2
 800781a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007820:	4313      	orrs	r3, r2
 8007822:	4a27      	ldr	r2, [pc, #156]	; (80078c0 <find_volume+0x65c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d12b      	bne.n	8007880 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800782e:	061a      	lsls	r2, r3, #24
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	4313      	orrs	r3, r2
 800783a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007840:	0212      	lsls	r2, r2, #8
 8007842:	4313      	orrs	r3, r2
 8007844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007846:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800784a:	4313      	orrs	r3, r2
 800784c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800784e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007852:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800785a:	061a      	lsls	r2, r3, #24
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007862:	041b      	lsls	r3, r3, #16
 8007864:	4313      	orrs	r3, r2
 8007866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007868:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800786c:	0212      	lsls	r2, r2, #8
 800786e:	4313      	orrs	r3, r2
 8007870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007872:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007876:	4313      	orrs	r3, r2
 8007878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800787a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800787e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	461a      	mov	r2, r3
 8007888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <find_volume+0x660>)
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <find_volume+0x660>)
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <find_volume+0x660>)
 800789c:	881a      	ldrh	r2, [r3, #0]
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80078a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078a8:	f7fd fe92 	bl	80055d0 <clear_lock>
#endif

	return FR_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3758      	adds	r7, #88	; 0x58
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	ffffaa55 	.word	0xffffaa55
 80078bc:	41615252 	.word	0x41615252
 80078c0:	61417272 	.word	0x61417272
 80078c4:	200021ec 	.word	0x200021ec

080078c8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d02a      	beq.n	8007930 <validate+0x68>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d024      	beq.n	8007930 <validate+0x68>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <validate+0x68>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007904:	88da      	ldrh	r2, [r3, #6]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790c:	889b      	ldrh	r3, [r3, #4]
 800790e:	429a      	cmp	r2, r3
 8007910:	d10e      	bne.n	8007930 <validate+0x68>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fbab 	bl	800507c <disk_status>
 8007926:	4603      	mov	r3, r0
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007930:	2309      	movs	r3, #9
 8007932:	e000      	b.n	8007936 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007952:	f107 0310 	add.w	r3, r7, #16
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fbd2 	bl	8007100 <get_ldnumber>
 800795c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	2b00      	cmp	r3, #0
 8007962:	da01      	bge.n	8007968 <f_mount+0x28>
 8007964:	230b      	movs	r3, #11
 8007966:	e02f      	b.n	80079c8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <f_mount+0x90>)
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007970:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d007      	beq.n	8007988 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007978:	69b8      	ldr	r0, [r7, #24]
 800797a:	f7fd fe29 	bl	80055d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	490d      	ldr	r1, [pc, #52]	; (80079d0 <f_mount+0x90>)
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <f_mount+0x6e>
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d001      	beq.n	80079b2 <f_mount+0x72>
 80079ae:	2300      	movs	r3, #0
 80079b0:	e00a      	b.n	80079c8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80079b2:	f107 0108 	add.w	r1, r7, #8
 80079b6:	f107 030c 	add.w	r3, r7, #12
 80079ba:	2200      	movs	r2, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fc51 	bl	8007264 <find_volume>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	200021e8 	.word	0x200021e8

080079d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079e2:	f843 0c4c 	str.w	r0, [r3, #-76]
 80079e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079ea:	f843 1c50 	str.w	r1, [r3, #-80]
 80079ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079f2:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80079f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <f_open+0x32>
 8007a02:	2309      	movs	r3, #9
 8007a04:	e2f7      	b.n	8007ff6 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8007a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a0a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a12:	461a      	mov	r2, r3
 8007a14:	2300      	movs	r3, #0
 8007a16:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007a18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a22:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a32:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a36:	f023 0301 	bic.w	r3, r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	f107 0118 	add.w	r1, r7, #24
 8007a40:	3910      	subs	r1, #16
 8007a42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a46:	3b18      	subs	r3, #24
 8007a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff fc09 	bl	8007264 <find_volume>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a58:	f102 0217 	add.w	r2, r2, #23
 8007a5c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a62:	f103 0317 	add.w	r3, r3, #23
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 82bf 	bne.w	8007fec <f_open+0x618>
		INIT_BUF(dj);
 8007a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a72:	461a      	mov	r2, r3
 8007a74:	f107 0318 	add.w	r3, r7, #24
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8007a7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a82:	461a      	mov	r2, r3
 8007a84:	4bd4      	ldr	r3, [pc, #848]	; (8007dd8 <f_open+0x404>)
 8007a86:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a8e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8007a92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a96:	3b18      	subs	r3, #24
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff faba 	bl	8007014 <follow_path>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aa6:	f102 0217 	add.w	r2, r2, #23
 8007aaa:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007aac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ab0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007ab4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ab8:	f102 0210 	add.w	r2, r2, #16
 8007abc:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007abe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ac2:	f103 0317 	add.w	r3, r3, #23
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d126      	bne.n	8007b1a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8007acc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ad0:	f103 0310 	add.w	r3, r3, #16
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <f_open+0x114>
				res = FR_INVALID_NAME;
 8007ada:	2306      	movs	r3, #6
 8007adc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ae0:	f102 0217 	add.w	r2, r2, #23
 8007ae4:	7013      	strb	r3, [r2, #0]
 8007ae6:	e018      	b.n	8007b1a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b04:	3b18      	subs	r3, #24
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fd fbcd 	bl	80052a8 <chk_lock>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b14:	f102 0217 	add.w	r2, r2, #23
 8007b18:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b1e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007b22:	f003 031c 	and.w	r3, r3, #28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 813c 	beq.w	8007da4 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007b2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b30:	f103 0317 	add.w	r3, r3, #23
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02e      	beq.n	8007b98 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007b3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b3e:	f103 0317 	add.w	r3, r3, #23
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d112      	bne.n	8007b6e <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b48:	f7fd fc1e 	bl	8005388 <enq_lock>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <f_open+0x18e>
 8007b52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b56:	3b18      	subs	r3, #24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe ff79 	bl	8006a50 <dir_register>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	e000      	b.n	8007b64 <f_open+0x190>
 8007b62:	2312      	movs	r3, #18
 8007b64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b68:	f102 0217 	add.w	r2, r2, #23
 8007b6c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b72:	461a      	mov	r2, r3
 8007b74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b78:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007b7c:	f043 0308 	orr.w	r3, r3, #8
 8007b80:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b88:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007b8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b90:	f102 0210 	add.w	r2, r2, #16
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	e01f      	b.n	8007bd8 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b9c:	f103 0310 	add.w	r3, r3, #16
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330b      	adds	r3, #11
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 0311 	and.w	r3, r3, #17
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <f_open+0x1e8>
					res = FR_DENIED;
 8007bae:	2307      	movs	r3, #7
 8007bb0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bb4:	f102 0217 	add.w	r2, r2, #23
 8007bb8:	7013      	strb	r3, [r2, #0]
 8007bba:	e00d      	b.n	8007bd8 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007bbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bc0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <f_open+0x204>
						res = FR_EXIST;
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bd2:	f102 0217 	add.w	r2, r2, #23
 8007bd6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bd8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bdc:	f103 0317 	add.w	r3, r3, #23
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 8113 	bne.w	8007e0e <f_open+0x43a>
 8007be8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 810a 	beq.w	8007e0e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8007bfa:	f7fd f9dd 	bl	8004fb8 <get_fattime>
 8007bfe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c02:	f103 030c 	add.w	r3, r3, #12
 8007c06:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007c08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c0c:	f103 0310 	add.w	r3, r3, #16
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330e      	adds	r3, #14
 8007c14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c18:	f102 020c 	add.w	r2, r2, #12
 8007c1c:	6812      	ldr	r2, [r2, #0]
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c26:	f103 030c 	add.w	r3, r3, #12
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c36:	f103 0310 	add.w	r3, r3, #16
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330f      	adds	r3, #15
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c46:	f103 030c 	add.w	r3, r3, #12
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	0c1a      	lsrs	r2, r3, #16
 8007c4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c52:	f103 0310 	add.w	r3, r3, #16
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3310      	adds	r3, #16
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c62:	f103 030c 	add.w	r3, r3, #12
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	0e1a      	lsrs	r2, r3, #24
 8007c6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c6e:	f103 0310 	add.w	r3, r3, #16
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3311      	adds	r3, #17
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007c7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c7e:	f103 0310 	add.w	r3, r3, #16
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330b      	adds	r3, #11
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007c8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c8e:	f103 0310 	add.w	r3, r3, #16
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	331c      	adds	r3, #28
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c9e:	f103 0310 	add.w	r3, r3, #16
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	331d      	adds	r3, #29
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cae:	f103 0310 	add.w	r3, r3, #16
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	331e      	adds	r3, #30
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cbe:	f103 0310 	add.w	r3, r3, #16
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	331f      	adds	r3, #31
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007cca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cce:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007cd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cd6:	f102 0210 	add.w	r2, r2, #16
 8007cda:	6811      	ldr	r1, [r2, #0]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fc06 	bl	80064ee <ld_clust>
 8007ce2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ce6:	f103 0308 	add.w	r3, r3, #8
 8007cea:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007cec:	2100      	movs	r1, #0
 8007cee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cf2:	f103 0310 	add.w	r3, r3, #16
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	f7fe fc27 	bl	800654a <st_clust>
				dj.fs->wflag = 1;
 8007cfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d00:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d08:	2201      	movs	r2, #1
 8007d0a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007d0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d10:	f103 0308 	add.w	r3, r3, #8
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d079      	beq.n	8007e0e <f_open+0x43a>
					dw = dj.fs->winsect;
 8007d1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d1e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d2c:	f102 020c 	add.w	r2, r2, #12
 8007d30:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d36:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d3e:	f102 0208 	add.w	r2, r2, #8
 8007d42:	6811      	ldr	r1, [r2, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe f823 	bl	8005d90 <remove_chain>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d50:	f102 0217 	add.w	r2, r2, #23
 8007d54:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007d56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d5a:	f103 0317 	add.w	r3, r3, #23
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d154      	bne.n	8007e0e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007d64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d68:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007d6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d70:	f103 0308 	add.w	r3, r3, #8
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d7c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007d7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d82:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d8a:	f102 020c 	add.w	r2, r2, #12
 8007d8e:	6811      	ldr	r1, [r2, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fd fc99 	bl	80056c8 <move_window>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d9c:	f102 0217 	add.w	r2, r2, #23
 8007da0:	7013      	strb	r3, [r2, #0]
 8007da2:	e034      	b.n	8007e0e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007da4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007da8:	f103 0317 	add.w	r3, r3, #23
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d12d      	bne.n	8007e0e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007db2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007db6:	f103 0310 	add.w	r3, r3, #16
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330b      	adds	r3, #11
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d009      	beq.n	8007ddc <f_open+0x408>
					res = FR_NO_FILE;
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007dce:	f102 0217 	add.w	r2, r2, #23
 8007dd2:	7013      	strb	r3, [r2, #0]
 8007dd4:	e01b      	b.n	8007e0e <f_open+0x43a>
 8007dd6:	bf00      	nop
 8007dd8:	20002208 	.word	0x20002208
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007ddc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007de0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d010      	beq.n	8007e0e <f_open+0x43a>
 8007dec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007df0:	f103 0310 	add.w	r3, r3, #16
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330b      	adds	r3, #11
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <f_open+0x43a>
						res = FR_DENIED;
 8007e02:	2307      	movs	r3, #7
 8007e04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e08:	f102 0217 	add.w	r2, r2, #23
 8007e0c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007e0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e12:	f103 0317 	add.w	r3, r3, #23
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d157      	bne.n	8007ecc <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e20:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <f_open+0x46e>
				mode |= FA__WRITTEN;
 8007e2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e30:	461a      	mov	r2, r3
 8007e32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e36:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007e3a:	f043 0320 	orr.w	r3, r3, #32
 8007e3e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e46:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e54:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e5c:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e62:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e70:	f103 0310 	add.w	r3, r3, #16
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e7c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e94:	3b18      	subs	r3, #24
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fd fa99 	bl	80053d0 <inc_lock>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ea4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eac:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007eae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eb2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <f_open+0x4f8>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ec6:	f102 0217 	add.w	r2, r2, #23
 8007eca:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007ecc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ed0:	f103 0317 	add.w	r3, r3, #23
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 8088 	bne.w	8007fec <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8007edc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ee0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eee:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007ef2:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007ef4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ef8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f00:	2200      	movs	r2, #0
 8007f02:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007f04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f08:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007f0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f10:	f102 0210 	add.w	r2, r2, #16
 8007f14:	6811      	ldr	r1, [r2, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fae9 	bl	80064ee <ld_clust>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f22:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007f2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f30:	f103 0310 	add.w	r3, r3, #16
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	331f      	adds	r3, #31
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	061a      	lsls	r2, r3, #24
 8007f3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f40:	f103 0310 	add.w	r3, r3, #16
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	331e      	adds	r3, #30
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	041b      	lsls	r3, r3, #16
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f52:	f102 0210 	add.w	r2, r2, #16
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	321d      	adds	r2, #29
 8007f5a:	7812      	ldrb	r2, [r2, #0]
 8007f5c:	0212      	lsls	r2, r2, #8
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f64:	f102 0210 	add.w	r2, r2, #16
 8007f68:	6812      	ldr	r2, [r2, #0]
 8007f6a:	321c      	adds	r2, #28
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007f74:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007f78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f7c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f82:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007f90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f94:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fa6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007fb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fb8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007fbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007fc0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fc8:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	88da      	ldrh	r2, [r3, #6]
 8007fde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fe2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fea:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007fec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ff0:	f103 0317 	add.w	r3, r3, #23
 8007ff4:	781b      	ldrb	r3, [r3, #0]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop

08008004 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff fc53 	bl	80078c8 <validate>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <f_write+0x2c>
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	e21e      	b.n	800846e <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008036:	79db      	ldrb	r3, [r3, #7]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008042:	79db      	ldrb	r3, [r3, #7]
 8008044:	e213      	b.n	800846e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804c:	799b      	ldrb	r3, [r3, #6]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008056:	2307      	movs	r3, #7
 8008058:	e209      	b.n	800846e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	441a      	add	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	f080 81d9 	bcs.w	8008426 <f_write+0x422>
 8008074:	2300      	movs	r3, #0
 8008076:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008078:	e1d5      	b.n	8008426 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800808e:	8952      	ldrh	r2, [r2, #10]
 8008090:	fbb3 f1f2 	udiv	r1, r3, r2
 8008094:	fb01 f202 	mul.w	r2, r1, r2
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	2b00      	cmp	r3, #0
 800809c:	f040 8169 	bne.w	8008372 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080ae:	6812      	ldr	r2, [r2, #0]
 80080b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080b4:	8952      	ldrh	r2, [r2, #10]
 80080b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c8:	789b      	ldrb	r3, [r3, #2]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	4013      	ands	r3, r2
 80080d0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80080d2:	7dbb      	ldrb	r3, [r7, #22]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d15f      	bne.n	8008198 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d111      	bne.n	8008108 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d126      	bne.n	8008142 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fd fea7 	bl	8005e52 <create_chain>
 8008104:	6278      	str	r0, [r7, #36]	; 0x24
 8008106:	e01c      	b.n	8008142 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	4619      	mov	r1, r3
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7fd ff3f 	bl	8005fa2 <clmt_clust>
 8008124:	6278      	str	r0, [r7, #36]	; 0x24
 8008126:	e00c      	b.n	8008142 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fd fe89 	bl	8005e52 <create_chain>
 8008140:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8173 	beq.w	8008430 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	2b01      	cmp	r3, #1
 800814e:	d106      	bne.n	800815e <f_write+0x15a>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008156:	2202      	movs	r2, #2
 8008158:	71da      	strb	r2, [r3, #7]
 800815a:	2302      	movs	r3, #2
 800815c:	e187      	b.n	800846e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008164:	d106      	bne.n	8008174 <f_write+0x170>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800816c:	2201      	movs	r2, #1
 800816e:	71da      	strb	r2, [r3, #7]
 8008170:	2301      	movs	r3, #1
 8008172:	e17c      	b.n	800846e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817a:	461a      	mov	r2, r3
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <f_write+0x194>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008192:	461a      	mov	r2, r3
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819e:	799b      	ldrb	r3, [r3, #6]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d023      	beq.n	80081f0 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	7858      	ldrb	r0, [r3, #1]
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	2301      	movs	r3, #1
 80081c2:	f7fc ffbb 	bl	800513c <disk_write>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d2:	2201      	movs	r2, #1
 80081d4:	71da      	strb	r2, [r3, #7]
 80081d6:	2301      	movs	r3, #1
 80081d8:	e149      	b.n	800846e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e0:	799b      	ldrb	r3, [r3, #6]
 80081e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fd fb51 	bl	80058aa <clust2sect>
 8008208:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <f_write+0x21a>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008216:	2202      	movs	r2, #2
 8008218:	71da      	strb	r2, [r3, #7]
 800821a:	2302      	movs	r3, #2
 800821c:	e127      	b.n	800846e <f_write+0x46a>
			sect += csect;
 800821e:	7dbb      	ldrb	r3, [r7, #22]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008232:	895b      	ldrh	r3, [r3, #10]
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	fbb3 f3f2 	udiv	r3, r3, r2
 800823c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d069      	beq.n	8008318 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008244:	7dba      	ldrb	r2, [r7, #22]
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008256:	7892      	ldrb	r2, [r2, #2]
 8008258:	4293      	cmp	r3, r2
 800825a:	d90a      	bls.n	8008272 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008268:	789b      	ldrb	r3, [r3, #2]
 800826a:	461a      	mov	r2, r3
 800826c:	7dbb      	ldrb	r3, [r7, #22]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827e:	7858      	ldrb	r0, [r3, #1]
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	69b9      	ldr	r1, [r7, #24]
 8008286:	f7fc ff59 	bl	800513c <disk_write>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d006      	beq.n	800829e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008296:	2201      	movs	r2, #1
 8008298:	71da      	strb	r2, [r3, #7]
 800829a:	2301      	movs	r3, #1
 800829c:	e0e7      	b.n	800846e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d926      	bls.n	80082fe <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082ca:	8952      	ldrh	r2, [r2, #10]
 80082cc:	fb02 f303 	mul.w	r3, r2, r3
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	18d1      	adds	r1, r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e0:	895b      	ldrh	r3, [r3, #10]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7fc ff68 	bl	80051b8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ee:	799b      	ldrb	r3, [r3, #6]
 80082f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fc:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830a:	895b      	ldrh	r3, [r3, #10]
 800830c:	461a      	mov	r2, r3
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	fb02 f303 	mul.w	r3, r2, r3
 8008314:	623b      	str	r3, [r7, #32]
				continue;
 8008316:	e06e      	b.n	80083f6 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	429a      	cmp	r2, r3
 8008324:	d01f      	beq.n	8008366 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	429a      	cmp	r2, r3
 8008338:	d215      	bcs.n	8008366 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008346:	7858      	ldrb	r0, [r3, #1]
 8008348:	68f9      	ldr	r1, [r7, #12]
 800834a:	2301      	movs	r3, #1
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	f7fc fed5 	bl	80050fc <disk_read>
 8008352:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008354:	2b00      	cmp	r3, #0
 8008356:	d006      	beq.n	8008366 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835e:	2201      	movs	r2, #1
 8008360:	71da      	strb	r2, [r3, #7]
 8008362:	2301      	movs	r3, #1
 8008364:	e083      	b.n	800846e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836c:	461a      	mov	r2, r3
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837e:	895b      	ldrh	r3, [r3, #10]
 8008380:	4618      	mov	r0, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008396:	8952      	ldrh	r2, [r2, #10]
 8008398:	fbb3 f1f2 	udiv	r1, r3, r2
 800839c:	fb01 f202 	mul.w	r2, r1, r2
 80083a0:	1a9b      	subs	r3, r3, r2
 80083a2:	1ac3      	subs	r3, r0, r3
 80083a4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d901      	bls.n	80083b2 <f_write+0x3ae>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083c6:	8952      	ldrh	r2, [r2, #10]
 80083c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80083cc:	fb01 f202 	mul.w	r2, r1, r2
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4413      	add	r3, r2
 80083d6:	6a3a      	ldr	r2, [r7, #32]
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fc feec 	bl	80051b8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	799b      	ldrb	r3, [r3, #6]
 80083e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f4:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	4413      	add	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	4413      	add	r3, r2
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008410:	6093      	str	r3, [r2, #8]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	441a      	add	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f ae26 	bne.w	800807a <f_write+0x76>
 800842e:	e000      	b.n	8008432 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008430:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	429a      	cmp	r2, r3
 8008444:	d907      	bls.n	8008456 <f_write+0x452>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008454:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845c:	799b      	ldrb	r3, [r3, #6]
 800845e:	f043 0320 	orr.w	r3, r3, #32
 8008462:	b2da      	uxtb	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3728      	adds	r7, #40	; 0x28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b086      	sub	sp, #24
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fa22 	bl	80078c8 <validate>
 8008484:	4603      	mov	r3, r0
 8008486:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 80bc 	bne.w	8008608 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008496:	799b      	ldrb	r3, [r3, #6]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80b3 	beq.w	8008608 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a8:	799b      	ldrb	r3, [r3, #6]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01e      	beq.n	80084f0 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084be:	7858      	ldrb	r0, [r3, #1]
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	2301      	movs	r3, #1
 80084cc:	f7fc fe36 	bl	800513c <disk_write>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80084d6:	2301      	movs	r3, #1
 80084d8:	e097      	b.n	800860a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e0:	799b      	ldrb	r3, [r3, #6]
 80084e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ee:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fd f8e0 	bl	80056c8 <move_window>
 8008508:	4603      	mov	r3, r0
 800850a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d17a      	bne.n	8008608 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	330b      	adds	r3, #11
 8008520:	781a      	ldrb	r2, [r3, #0]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	330b      	adds	r3, #11
 8008526:	f042 0220 	orr.w	r2, r2, #32
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	331c      	adds	r3, #28
 800853a:	b2d2      	uxtb	r2, r2
 800853c:	701a      	strb	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	b29b      	uxth	r3, r3
 8008548:	0a1b      	lsrs	r3, r3, #8
 800854a:	b29a      	uxth	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	331d      	adds	r3, #29
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	0c1a      	lsrs	r2, r3, #16
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	331e      	adds	r3, #30
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	0e1a      	lsrs	r2, r3, #24
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	331f      	adds	r3, #31
 8008574:	b2d2      	uxtb	r2, r2
 8008576:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	4619      	mov	r1, r3
 8008582:	6938      	ldr	r0, [r7, #16]
 8008584:	f7fd ffe1 	bl	800654a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008588:	f7fc fd16 	bl	8004fb8 <get_fattime>
 800858c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3316      	adds	r3, #22
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	b29b      	uxth	r3, r3
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	b29a      	uxth	r2, r3
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	3317      	adds	r3, #23
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	0c1a      	lsrs	r2, r3, #16
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	3318      	adds	r3, #24
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0e1a      	lsrs	r2, r3, #24
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	3319      	adds	r3, #25
 80085bc:	b2d2      	uxtb	r2, r2
 80085be:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3312      	adds	r3, #18
 80085c4:	2200      	movs	r2, #0
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3313      	adds	r3, #19
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d6:	799b      	ldrb	r3, [r3, #6]
 80085d8:	f023 0320 	bic.w	r3, r3, #32
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e4:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f2:	2201      	movs	r2, #1
 80085f4:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fd f894 	bl	800572c <sync_fs>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008608:	7dfb      	ldrb	r3, [r7, #23]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff ff2b 	bl	8008476 <f_sync>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d119      	bne.n	800865e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff f94c 	bl	80078c8 <validate>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d111      	bne.n	800865e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008642:	4618      	mov	r0, r3
 8008644:	f7fc ff80 	bl	8005548 <dec_lock>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d105      	bne.n	800865e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008658:	461a      	mov	r2, r3
 800865a:	2300      	movs	r3, #0
 800865c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b090      	sub	sp, #64	; 0x40
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff f928 	bl	80078c8 <validate>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800867e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <f_lseek+0x24>
 8008686:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800868a:	e2da      	b.n	8008c42 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008692:	79db      	ldrb	r3, [r3, #7]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869e:	79db      	ldrb	r3, [r3, #7]
 80086a0:	e2cf      	b.n	8008c42 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8124 	beq.w	80088f8 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b6:	d16c      	bne.n	8008792 <f_lseek+0x12a>
			tbl = fp->cltbl;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	1d1a      	adds	r2, r3, #4
 80086c6:	627a      	str	r2, [r7, #36]	; 0x24
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	2302      	movs	r3, #2
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d046      	beq.n	800876e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	2300      	movs	r3, #0
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	3302      	adds	r3, #2
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	3301      	adds	r3, #1
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008702:	4618      	mov	r0, r3
 8008704:	f7fd f8f5 	bl	80058f2 <get_fat>
 8008708:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2b01      	cmp	r3, #1
 800870e:	d806      	bhi.n	800871e <f_lseek+0xb6>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	2202      	movs	r2, #2
 8008718:	71da      	strb	r2, [r3, #7]
 800871a:	2302      	movs	r3, #2
 800871c:	e291      	b.n	8008c42 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008724:	d106      	bne.n	8008734 <f_lseek+0xcc>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872c:	2201      	movs	r2, #1
 800872e:	71da      	strb	r2, [r3, #7]
 8008730:	2301      	movs	r3, #1
 8008732:	e286      	b.n	8008c42 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873a:	429a      	cmp	r2, r3
 800873c:	d0d7      	beq.n	80086ee <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800873e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	429a      	cmp	r2, r3
 8008744:	d809      	bhi.n	800875a <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	627a      	str	r2, [r7, #36]	; 0x24
 800874c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	1d1a      	adds	r2, r3, #4
 8008754:	627a      	str	r2, [r7, #36]	; 0x24
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	429a      	cmp	r2, r3
 800876c:	d3b8      	bcc.n	80086e0 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008778:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800877a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	429a      	cmp	r2, r3
 8008780:	d803      	bhi.n	800878a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e259      	b.n	8008c3e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800878a:	2311      	movs	r3, #17
 800878c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008790:	e255      	b.n	8008c3e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d904      	bls.n	80087aa <f_lseek+0x142>
				ofs = fp->fsize;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b0:	461a      	mov	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8240 	beq.w	8008c3e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fd fbec 	bl	8005fa2 <clmt_clust>
 80087ca:	4602      	mov	r2, r0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d2:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fd f85f 	bl	80058aa <clust2sect>
 80087ec:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <f_lseek+0x19a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fa:	2202      	movs	r2, #2
 80087fc:	71da      	strb	r2, [r3, #7]
 80087fe:	2302      	movs	r3, #2
 8008800:	e21f      	b.n	8008c42 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	3b01      	subs	r3, #1
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800880c:	6812      	ldr	r2, [r2, #0]
 800880e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008812:	8952      	ldrh	r2, [r2, #10]
 8008814:	fbb3 f3f2 	udiv	r3, r3, r2
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800881e:	6812      	ldr	r2, [r2, #0]
 8008820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008824:	7892      	ldrb	r2, [r2, #2]
 8008826:	3a01      	subs	r2, #1
 8008828:	4013      	ands	r3, r2
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	4413      	add	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008844:	8952      	ldrh	r2, [r2, #10]
 8008846:	fbb3 f1f2 	udiv	r1, r3, r2
 800884a:	fb01 f202 	mul.w	r2, r1, r2
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 81f4 	beq.w	8008c3e <f_lseek+0x5d6>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	429a      	cmp	r2, r3
 8008862:	f000 81ec 	beq.w	8008c3e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886c:	799b      	ldrb	r3, [r3, #6]
 800886e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008872:	2b00      	cmp	r3, #0
 8008874:	d023      	beq.n	80088be <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008882:	7858      	ldrb	r0, [r3, #1]
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	2301      	movs	r3, #1
 8008890:	f7fc fc54 	bl	800513c <disk_write>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d006      	beq.n	80088a8 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a0:	2201      	movs	r2, #1
 80088a2:	71da      	strb	r2, [r3, #7]
 80088a4:	2301      	movs	r3, #1
 80088a6:	e1cc      	b.n	8008c42 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ae:	799b      	ldrb	r3, [r3, #6]
 80088b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088bc:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ca:	7858      	ldrb	r0, [r3, #1]
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	2301      	movs	r3, #1
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	f7fc fc13 	bl	80050fc <disk_read>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e2:	2201      	movs	r2, #1
 80088e4:	71da      	strb	r2, [r3, #7]
 80088e6:	2301      	movs	r3, #1
 80088e8:	e1ab      	b.n	8008c42 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f0:	461a      	mov	r2, r3
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	6193      	str	r3, [r2, #24]
 80088f6:	e1a2      	b.n	8008c3e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d90c      	bls.n	8008920 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890c:	799b      	ldrb	r3, [r3, #6]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008934:	461a      	mov	r2, r3
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 8100 	beq.w	8008b42 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894e:	789b      	ldrb	r3, [r3, #2]
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895e:	895b      	ldrh	r3, [r3, #10]
 8008960:	fb02 f303 	mul.w	r3, r2, r3
 8008964:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d021      	beq.n	80089b0 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	1e5a      	subs	r2, r3, #1
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	fbb2 f2f3 	udiv	r2, r2, r3
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	1e59      	subs	r1, r3, #1
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008980:	429a      	cmp	r2, r3
 8008982:	d315      	bcc.n	80089b0 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	1e5a      	subs	r2, r3, #1
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	425b      	negs	r3, r3
 800898c:	4013      	ands	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008994:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ae:	e031      	b.n	8008a14 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d123      	bne.n	8008a08 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2100      	movs	r1, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd fa41 	bl	8005e52 <create_chain>
 80089d0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d106      	bne.n	80089e6 <f_lseek+0x37e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089de:	2202      	movs	r2, #2
 80089e0:	71da      	strb	r2, [r3, #7]
 80089e2:	2302      	movs	r3, #2
 80089e4:	e12d      	b.n	8008c42 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ec:	d106      	bne.n	80089fc <f_lseek+0x394>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f4:	2201      	movs	r2, #1
 80089f6:	71da      	strb	r2, [r3, #7]
 80089f8:	2301      	movs	r3, #1
 80089fa:	e122      	b.n	8008c42 <f_lseek+0x5da>
					fp->sclust = clst;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a02:	461a      	mov	r2, r3
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 8093 	beq.w	8008b42 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8008a1c:	e052      	b.n	8008ac4 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a24:	799b      	ldrb	r3, [r3, #6]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00e      	beq.n	8008a4c <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fd fa0a 	bl	8005e52 <create_chain>
 8008a3e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <f_lseek+0x3f6>
							ofs = bcs; break;
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	e03f      	b.n	8008acc <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fc ff4b 	bl	80058f2 <get_fat>
 8008a5c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a64:	d106      	bne.n	8008a74 <f_lseek+0x40c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	71da      	strb	r2, [r3, #7]
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0e6      	b.n	8008c42 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d909      	bls.n	8008a8e <f_lseek+0x426>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d306      	bcc.n	8008a9c <f_lseek+0x434>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a94:	2202      	movs	r2, #2
 8008a96:	71da      	strb	r2, [r3, #7]
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e0d2      	b.n	8008c42 <f_lseek+0x5da>
					fp->clust = clst;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008aba:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d8a8      	bhi.n	8008a1e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ade:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aec:	895b      	ldrh	r3, [r3, #10]
 8008aee:	461a      	mov	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008af6:	fb01 f202 	mul.w	r2, r1, r2
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d020      	beq.n	8008b42 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fc fecd 	bl	80058aa <clust2sect>
 8008b10:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d106      	bne.n	8008b26 <f_lseek+0x4be>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1e:	2202      	movs	r2, #2
 8008b20:	71da      	strb	r2, [r3, #7]
 8008b22:	2302      	movs	r3, #2
 8008b24:	e08d      	b.n	8008c42 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b32:	895b      	ldrh	r3, [r3, #10]
 8008b34:	461a      	mov	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b3e:	4413      	add	r3, r2
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b50:	6812      	ldr	r2, [r2, #0]
 8008b52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b56:	8952      	ldrh	r2, [r2, #10]
 8008b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b5c:	fb01 f202 	mul.w	r2, r1, r2
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d04e      	beq.n	8008c04 <f_lseek+0x59c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d047      	beq.n	8008c04 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b7a:	799b      	ldrb	r3, [r3, #6]
 8008b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d023      	beq.n	8008bcc <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b90:	7858      	ldrb	r0, [r3, #1]
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b9a:	699a      	ldr	r2, [r3, #24]
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f7fc facd 	bl	800513c <disk_write>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d006      	beq.n	8008bb6 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bae:	2201      	movs	r2, #1
 8008bb0:	71da      	strb	r2, [r3, #7]
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e045      	b.n	8008c42 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bbc:	799b      	ldrb	r3, [r3, #6]
 8008bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bca:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd8:	7858      	ldrb	r0, [r3, #1]
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	2301      	movs	r3, #1
 8008bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be0:	f7fc fa8c 	bl	80050fc <disk_read>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d006      	beq.n	8008bf8 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	71da      	strb	r2, [r3, #7]
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e024      	b.n	8008c42 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c02:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d912      	bls.n	8008c3e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c26:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2e:	799b      	ldrb	r3, [r3, #6]
 8008c30:	f043 0320 	orr.w	r3, r3, #32
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3740      	adds	r7, #64	; 0x40
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	2b0a      	cmp	r3, #10
 8008c5a:	d103      	bne.n	8008c64 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008c5c:	210d      	movs	r1, #13
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff fff3 	bl	8008c4a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	db25      	blt.n	8008cbc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	60fa      	str	r2, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b3c      	cmp	r3, #60	; 0x3c
 8008c82:	dd12      	ble.n	8008caa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f103 010c 	add.w	r1, r3, #12
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	f107 0308 	add.w	r3, r7, #8
 8008c94:	f7ff f9b6 	bl	8008004 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d101      	bne.n	8008ca4 <putc_bfd+0x5a>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e001      	b.n	8008ca8 <putc_bfd+0x5e>
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ca8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	609a      	str	r2, [r3, #8]
 8008cba:	e000      	b.n	8008cbe <putc_bfd+0x74>
	if (i < 0) return;
 8008cbc:	bf00      	nop
}
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b097      	sub	sp, #92	; 0x5c
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8008cda:	e009      	b.n	8008cf0 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	f107 030c 	add.w	r3, r7, #12
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff ffad 	bl	8008c4a <putc_bfd>
	while (*str)			/* Put the string */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1f1      	bne.n	8008cdc <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	db15      	blt.n	8008d2a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	461c      	mov	r4, r3
 8008d04:	f107 0208 	add.w	r2, r7, #8
 8008d08:	f107 030c 	add.w	r3, r7, #12
 8008d0c:	f103 010c 	add.w	r1, r3, #12
 8008d10:	4613      	mov	r3, r2
 8008d12:	4622      	mov	r2, r4
 8008d14:	f7ff f976 	bl	8008004 <f_write>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d105      	bne.n	8008d2a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d101      	bne.n	8008d2a <f_puts+0x66>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	e001      	b.n	8008d2e <f_puts+0x6a>
	return EOF;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	375c      	adds	r7, #92	; 0x5c
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd90      	pop	{r4, r7, pc}
	...

08008d38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008d4e:	4b1e      	ldr	r3, [pc, #120]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d50:	7a5b      	ldrb	r3, [r3, #9]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d831      	bhi.n	8008dbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d58:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d5a:	7a5b      	ldrb	r3, [r3, #9]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d62:	2100      	movs	r1, #0
 8008d64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008d66:	4b18      	ldr	r3, [pc, #96]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d68:	7a5b      	ldrb	r3, [r3, #9]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4a16      	ldr	r2, [pc, #88]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d78:	7a5b      	ldrb	r3, [r3, #9]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d80:	4413      	add	r3, r2
 8008d82:	79fa      	ldrb	r2, [r7, #7]
 8008d84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d88:	7a5b      	ldrb	r3, [r3, #9]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	b2d1      	uxtb	r1, r2
 8008d90:	4a0d      	ldr	r2, [pc, #52]	; (8008dc8 <FATFS_LinkDriverEx+0x90>)
 8008d92:	7251      	strb	r1, [r2, #9]
 8008d94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d96:	7dbb      	ldrb	r3, [r7, #22]
 8008d98:	3330      	adds	r3, #48	; 0x30
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	3301      	adds	r3, #1
 8008da4:	223a      	movs	r2, #58	; 0x3a
 8008da6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3302      	adds	r3, #2
 8008dac:	222f      	movs	r2, #47	; 0x2f
 8008dae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	3303      	adds	r3, #3
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr
 8008dc8:	20002408 	.word	0x20002408

08008dcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7ff ffac 	bl	8008d38 <FATFS_LinkDriverEx>
 8008de0:	4603      	mov	r3, r0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008df8:	88fb      	ldrh	r3, [r7, #6]
 8008dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8008dfc:	d802      	bhi.n	8008e04 <ff_convert+0x18>
		c = chr;
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	81fb      	strh	r3, [r7, #14]
 8008e02:	e025      	b.n	8008e50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00b      	beq.n	8008e22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	2bff      	cmp	r3, #255	; 0xff
 8008e0e:	d805      	bhi.n	8008e1c <ff_convert+0x30>
 8008e10:	88fb      	ldrh	r3, [r7, #6]
 8008e12:	3b80      	subs	r3, #128	; 0x80
 8008e14:	4a11      	ldr	r2, [pc, #68]	; (8008e5c <ff_convert+0x70>)
 8008e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1a:	e000      	b.n	8008e1e <ff_convert+0x32>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	81fb      	strh	r3, [r7, #14]
 8008e20:	e016      	b.n	8008e50 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008e22:	2300      	movs	r3, #0
 8008e24:	81fb      	strh	r3, [r7, #14]
 8008e26:	e009      	b.n	8008e3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008e28:	89fb      	ldrh	r3, [r7, #14]
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <ff_convert+0x70>)
 8008e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e30:	88fa      	ldrh	r2, [r7, #6]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d006      	beq.n	8008e44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008e36:	89fb      	ldrh	r3, [r7, #14]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	81fb      	strh	r3, [r7, #14]
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e40:	d9f2      	bls.n	8008e28 <ff_convert+0x3c>
 8008e42:	e000      	b.n	8008e46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008e44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008e46:	89fb      	ldrh	r3, [r7, #14]
 8008e48:	3380      	adds	r3, #128	; 0x80
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008e50:	89fb      	ldrh	r3, [r7, #14]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr
 8008e5c:	080099d0 	.word	0x080099d0

08008e60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e002      	b.n	8008e76 <ff_wtoupper+0x16>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <ff_wtoupper+0x54>)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d006      	beq.n	8008e90 <ff_wtoupper+0x30>
 8008e82:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <ff_wtoupper+0x54>)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d1ef      	bne.n	8008e70 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <ff_wtoupper+0x54>)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <ff_wtoupper+0x46>
 8008e9c:	4a06      	ldr	r2, [pc, #24]	; (8008eb8 <ff_wtoupper+0x58>)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea4:	e000      	b.n	8008ea8 <ff_wtoupper+0x48>
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	08009ad0 	.word	0x08009ad0
 8008eb8:	08009cb0 	.word	0x08009cb0

08008ebc <siprintf>:
 8008ebc:	b40e      	push	{r1, r2, r3}
 8008ebe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ec2:	b500      	push	{lr}
 8008ec4:	b09c      	sub	sp, #112	; 0x70
 8008ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ec8:	9002      	str	r0, [sp, #8]
 8008eca:	9006      	str	r0, [sp, #24]
 8008ecc:	9107      	str	r1, [sp, #28]
 8008ece:	9104      	str	r1, [sp, #16]
 8008ed0:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <siprintf+0x38>)
 8008ed2:	4909      	ldr	r1, [pc, #36]	; (8008ef8 <siprintf+0x3c>)
 8008ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed8:	9105      	str	r1, [sp, #20]
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	a902      	add	r1, sp, #8
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	f000 f99c 	bl	800921c <_svfiprintf_r>
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	9b02      	ldr	r3, [sp, #8]
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	b01c      	add	sp, #112	; 0x70
 8008eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef0:	b003      	add	sp, #12
 8008ef2:	4770      	bx	lr
 8008ef4:	20000070 	.word	0x20000070
 8008ef8:	ffff0208 	.word	0xffff0208

08008efc <memset>:
 8008efc:	4603      	mov	r3, r0
 8008efe:	4402      	add	r2, r0
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d100      	bne.n	8008f06 <memset+0xa>
 8008f04:	4770      	bx	lr
 8008f06:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0a:	e7f9      	b.n	8008f00 <memset+0x4>

08008f0c <__errno>:
 8008f0c:	4b01      	ldr	r3, [pc, #4]	; (8008f14 <__errno+0x8>)
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000070 	.word	0x20000070

08008f18 <__libc_init_array>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	4d0c      	ldr	r5, [pc, #48]	; (8008f50 <__libc_init_array+0x38>)
 8008f1e:	4c0d      	ldr	r4, [pc, #52]	; (8008f54 <__libc_init_array+0x3c>)
 8008f20:	1b64      	subs	r4, r4, r5
 8008f22:	10a4      	asrs	r4, r4, #2
 8008f24:	42a6      	cmp	r6, r4
 8008f26:	d109      	bne.n	8008f3c <__libc_init_array+0x24>
 8008f28:	f000 fc7a 	bl	8009820 <_init>
 8008f2c:	2600      	movs	r6, #0
 8008f2e:	4d0a      	ldr	r5, [pc, #40]	; (8008f58 <__libc_init_array+0x40>)
 8008f30:	4c0a      	ldr	r4, [pc, #40]	; (8008f5c <__libc_init_array+0x44>)
 8008f32:	1b64      	subs	r4, r4, r5
 8008f34:	10a4      	asrs	r4, r4, #2
 8008f36:	42a6      	cmp	r6, r4
 8008f38:	d105      	bne.n	8008f46 <__libc_init_array+0x2e>
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f40:	4798      	blx	r3
 8008f42:	3601      	adds	r6, #1
 8008f44:	e7ee      	b.n	8008f24 <__libc_init_array+0xc>
 8008f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4a:	4798      	blx	r3
 8008f4c:	3601      	adds	r6, #1
 8008f4e:	e7f2      	b.n	8008f36 <__libc_init_array+0x1e>
 8008f50:	08009ec4 	.word	0x08009ec4
 8008f54:	08009ec4 	.word	0x08009ec4
 8008f58:	08009ec4 	.word	0x08009ec4
 8008f5c:	08009ec8 	.word	0x08009ec8

08008f60 <__retarget_lock_acquire_recursive>:
 8008f60:	4770      	bx	lr

08008f62 <__retarget_lock_release_recursive>:
 8008f62:	4770      	bx	lr

08008f64 <memcpy>:
 8008f64:	440a      	add	r2, r1
 8008f66:	4291      	cmp	r1, r2
 8008f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f6c:	d100      	bne.n	8008f70 <memcpy+0xc>
 8008f6e:	4770      	bx	lr
 8008f70:	b510      	push	{r4, lr}
 8008f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f76:	4291      	cmp	r1, r2
 8008f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7c:	d1f9      	bne.n	8008f72 <memcpy+0xe>
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <_free_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4605      	mov	r5, r0
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d040      	beq.n	800900a <_free_r+0x8a>
 8008f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8c:	1f0c      	subs	r4, r1, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfb8      	it	lt
 8008f92:	18e4      	addlt	r4, r4, r3
 8008f94:	f000 f8dc 	bl	8009150 <__malloc_lock>
 8008f98:	4a1c      	ldr	r2, [pc, #112]	; (800900c <_free_r+0x8c>)
 8008f9a:	6813      	ldr	r3, [r2, #0]
 8008f9c:	b933      	cbnz	r3, 8008fac <_free_r+0x2c>
 8008f9e:	6063      	str	r3, [r4, #4]
 8008fa0:	6014      	str	r4, [r2, #0]
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fa8:	f000 b8d8 	b.w	800915c <__malloc_unlock>
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d908      	bls.n	8008fc2 <_free_r+0x42>
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	1821      	adds	r1, r4, r0
 8008fb4:	428b      	cmp	r3, r1
 8008fb6:	bf01      	itttt	eq
 8008fb8:	6819      	ldreq	r1, [r3, #0]
 8008fba:	685b      	ldreq	r3, [r3, #4]
 8008fbc:	1809      	addeq	r1, r1, r0
 8008fbe:	6021      	streq	r1, [r4, #0]
 8008fc0:	e7ed      	b.n	8008f9e <_free_r+0x1e>
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	b10b      	cbz	r3, 8008fcc <_free_r+0x4c>
 8008fc8:	42a3      	cmp	r3, r4
 8008fca:	d9fa      	bls.n	8008fc2 <_free_r+0x42>
 8008fcc:	6811      	ldr	r1, [r2, #0]
 8008fce:	1850      	adds	r0, r2, r1
 8008fd0:	42a0      	cmp	r0, r4
 8008fd2:	d10b      	bne.n	8008fec <_free_r+0x6c>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	4401      	add	r1, r0
 8008fd8:	1850      	adds	r0, r2, r1
 8008fda:	4283      	cmp	r3, r0
 8008fdc:	6011      	str	r1, [r2, #0]
 8008fde:	d1e0      	bne.n	8008fa2 <_free_r+0x22>
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	4408      	add	r0, r1
 8008fe6:	6010      	str	r0, [r2, #0]
 8008fe8:	6053      	str	r3, [r2, #4]
 8008fea:	e7da      	b.n	8008fa2 <_free_r+0x22>
 8008fec:	d902      	bls.n	8008ff4 <_free_r+0x74>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	e7d6      	b.n	8008fa2 <_free_r+0x22>
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	1821      	adds	r1, r4, r0
 8008ff8:	428b      	cmp	r3, r1
 8008ffa:	bf01      	itttt	eq
 8008ffc:	6819      	ldreq	r1, [r3, #0]
 8008ffe:	685b      	ldreq	r3, [r3, #4]
 8009000:	1809      	addeq	r1, r1, r0
 8009002:	6021      	streq	r1, [r4, #0]
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	6054      	str	r4, [r2, #4]
 8009008:	e7cb      	b.n	8008fa2 <_free_r+0x22>
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	20002554 	.word	0x20002554

08009010 <sbrk_aligned>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4e0e      	ldr	r6, [pc, #56]	; (800904c <sbrk_aligned+0x3c>)
 8009014:	460c      	mov	r4, r1
 8009016:	6831      	ldr	r1, [r6, #0]
 8009018:	4605      	mov	r5, r0
 800901a:	b911      	cbnz	r1, 8009022 <sbrk_aligned+0x12>
 800901c:	f000 fbaa 	bl	8009774 <_sbrk_r>
 8009020:	6030      	str	r0, [r6, #0]
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f000 fba5 	bl	8009774 <_sbrk_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d00a      	beq.n	8009044 <sbrk_aligned+0x34>
 800902e:	1cc4      	adds	r4, r0, #3
 8009030:	f024 0403 	bic.w	r4, r4, #3
 8009034:	42a0      	cmp	r0, r4
 8009036:	d007      	beq.n	8009048 <sbrk_aligned+0x38>
 8009038:	1a21      	subs	r1, r4, r0
 800903a:	4628      	mov	r0, r5
 800903c:	f000 fb9a 	bl	8009774 <_sbrk_r>
 8009040:	3001      	adds	r0, #1
 8009042:	d101      	bne.n	8009048 <sbrk_aligned+0x38>
 8009044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009048:	4620      	mov	r0, r4
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	20002558 	.word	0x20002558

08009050 <_malloc_r>:
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009054:	1ccd      	adds	r5, r1, #3
 8009056:	f025 0503 	bic.w	r5, r5, #3
 800905a:	3508      	adds	r5, #8
 800905c:	2d0c      	cmp	r5, #12
 800905e:	bf38      	it	cc
 8009060:	250c      	movcc	r5, #12
 8009062:	2d00      	cmp	r5, #0
 8009064:	4607      	mov	r7, r0
 8009066:	db01      	blt.n	800906c <_malloc_r+0x1c>
 8009068:	42a9      	cmp	r1, r5
 800906a:	d905      	bls.n	8009078 <_malloc_r+0x28>
 800906c:	230c      	movs	r3, #12
 800906e:	2600      	movs	r6, #0
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	4630      	mov	r0, r6
 8009074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800914c <_malloc_r+0xfc>
 800907c:	f000 f868 	bl	8009150 <__malloc_lock>
 8009080:	f8d8 3000 	ldr.w	r3, [r8]
 8009084:	461c      	mov	r4, r3
 8009086:	bb5c      	cbnz	r4, 80090e0 <_malloc_r+0x90>
 8009088:	4629      	mov	r1, r5
 800908a:	4638      	mov	r0, r7
 800908c:	f7ff ffc0 	bl	8009010 <sbrk_aligned>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	4604      	mov	r4, r0
 8009094:	d155      	bne.n	8009142 <_malloc_r+0xf2>
 8009096:	f8d8 4000 	ldr.w	r4, [r8]
 800909a:	4626      	mov	r6, r4
 800909c:	2e00      	cmp	r6, #0
 800909e:	d145      	bne.n	800912c <_malloc_r+0xdc>
 80090a0:	2c00      	cmp	r4, #0
 80090a2:	d048      	beq.n	8009136 <_malloc_r+0xe6>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	4631      	mov	r1, r6
 80090a8:	4638      	mov	r0, r7
 80090aa:	eb04 0903 	add.w	r9, r4, r3
 80090ae:	f000 fb61 	bl	8009774 <_sbrk_r>
 80090b2:	4581      	cmp	r9, r0
 80090b4:	d13f      	bne.n	8009136 <_malloc_r+0xe6>
 80090b6:	6821      	ldr	r1, [r4, #0]
 80090b8:	4638      	mov	r0, r7
 80090ba:	1a6d      	subs	r5, r5, r1
 80090bc:	4629      	mov	r1, r5
 80090be:	f7ff ffa7 	bl	8009010 <sbrk_aligned>
 80090c2:	3001      	adds	r0, #1
 80090c4:	d037      	beq.n	8009136 <_malloc_r+0xe6>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	442b      	add	r3, r5
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d038      	beq.n	8009146 <_malloc_r+0xf6>
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	42a2      	cmp	r2, r4
 80090d8:	d12b      	bne.n	8009132 <_malloc_r+0xe2>
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	e00f      	b.n	8009100 <_malloc_r+0xb0>
 80090e0:	6822      	ldr	r2, [r4, #0]
 80090e2:	1b52      	subs	r2, r2, r5
 80090e4:	d41f      	bmi.n	8009126 <_malloc_r+0xd6>
 80090e6:	2a0b      	cmp	r2, #11
 80090e8:	d917      	bls.n	800911a <_malloc_r+0xca>
 80090ea:	1961      	adds	r1, r4, r5
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	6025      	str	r5, [r4, #0]
 80090f0:	bf18      	it	ne
 80090f2:	6059      	strne	r1, [r3, #4]
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	bf08      	it	eq
 80090f8:	f8c8 1000 	streq.w	r1, [r8]
 80090fc:	5162      	str	r2, [r4, r5]
 80090fe:	604b      	str	r3, [r1, #4]
 8009100:	4638      	mov	r0, r7
 8009102:	f104 060b 	add.w	r6, r4, #11
 8009106:	f000 f829 	bl	800915c <__malloc_unlock>
 800910a:	f026 0607 	bic.w	r6, r6, #7
 800910e:	1d23      	adds	r3, r4, #4
 8009110:	1af2      	subs	r2, r6, r3
 8009112:	d0ae      	beq.n	8009072 <_malloc_r+0x22>
 8009114:	1b9b      	subs	r3, r3, r6
 8009116:	50a3      	str	r3, [r4, r2]
 8009118:	e7ab      	b.n	8009072 <_malloc_r+0x22>
 800911a:	42a3      	cmp	r3, r4
 800911c:	6862      	ldr	r2, [r4, #4]
 800911e:	d1dd      	bne.n	80090dc <_malloc_r+0x8c>
 8009120:	f8c8 2000 	str.w	r2, [r8]
 8009124:	e7ec      	b.n	8009100 <_malloc_r+0xb0>
 8009126:	4623      	mov	r3, r4
 8009128:	6864      	ldr	r4, [r4, #4]
 800912a:	e7ac      	b.n	8009086 <_malloc_r+0x36>
 800912c:	4634      	mov	r4, r6
 800912e:	6876      	ldr	r6, [r6, #4]
 8009130:	e7b4      	b.n	800909c <_malloc_r+0x4c>
 8009132:	4613      	mov	r3, r2
 8009134:	e7cc      	b.n	80090d0 <_malloc_r+0x80>
 8009136:	230c      	movs	r3, #12
 8009138:	4638      	mov	r0, r7
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	f000 f80e 	bl	800915c <__malloc_unlock>
 8009140:	e797      	b.n	8009072 <_malloc_r+0x22>
 8009142:	6025      	str	r5, [r4, #0]
 8009144:	e7dc      	b.n	8009100 <_malloc_r+0xb0>
 8009146:	605b      	str	r3, [r3, #4]
 8009148:	deff      	udf	#255	; 0xff
 800914a:	bf00      	nop
 800914c:	20002554 	.word	0x20002554

08009150 <__malloc_lock>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__malloc_lock+0x8>)
 8009152:	f7ff bf05 	b.w	8008f60 <__retarget_lock_acquire_recursive>
 8009156:	bf00      	nop
 8009158:	20002550 	.word	0x20002550

0800915c <__malloc_unlock>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__malloc_unlock+0x8>)
 800915e:	f7ff bf00 	b.w	8008f62 <__retarget_lock_release_recursive>
 8009162:	bf00      	nop
 8009164:	20002550 	.word	0x20002550

08009168 <__ssputs_r>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	461f      	mov	r7, r3
 800916e:	688e      	ldr	r6, [r1, #8]
 8009170:	4682      	mov	sl, r0
 8009172:	42be      	cmp	r6, r7
 8009174:	460c      	mov	r4, r1
 8009176:	4690      	mov	r8, r2
 8009178:	680b      	ldr	r3, [r1, #0]
 800917a:	d82c      	bhi.n	80091d6 <__ssputs_r+0x6e>
 800917c:	898a      	ldrh	r2, [r1, #12]
 800917e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009182:	d026      	beq.n	80091d2 <__ssputs_r+0x6a>
 8009184:	6965      	ldr	r5, [r4, #20]
 8009186:	6909      	ldr	r1, [r1, #16]
 8009188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800918c:	eba3 0901 	sub.w	r9, r3, r1
 8009190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009194:	1c7b      	adds	r3, r7, #1
 8009196:	444b      	add	r3, r9
 8009198:	106d      	asrs	r5, r5, #1
 800919a:	429d      	cmp	r5, r3
 800919c:	bf38      	it	cc
 800919e:	461d      	movcc	r5, r3
 80091a0:	0553      	lsls	r3, r2, #21
 80091a2:	d527      	bpl.n	80091f4 <__ssputs_r+0x8c>
 80091a4:	4629      	mov	r1, r5
 80091a6:	f7ff ff53 	bl	8009050 <_malloc_r>
 80091aa:	4606      	mov	r6, r0
 80091ac:	b360      	cbz	r0, 8009208 <__ssputs_r+0xa0>
 80091ae:	464a      	mov	r2, r9
 80091b0:	6921      	ldr	r1, [r4, #16]
 80091b2:	f7ff fed7 	bl	8008f64 <memcpy>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	6126      	str	r6, [r4, #16]
 80091c4:	444e      	add	r6, r9
 80091c6:	6026      	str	r6, [r4, #0]
 80091c8:	463e      	mov	r6, r7
 80091ca:	6165      	str	r5, [r4, #20]
 80091cc:	eba5 0509 	sub.w	r5, r5, r9
 80091d0:	60a5      	str	r5, [r4, #8]
 80091d2:	42be      	cmp	r6, r7
 80091d4:	d900      	bls.n	80091d8 <__ssputs_r+0x70>
 80091d6:	463e      	mov	r6, r7
 80091d8:	4632      	mov	r2, r6
 80091da:	4641      	mov	r1, r8
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	f000 faaf 	bl	8009740 <memmove>
 80091e2:	2000      	movs	r0, #0
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	1b9b      	subs	r3, r3, r6
 80091e8:	60a3      	str	r3, [r4, #8]
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	4433      	add	r3, r6
 80091ee:	6023      	str	r3, [r4, #0]
 80091f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f4:	462a      	mov	r2, r5
 80091f6:	f000 fadb 	bl	80097b0 <_realloc_r>
 80091fa:	4606      	mov	r6, r0
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1e0      	bne.n	80091c2 <__ssputs_r+0x5a>
 8009200:	4650      	mov	r0, sl
 8009202:	6921      	ldr	r1, [r4, #16]
 8009204:	f7ff febc 	bl	8008f80 <_free_r>
 8009208:	230c      	movs	r3, #12
 800920a:	f8ca 3000 	str.w	r3, [sl]
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	e7e9      	b.n	80091f0 <__ssputs_r+0x88>

0800921c <_svfiprintf_r>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	4698      	mov	r8, r3
 8009222:	898b      	ldrh	r3, [r1, #12]
 8009224:	4607      	mov	r7, r0
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	460d      	mov	r5, r1
 800922a:	4614      	mov	r4, r2
 800922c:	b09d      	sub	sp, #116	; 0x74
 800922e:	d50e      	bpl.n	800924e <_svfiprintf_r+0x32>
 8009230:	690b      	ldr	r3, [r1, #16]
 8009232:	b963      	cbnz	r3, 800924e <_svfiprintf_r+0x32>
 8009234:	2140      	movs	r1, #64	; 0x40
 8009236:	f7ff ff0b 	bl	8009050 <_malloc_r>
 800923a:	6028      	str	r0, [r5, #0]
 800923c:	6128      	str	r0, [r5, #16]
 800923e:	b920      	cbnz	r0, 800924a <_svfiprintf_r+0x2e>
 8009240:	230c      	movs	r3, #12
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009248:	e0d0      	b.n	80093ec <_svfiprintf_r+0x1d0>
 800924a:	2340      	movs	r3, #64	; 0x40
 800924c:	616b      	str	r3, [r5, #20]
 800924e:	2300      	movs	r3, #0
 8009250:	9309      	str	r3, [sp, #36]	; 0x24
 8009252:	2320      	movs	r3, #32
 8009254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009258:	2330      	movs	r3, #48	; 0x30
 800925a:	f04f 0901 	mov.w	r9, #1
 800925e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009262:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009404 <_svfiprintf_r+0x1e8>
 8009266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800926a:	4623      	mov	r3, r4
 800926c:	469a      	mov	sl, r3
 800926e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009272:	b10a      	cbz	r2, 8009278 <_svfiprintf_r+0x5c>
 8009274:	2a25      	cmp	r2, #37	; 0x25
 8009276:	d1f9      	bne.n	800926c <_svfiprintf_r+0x50>
 8009278:	ebba 0b04 	subs.w	fp, sl, r4
 800927c:	d00b      	beq.n	8009296 <_svfiprintf_r+0x7a>
 800927e:	465b      	mov	r3, fp
 8009280:	4622      	mov	r2, r4
 8009282:	4629      	mov	r1, r5
 8009284:	4638      	mov	r0, r7
 8009286:	f7ff ff6f 	bl	8009168 <__ssputs_r>
 800928a:	3001      	adds	r0, #1
 800928c:	f000 80a9 	beq.w	80093e2 <_svfiprintf_r+0x1c6>
 8009290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009292:	445a      	add	r2, fp
 8009294:	9209      	str	r2, [sp, #36]	; 0x24
 8009296:	f89a 3000 	ldrb.w	r3, [sl]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 80a1 	beq.w	80093e2 <_svfiprintf_r+0x1c6>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092aa:	f10a 0a01 	add.w	sl, sl, #1
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092b6:	931a      	str	r3, [sp, #104]	; 0x68
 80092b8:	4654      	mov	r4, sl
 80092ba:	2205      	movs	r2, #5
 80092bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c0:	4850      	ldr	r0, [pc, #320]	; (8009404 <_svfiprintf_r+0x1e8>)
 80092c2:	f000 fa67 	bl	8009794 <memchr>
 80092c6:	9a04      	ldr	r2, [sp, #16]
 80092c8:	b9d8      	cbnz	r0, 8009302 <_svfiprintf_r+0xe6>
 80092ca:	06d0      	lsls	r0, r2, #27
 80092cc:	bf44      	itt	mi
 80092ce:	2320      	movmi	r3, #32
 80092d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d4:	0711      	lsls	r1, r2, #28
 80092d6:	bf44      	itt	mi
 80092d8:	232b      	movmi	r3, #43	; 0x2b
 80092da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092de:	f89a 3000 	ldrb.w	r3, [sl]
 80092e2:	2b2a      	cmp	r3, #42	; 0x2a
 80092e4:	d015      	beq.n	8009312 <_svfiprintf_r+0xf6>
 80092e6:	4654      	mov	r4, sl
 80092e8:	2000      	movs	r0, #0
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	9a07      	ldr	r2, [sp, #28]
 80092f0:	4621      	mov	r1, r4
 80092f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f6:	3b30      	subs	r3, #48	; 0x30
 80092f8:	2b09      	cmp	r3, #9
 80092fa:	d94d      	bls.n	8009398 <_svfiprintf_r+0x17c>
 80092fc:	b1b0      	cbz	r0, 800932c <_svfiprintf_r+0x110>
 80092fe:	9207      	str	r2, [sp, #28]
 8009300:	e014      	b.n	800932c <_svfiprintf_r+0x110>
 8009302:	eba0 0308 	sub.w	r3, r0, r8
 8009306:	fa09 f303 	lsl.w	r3, r9, r3
 800930a:	4313      	orrs	r3, r2
 800930c:	46a2      	mov	sl, r4
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	e7d2      	b.n	80092b8 <_svfiprintf_r+0x9c>
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	1d19      	adds	r1, r3, #4
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	9103      	str	r1, [sp, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfbb      	ittet	lt
 800931e:	425b      	neglt	r3, r3
 8009320:	f042 0202 	orrlt.w	r2, r2, #2
 8009324:	9307      	strge	r3, [sp, #28]
 8009326:	9307      	strlt	r3, [sp, #28]
 8009328:	bfb8      	it	lt
 800932a:	9204      	strlt	r2, [sp, #16]
 800932c:	7823      	ldrb	r3, [r4, #0]
 800932e:	2b2e      	cmp	r3, #46	; 0x2e
 8009330:	d10c      	bne.n	800934c <_svfiprintf_r+0x130>
 8009332:	7863      	ldrb	r3, [r4, #1]
 8009334:	2b2a      	cmp	r3, #42	; 0x2a
 8009336:	d134      	bne.n	80093a2 <_svfiprintf_r+0x186>
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	3402      	adds	r4, #2
 800933c:	1d1a      	adds	r2, r3, #4
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	9203      	str	r2, [sp, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfb8      	it	lt
 8009346:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800934a:	9305      	str	r3, [sp, #20]
 800934c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009408 <_svfiprintf_r+0x1ec>
 8009350:	2203      	movs	r2, #3
 8009352:	4650      	mov	r0, sl
 8009354:	7821      	ldrb	r1, [r4, #0]
 8009356:	f000 fa1d 	bl	8009794 <memchr>
 800935a:	b138      	cbz	r0, 800936c <_svfiprintf_r+0x150>
 800935c:	2240      	movs	r2, #64	; 0x40
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	eba0 000a 	sub.w	r0, r0, sl
 8009364:	4082      	lsls	r2, r0
 8009366:	4313      	orrs	r3, r2
 8009368:	3401      	adds	r4, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009370:	2206      	movs	r2, #6
 8009372:	4826      	ldr	r0, [pc, #152]	; (800940c <_svfiprintf_r+0x1f0>)
 8009374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009378:	f000 fa0c 	bl	8009794 <memchr>
 800937c:	2800      	cmp	r0, #0
 800937e:	d038      	beq.n	80093f2 <_svfiprintf_r+0x1d6>
 8009380:	4b23      	ldr	r3, [pc, #140]	; (8009410 <_svfiprintf_r+0x1f4>)
 8009382:	bb1b      	cbnz	r3, 80093cc <_svfiprintf_r+0x1b0>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	3307      	adds	r3, #7
 8009388:	f023 0307 	bic.w	r3, r3, #7
 800938c:	3308      	adds	r3, #8
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009392:	4433      	add	r3, r6
 8009394:	9309      	str	r3, [sp, #36]	; 0x24
 8009396:	e768      	b.n	800926a <_svfiprintf_r+0x4e>
 8009398:	460c      	mov	r4, r1
 800939a:	2001      	movs	r0, #1
 800939c:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a0:	e7a6      	b.n	80092f0 <_svfiprintf_r+0xd4>
 80093a2:	2300      	movs	r3, #0
 80093a4:	f04f 0c0a 	mov.w	ip, #10
 80093a8:	4619      	mov	r1, r3
 80093aa:	3401      	adds	r4, #1
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	4620      	mov	r0, r4
 80093b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b4:	3a30      	subs	r2, #48	; 0x30
 80093b6:	2a09      	cmp	r2, #9
 80093b8:	d903      	bls.n	80093c2 <_svfiprintf_r+0x1a6>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0c6      	beq.n	800934c <_svfiprintf_r+0x130>
 80093be:	9105      	str	r1, [sp, #20]
 80093c0:	e7c4      	b.n	800934c <_svfiprintf_r+0x130>
 80093c2:	4604      	mov	r4, r0
 80093c4:	2301      	movs	r3, #1
 80093c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ca:	e7f0      	b.n	80093ae <_svfiprintf_r+0x192>
 80093cc:	ab03      	add	r3, sp, #12
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	462a      	mov	r2, r5
 80093d2:	4638      	mov	r0, r7
 80093d4:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <_svfiprintf_r+0x1f8>)
 80093d6:	a904      	add	r1, sp, #16
 80093d8:	f3af 8000 	nop.w
 80093dc:	1c42      	adds	r2, r0, #1
 80093de:	4606      	mov	r6, r0
 80093e0:	d1d6      	bne.n	8009390 <_svfiprintf_r+0x174>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	065b      	lsls	r3, r3, #25
 80093e6:	f53f af2d 	bmi.w	8009244 <_svfiprintf_r+0x28>
 80093ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ec:	b01d      	add	sp, #116	; 0x74
 80093ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f2:	ab03      	add	r3, sp, #12
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	462a      	mov	r2, r5
 80093f8:	4638      	mov	r0, r7
 80093fa:	4b06      	ldr	r3, [pc, #24]	; (8009414 <_svfiprintf_r+0x1f8>)
 80093fc:	a904      	add	r1, sp, #16
 80093fe:	f000 f87d 	bl	80094fc <_printf_i>
 8009402:	e7eb      	b.n	80093dc <_svfiprintf_r+0x1c0>
 8009404:	08009e90 	.word	0x08009e90
 8009408:	08009e96 	.word	0x08009e96
 800940c:	08009e9a 	.word	0x08009e9a
 8009410:	00000000 	.word	0x00000000
 8009414:	08009169 	.word	0x08009169

08009418 <_printf_common>:
 8009418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	4616      	mov	r6, r2
 800941e:	4699      	mov	r9, r3
 8009420:	688a      	ldr	r2, [r1, #8]
 8009422:	690b      	ldr	r3, [r1, #16]
 8009424:	4607      	mov	r7, r0
 8009426:	4293      	cmp	r3, r2
 8009428:	bfb8      	it	lt
 800942a:	4613      	movlt	r3, r2
 800942c:	6033      	str	r3, [r6, #0]
 800942e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009432:	460c      	mov	r4, r1
 8009434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009438:	b10a      	cbz	r2, 800943e <_printf_common+0x26>
 800943a:	3301      	adds	r3, #1
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	0699      	lsls	r1, r3, #26
 8009442:	bf42      	ittt	mi
 8009444:	6833      	ldrmi	r3, [r6, #0]
 8009446:	3302      	addmi	r3, #2
 8009448:	6033      	strmi	r3, [r6, #0]
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	f015 0506 	ands.w	r5, r5, #6
 8009450:	d106      	bne.n	8009460 <_printf_common+0x48>
 8009452:	f104 0a19 	add.w	sl, r4, #25
 8009456:	68e3      	ldr	r3, [r4, #12]
 8009458:	6832      	ldr	r2, [r6, #0]
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	42ab      	cmp	r3, r5
 800945e:	dc2b      	bgt.n	80094b8 <_printf_common+0xa0>
 8009460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009464:	1e13      	subs	r3, r2, #0
 8009466:	6822      	ldr	r2, [r4, #0]
 8009468:	bf18      	it	ne
 800946a:	2301      	movne	r3, #1
 800946c:	0692      	lsls	r2, r2, #26
 800946e:	d430      	bmi.n	80094d2 <_printf_common+0xba>
 8009470:	4649      	mov	r1, r9
 8009472:	4638      	mov	r0, r7
 8009474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009478:	47c0      	blx	r8
 800947a:	3001      	adds	r0, #1
 800947c:	d023      	beq.n	80094c6 <_printf_common+0xae>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	6922      	ldr	r2, [r4, #16]
 8009482:	f003 0306 	and.w	r3, r3, #6
 8009486:	2b04      	cmp	r3, #4
 8009488:	bf14      	ite	ne
 800948a:	2500      	movne	r5, #0
 800948c:	6833      	ldreq	r3, [r6, #0]
 800948e:	f04f 0600 	mov.w	r6, #0
 8009492:	bf08      	it	eq
 8009494:	68e5      	ldreq	r5, [r4, #12]
 8009496:	f104 041a 	add.w	r4, r4, #26
 800949a:	bf08      	it	eq
 800949c:	1aed      	subeq	r5, r5, r3
 800949e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80094a2:	bf08      	it	eq
 80094a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a8:	4293      	cmp	r3, r2
 80094aa:	bfc4      	itt	gt
 80094ac:	1a9b      	subgt	r3, r3, r2
 80094ae:	18ed      	addgt	r5, r5, r3
 80094b0:	42b5      	cmp	r5, r6
 80094b2:	d11a      	bne.n	80094ea <_printf_common+0xd2>
 80094b4:	2000      	movs	r0, #0
 80094b6:	e008      	b.n	80094ca <_printf_common+0xb2>
 80094b8:	2301      	movs	r3, #1
 80094ba:	4652      	mov	r2, sl
 80094bc:	4649      	mov	r1, r9
 80094be:	4638      	mov	r0, r7
 80094c0:	47c0      	blx	r8
 80094c2:	3001      	adds	r0, #1
 80094c4:	d103      	bne.n	80094ce <_printf_common+0xb6>
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ce:	3501      	adds	r5, #1
 80094d0:	e7c1      	b.n	8009456 <_printf_common+0x3e>
 80094d2:	2030      	movs	r0, #48	; 0x30
 80094d4:	18e1      	adds	r1, r4, r3
 80094d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094e0:	4422      	add	r2, r4
 80094e2:	3302      	adds	r3, #2
 80094e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094e8:	e7c2      	b.n	8009470 <_printf_common+0x58>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4622      	mov	r2, r4
 80094ee:	4649      	mov	r1, r9
 80094f0:	4638      	mov	r0, r7
 80094f2:	47c0      	blx	r8
 80094f4:	3001      	adds	r0, #1
 80094f6:	d0e6      	beq.n	80094c6 <_printf_common+0xae>
 80094f8:	3601      	adds	r6, #1
 80094fa:	e7d9      	b.n	80094b0 <_printf_common+0x98>

080094fc <_printf_i>:
 80094fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	7e0f      	ldrb	r7, [r1, #24]
 8009502:	4691      	mov	r9, r2
 8009504:	2f78      	cmp	r7, #120	; 0x78
 8009506:	4680      	mov	r8, r0
 8009508:	460c      	mov	r4, r1
 800950a:	469a      	mov	sl, r3
 800950c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800950e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009512:	d807      	bhi.n	8009524 <_printf_i+0x28>
 8009514:	2f62      	cmp	r7, #98	; 0x62
 8009516:	d80a      	bhi.n	800952e <_printf_i+0x32>
 8009518:	2f00      	cmp	r7, #0
 800951a:	f000 80d5 	beq.w	80096c8 <_printf_i+0x1cc>
 800951e:	2f58      	cmp	r7, #88	; 0x58
 8009520:	f000 80c1 	beq.w	80096a6 <_printf_i+0x1aa>
 8009524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800952c:	e03a      	b.n	80095a4 <_printf_i+0xa8>
 800952e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009532:	2b15      	cmp	r3, #21
 8009534:	d8f6      	bhi.n	8009524 <_printf_i+0x28>
 8009536:	a101      	add	r1, pc, #4	; (adr r1, 800953c <_printf_i+0x40>)
 8009538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800953c:	08009595 	.word	0x08009595
 8009540:	080095a9 	.word	0x080095a9
 8009544:	08009525 	.word	0x08009525
 8009548:	08009525 	.word	0x08009525
 800954c:	08009525 	.word	0x08009525
 8009550:	08009525 	.word	0x08009525
 8009554:	080095a9 	.word	0x080095a9
 8009558:	08009525 	.word	0x08009525
 800955c:	08009525 	.word	0x08009525
 8009560:	08009525 	.word	0x08009525
 8009564:	08009525 	.word	0x08009525
 8009568:	080096af 	.word	0x080096af
 800956c:	080095d5 	.word	0x080095d5
 8009570:	08009669 	.word	0x08009669
 8009574:	08009525 	.word	0x08009525
 8009578:	08009525 	.word	0x08009525
 800957c:	080096d1 	.word	0x080096d1
 8009580:	08009525 	.word	0x08009525
 8009584:	080095d5 	.word	0x080095d5
 8009588:	08009525 	.word	0x08009525
 800958c:	08009525 	.word	0x08009525
 8009590:	08009671 	.word	0x08009671
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	1d1a      	adds	r2, r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	602a      	str	r2, [r5, #0]
 800959c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095a4:	2301      	movs	r3, #1
 80095a6:	e0a0      	b.n	80096ea <_printf_i+0x1ee>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	682b      	ldr	r3, [r5, #0]
 80095ac:	0607      	lsls	r7, r0, #24
 80095ae:	f103 0104 	add.w	r1, r3, #4
 80095b2:	6029      	str	r1, [r5, #0]
 80095b4:	d501      	bpl.n	80095ba <_printf_i+0xbe>
 80095b6:	681e      	ldr	r6, [r3, #0]
 80095b8:	e003      	b.n	80095c2 <_printf_i+0xc6>
 80095ba:	0646      	lsls	r6, r0, #25
 80095bc:	d5fb      	bpl.n	80095b6 <_printf_i+0xba>
 80095be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	da03      	bge.n	80095ce <_printf_i+0xd2>
 80095c6:	232d      	movs	r3, #45	; 0x2d
 80095c8:	4276      	negs	r6, r6
 80095ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ce:	230a      	movs	r3, #10
 80095d0:	4859      	ldr	r0, [pc, #356]	; (8009738 <_printf_i+0x23c>)
 80095d2:	e012      	b.n	80095fa <_printf_i+0xfe>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	1d19      	adds	r1, r3, #4
 80095da:	6029      	str	r1, [r5, #0]
 80095dc:	0605      	lsls	r5, r0, #24
 80095de:	d501      	bpl.n	80095e4 <_printf_i+0xe8>
 80095e0:	681e      	ldr	r6, [r3, #0]
 80095e2:	e002      	b.n	80095ea <_printf_i+0xee>
 80095e4:	0641      	lsls	r1, r0, #25
 80095e6:	d5fb      	bpl.n	80095e0 <_printf_i+0xe4>
 80095e8:	881e      	ldrh	r6, [r3, #0]
 80095ea:	2f6f      	cmp	r7, #111	; 0x6f
 80095ec:	bf0c      	ite	eq
 80095ee:	2308      	moveq	r3, #8
 80095f0:	230a      	movne	r3, #10
 80095f2:	4851      	ldr	r0, [pc, #324]	; (8009738 <_printf_i+0x23c>)
 80095f4:	2100      	movs	r1, #0
 80095f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095fa:	6865      	ldr	r5, [r4, #4]
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	bfa8      	it	ge
 8009600:	6821      	ldrge	r1, [r4, #0]
 8009602:	60a5      	str	r5, [r4, #8]
 8009604:	bfa4      	itt	ge
 8009606:	f021 0104 	bicge.w	r1, r1, #4
 800960a:	6021      	strge	r1, [r4, #0]
 800960c:	b90e      	cbnz	r6, 8009612 <_printf_i+0x116>
 800960e:	2d00      	cmp	r5, #0
 8009610:	d04b      	beq.n	80096aa <_printf_i+0x1ae>
 8009612:	4615      	mov	r5, r2
 8009614:	fbb6 f1f3 	udiv	r1, r6, r3
 8009618:	fb03 6711 	mls	r7, r3, r1, r6
 800961c:	5dc7      	ldrb	r7, [r0, r7]
 800961e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009622:	4637      	mov	r7, r6
 8009624:	42bb      	cmp	r3, r7
 8009626:	460e      	mov	r6, r1
 8009628:	d9f4      	bls.n	8009614 <_printf_i+0x118>
 800962a:	2b08      	cmp	r3, #8
 800962c:	d10b      	bne.n	8009646 <_printf_i+0x14a>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	07de      	lsls	r6, r3, #31
 8009632:	d508      	bpl.n	8009646 <_printf_i+0x14a>
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	6861      	ldr	r1, [r4, #4]
 8009638:	4299      	cmp	r1, r3
 800963a:	bfde      	ittt	le
 800963c:	2330      	movle	r3, #48	; 0x30
 800963e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009642:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009646:	1b52      	subs	r2, r2, r5
 8009648:	6122      	str	r2, [r4, #16]
 800964a:	464b      	mov	r3, r9
 800964c:	4621      	mov	r1, r4
 800964e:	4640      	mov	r0, r8
 8009650:	f8cd a000 	str.w	sl, [sp]
 8009654:	aa03      	add	r2, sp, #12
 8009656:	f7ff fedf 	bl	8009418 <_printf_common>
 800965a:	3001      	adds	r0, #1
 800965c:	d14a      	bne.n	80096f4 <_printf_i+0x1f8>
 800965e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009662:	b004      	add	sp, #16
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f043 0320 	orr.w	r3, r3, #32
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	2778      	movs	r7, #120	; 0x78
 8009672:	4832      	ldr	r0, [pc, #200]	; (800973c <_printf_i+0x240>)
 8009674:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	6829      	ldr	r1, [r5, #0]
 800967c:	061f      	lsls	r7, r3, #24
 800967e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009682:	d402      	bmi.n	800968a <_printf_i+0x18e>
 8009684:	065f      	lsls	r7, r3, #25
 8009686:	bf48      	it	mi
 8009688:	b2b6      	uxthmi	r6, r6
 800968a:	07df      	lsls	r7, r3, #31
 800968c:	bf48      	it	mi
 800968e:	f043 0320 	orrmi.w	r3, r3, #32
 8009692:	6029      	str	r1, [r5, #0]
 8009694:	bf48      	it	mi
 8009696:	6023      	strmi	r3, [r4, #0]
 8009698:	b91e      	cbnz	r6, 80096a2 <_printf_i+0x1a6>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f023 0320 	bic.w	r3, r3, #32
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	2310      	movs	r3, #16
 80096a4:	e7a6      	b.n	80095f4 <_printf_i+0xf8>
 80096a6:	4824      	ldr	r0, [pc, #144]	; (8009738 <_printf_i+0x23c>)
 80096a8:	e7e4      	b.n	8009674 <_printf_i+0x178>
 80096aa:	4615      	mov	r5, r2
 80096ac:	e7bd      	b.n	800962a <_printf_i+0x12e>
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	6826      	ldr	r6, [r4, #0]
 80096b2:	1d18      	adds	r0, r3, #4
 80096b4:	6961      	ldr	r1, [r4, #20]
 80096b6:	6028      	str	r0, [r5, #0]
 80096b8:	0635      	lsls	r5, r6, #24
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	d501      	bpl.n	80096c2 <_printf_i+0x1c6>
 80096be:	6019      	str	r1, [r3, #0]
 80096c0:	e002      	b.n	80096c8 <_printf_i+0x1cc>
 80096c2:	0670      	lsls	r0, r6, #25
 80096c4:	d5fb      	bpl.n	80096be <_printf_i+0x1c2>
 80096c6:	8019      	strh	r1, [r3, #0]
 80096c8:	2300      	movs	r3, #0
 80096ca:	4615      	mov	r5, r2
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	e7bc      	b.n	800964a <_printf_i+0x14e>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	2100      	movs	r1, #0
 80096d4:	1d1a      	adds	r2, r3, #4
 80096d6:	602a      	str	r2, [r5, #0]
 80096d8:	681d      	ldr	r5, [r3, #0]
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f859 	bl	8009794 <memchr>
 80096e2:	b108      	cbz	r0, 80096e8 <_printf_i+0x1ec>
 80096e4:	1b40      	subs	r0, r0, r5
 80096e6:	6060      	str	r0, [r4, #4]
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	6123      	str	r3, [r4, #16]
 80096ec:	2300      	movs	r3, #0
 80096ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f2:	e7aa      	b.n	800964a <_printf_i+0x14e>
 80096f4:	462a      	mov	r2, r5
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	47d0      	blx	sl
 80096fe:	3001      	adds	r0, #1
 8009700:	d0ad      	beq.n	800965e <_printf_i+0x162>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	079b      	lsls	r3, r3, #30
 8009706:	d413      	bmi.n	8009730 <_printf_i+0x234>
 8009708:	68e0      	ldr	r0, [r4, #12]
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	4298      	cmp	r0, r3
 800970e:	bfb8      	it	lt
 8009710:	4618      	movlt	r0, r3
 8009712:	e7a6      	b.n	8009662 <_printf_i+0x166>
 8009714:	2301      	movs	r3, #1
 8009716:	4632      	mov	r2, r6
 8009718:	4649      	mov	r1, r9
 800971a:	4640      	mov	r0, r8
 800971c:	47d0      	blx	sl
 800971e:	3001      	adds	r0, #1
 8009720:	d09d      	beq.n	800965e <_printf_i+0x162>
 8009722:	3501      	adds	r5, #1
 8009724:	68e3      	ldr	r3, [r4, #12]
 8009726:	9903      	ldr	r1, [sp, #12]
 8009728:	1a5b      	subs	r3, r3, r1
 800972a:	42ab      	cmp	r3, r5
 800972c:	dcf2      	bgt.n	8009714 <_printf_i+0x218>
 800972e:	e7eb      	b.n	8009708 <_printf_i+0x20c>
 8009730:	2500      	movs	r5, #0
 8009732:	f104 0619 	add.w	r6, r4, #25
 8009736:	e7f5      	b.n	8009724 <_printf_i+0x228>
 8009738:	08009ea1 	.word	0x08009ea1
 800973c:	08009eb2 	.word	0x08009eb2

08009740 <memmove>:
 8009740:	4288      	cmp	r0, r1
 8009742:	b510      	push	{r4, lr}
 8009744:	eb01 0402 	add.w	r4, r1, r2
 8009748:	d902      	bls.n	8009750 <memmove+0x10>
 800974a:	4284      	cmp	r4, r0
 800974c:	4623      	mov	r3, r4
 800974e:	d807      	bhi.n	8009760 <memmove+0x20>
 8009750:	1e43      	subs	r3, r0, #1
 8009752:	42a1      	cmp	r1, r4
 8009754:	d008      	beq.n	8009768 <memmove+0x28>
 8009756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800975a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800975e:	e7f8      	b.n	8009752 <memmove+0x12>
 8009760:	4601      	mov	r1, r0
 8009762:	4402      	add	r2, r0
 8009764:	428a      	cmp	r2, r1
 8009766:	d100      	bne.n	800976a <memmove+0x2a>
 8009768:	bd10      	pop	{r4, pc}
 800976a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800976e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009772:	e7f7      	b.n	8009764 <memmove+0x24>

08009774 <_sbrk_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	2300      	movs	r3, #0
 8009778:	4d05      	ldr	r5, [pc, #20]	; (8009790 <_sbrk_r+0x1c>)
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f8 fafa 	bl	8001d78 <_sbrk>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_sbrk_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_sbrk_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	2000254c 	.word	0x2000254c

08009794 <memchr>:
 8009794:	4603      	mov	r3, r0
 8009796:	b510      	push	{r4, lr}
 8009798:	b2c9      	uxtb	r1, r1
 800979a:	4402      	add	r2, r0
 800979c:	4293      	cmp	r3, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	d101      	bne.n	80097a6 <memchr+0x12>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e003      	b.n	80097ae <memchr+0x1a>
 80097a6:	7804      	ldrb	r4, [r0, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	428c      	cmp	r4, r1
 80097ac:	d1f6      	bne.n	800979c <memchr+0x8>
 80097ae:	bd10      	pop	{r4, pc}

080097b0 <_realloc_r>:
 80097b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	4680      	mov	r8, r0
 80097b6:	4614      	mov	r4, r2
 80097b8:	460e      	mov	r6, r1
 80097ba:	b921      	cbnz	r1, 80097c6 <_realloc_r+0x16>
 80097bc:	4611      	mov	r1, r2
 80097be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c2:	f7ff bc45 	b.w	8009050 <_malloc_r>
 80097c6:	b92a      	cbnz	r2, 80097d4 <_realloc_r+0x24>
 80097c8:	f7ff fbda 	bl	8008f80 <_free_r>
 80097cc:	4625      	mov	r5, r4
 80097ce:	4628      	mov	r0, r5
 80097d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d4:	f000 f81b 	bl	800980e <_malloc_usable_size_r>
 80097d8:	4284      	cmp	r4, r0
 80097da:	4607      	mov	r7, r0
 80097dc:	d802      	bhi.n	80097e4 <_realloc_r+0x34>
 80097de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097e2:	d812      	bhi.n	800980a <_realloc_r+0x5a>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4640      	mov	r0, r8
 80097e8:	f7ff fc32 	bl	8009050 <_malloc_r>
 80097ec:	4605      	mov	r5, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d0ed      	beq.n	80097ce <_realloc_r+0x1e>
 80097f2:	42bc      	cmp	r4, r7
 80097f4:	4622      	mov	r2, r4
 80097f6:	4631      	mov	r1, r6
 80097f8:	bf28      	it	cs
 80097fa:	463a      	movcs	r2, r7
 80097fc:	f7ff fbb2 	bl	8008f64 <memcpy>
 8009800:	4631      	mov	r1, r6
 8009802:	4640      	mov	r0, r8
 8009804:	f7ff fbbc 	bl	8008f80 <_free_r>
 8009808:	e7e1      	b.n	80097ce <_realloc_r+0x1e>
 800980a:	4635      	mov	r5, r6
 800980c:	e7df      	b.n	80097ce <_realloc_r+0x1e>

0800980e <_malloc_usable_size_r>:
 800980e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009812:	1f18      	subs	r0, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	bfbc      	itt	lt
 8009818:	580b      	ldrlt	r3, [r1, r0]
 800981a:	18c0      	addlt	r0, r0, r3
 800981c:	4770      	bx	lr
	...

08009820 <_init>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr

0800982c <_fini>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr
